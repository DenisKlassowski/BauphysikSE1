/* Generated code for Python module 'PyQt5.uic.uiparser'
 * created by Nuitka version 0.6.7
 *
 * This code is in part copyright 2019 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The "_module_PyQt5$uic$uiparser" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_PyQt5$uic$uiparser;
PyDictObject *moduledict_PyQt5$uic$uiparser;

/* The declarations of module constants used, if any. */
static PyObject *const_str_plain_widgetTreeItemHandlers;
extern PyObject *const_str_plain_qtcore_module;
static PyObject *const_str_plain_getter_args;
static PyObject *const_str_plain_actions;
extern PyObject *const_str_plain___spec__;
static PyObject *const_str_digest_7bc3470fc4778b29b7a8609fed8b43ef;
extern PyObject *const_str_plain___name__;
static PyObject *const_tuple_str_plain_header_str_plain_mpath_str_plain_part_tuple;
static PyObject *const_str_plain__resource_suffix;
static PyObject *const_str_plain_cme;
extern PyObject *const_str_plain_object;
static PyObject *const_str_plain_FieldRole;
static PyObject *const_str_plain_MinimumSectionSize;
static PyObject *const_str_plain_Visible;
static PyObject *const_str_plain_bool;
static PyObject *const_tuple_31345ce69497665f1c3b1f55e99685cb_tuple;
static PyObject *const_str_plain_setSortIndicatorShown;
static PyObject *const_str_plain_branch;
static PyObject *const_str_plain_top_layout;
extern PyObject *const_dict_51eb06cf18b562904cb641f9f5ce3334;
extern PyObject *const_str_plain_QMainWindow;
static PyObject *const_str_plain_setMenuBar;
static PyObject *const_str_digest_5480cd9990f0e99fdeb8be21e41fe513;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_None;
static PyObject *const_str_plain_readResources;
static PyObject *const_str_digest_4464fc3d3e5c3d0815748277863f12d2;
static PyObject *const_str_plain_rowstretch;
extern PyObject *const_str_plain_horiz;
static PyObject *const_str_plain_topwidget;
static PyObject *const_str_plain_itemstack;
static PyObject *const_str_plain_false;
static PyObject *const_tuple_str_plain_self_str_plain_item_tuple;
static PyObject *const_str_plain_CascadingSectionResizes;
extern PyObject *const_str_plain___debug__;
extern PyObject *const_str_plain_pyuicSpacing;
static PyObject *const_str_plain_sizeType;
static PyObject *const_str_plain_setRowCount;
extern PyObject *const_str_plain_flags;
extern PyObject *const_str_plain_set_base_dir;
static PyObject *const_str_digest_14766822bea9857bbe07483cf8fafd80;
static PyObject *const_str_digest_2598b7d5190e4e17266e5229aa9e007c;
static PyObject *const_str_digest_2f355444d3ad388bf7643fe371ee6112;
static PyObject *const_str_digest_6520b8ef2454df66a7574994488b7177;
extern PyObject *const_str_plain_setDelayedProps;
static PyObject *const_str_plain_bg_name;
extern PyObject *const_str_plain_str;
static PyObject *const_str_plain_setWidget;
extern PyObject *const_str_plain_horizontalHeader;
static PyObject *const_str_plain_handleHeaderView;
static PyObject *const_str_plain_setFlags;
extern PyObject *const_str_plain_is_attribute;
static PyObject *const_str_plain_setStretch;
extern PyObject *const_int_neg_2;
extern PyObject *const_str_plain_QBoxLayout;
static PyObject *const_str_plain_createWidget;
extern PyObject *const_str_plain_QObjectCreator;
extern PyObject *const_str_plain_path;
static PyObject *const_str_digest_b793113dcb397eec5a91e1173742188e;
static PyObject *const_str_plain_addSeparator;
static PyObject *const_str_plain_StretchLastSection;
extern PyObject *const_str_plain_metaObject;
extern PyObject *const_str_plain_font;
extern PyObject *const_str_plain_QComboBox;
static PyObject *const_str_plain_configureLayout;
static PyObject *const_str_plain_setIcon;
static PyObject *const_tuple_str_plain_include_tuple;
static PyObject *const_str_plain_disableSorting;
static PyObject *const_str_plain_reversed;
extern PyObject *const_str_plain_name;
static PyObject *const_str_plain_getiterator;
extern PyObject *const_str_plain_QWizard;
extern PyObject *const_str_plain_endswith;
extern PyObject *const_str_plain_objcreator;
static PyObject *const_str_plain_topIsLayoutWidget;
extern PyObject *const_str_plain_QListWidget;
static PyObject *const_str_plain_setTaborder;
static PyObject *const_str_plain_include;
static PyObject *const_tuple_str_plain_self_str_plain_name_str_plain_suffix_tuple;
static PyObject *const_str_plain_HighlightSections;
static PyObject *const_str_digest_8e75a3f9bd8e7aa4de8c51b615c6cc63;
static PyObject *const_str_plain_tool_tip;
static PyObject *const_str_digest_b2826c76a53514b634ff682880f98334;
static PyObject *const_str_digest_9ed5685f4fa965cd3b72c775342f502e;
extern PyObject *const_str_plain_False;
extern PyObject *const_str_plain_resources;
static PyObject *const_tuple_01d6212b4165d924dbe2429b699023db_tuple;
static PyObject *const_str_plain__parse_alignment;
static PyObject *const_tuple_9e565e4871d64ba6e72d77a7e15bf1de_tuple;
static PyObject *const_dict_c4936adada434d6aeb6575d30ce7e76f;
static PyObject *const_str_plain_dockWidgetArea;
static PyObject *const_str_plain_pop;
extern PyObject *const_tuple_str_plain_self_str_plain_context_tuple;
extern PyObject *const_int_0;
static PyObject *const_str_plain__form_layout_role;
static PyObject *const_str_plain_lp;
static PyObject *const_str_digest_d35bd4063b7190ff1a4439d1e8f23b29;
static PyObject *const_str_plain_header2module;
static PyObject *const_str_plain_setZOrder;
static PyObject *const_str_plain_alignment;
static PyObject *const_str_plain_setCentralWidget;
static PyObject *const_str_plain_row_counter;
static PyObject *const_str_digest_ec008b11def3fee25602c86081895340;
static PyObject *const_str_plain_setHorizontalHeaderItem;
static PyObject *const_str_plain_WidgetStack;
static PyObject *const_str_plain_qt_align;
static PyObject *const_str_plain_defaults;
extern PyObject *const_str_plain_setProperties;
static PyObject *const_str_plain_location;
static PyObject *const_tuple_str_plain_self_str_plain_w_tuple;
extern PyObject *const_str_plain_type;
static PyObject *const_str_digest_3234265c5f9965146a60ec0be84c2f5d;
extern PyObject *const_str_plain_class;
extern PyObject *const_str_plain___cached__;
static PyObject *const_tuple_14f192b8a9cdcc4ba60cd5944569028a_tuple;
static PyObject *const_tuple_str_plain_parse_str_plain_SubElement_tuple;
static PyObject *const_str_plain_setStatusBar;
extern PyObject *const_str_chr_124;
static PyObject *const_str_plain_basename;
static PyObject *const_str_digest_90b8f10f9305c30aebe0115117ce89fd;
static PyObject *const_str_plain_align_flags;
extern PyObject *const_str_plain_QFormLayout;
static PyObject *const_str_plain_bottom;
extern PyObject *const_int_pos_1;
static PyObject *const_str_plain_setToolTip;
extern PyObject *const_str_plain_replace;
extern PyObject *const_str_plain_connectSlotsByName;
extern PyObject *const_str_plain_QWidget;
static PyObject *const_str_plain_addPage;
static PyObject *const_str_plain_custom_widget;
static PyObject *const_str_digest_78725272a22480dab3a6e00173902429;
extern PyObject *const_str_plain_attrib;
static PyObject *const_str_plain_setupObject;
static PyObject *const_str_plain_rowCount;
extern PyObject *const_str_plain_QSpacerItem;
static PyObject *const_str_plain_popWidget;
extern PyObject *const_str_plain___prepare__;
static PyObject *const_str_plain_raise_;
static PyObject *const_str_plain_status_tip;
static PyObject *const_str_plain_wprops;
extern PyObject *const_str_plain_child;
static PyObject *const_str_digest_9eb71d06406e6df9ce9a7d61186f5141;
static PyObject *const_str_plain_spacer;
static PyObject *const_str_digest_08f4331807e37aaa29acae8ee7261be4;
static PyObject *const_str_digest_bfceee1376ebbffaee68ba1980d9c486;
extern PyObject *const_str_plain_spacing;
extern PyObject *const_str_plain_invoke;
extern PyObject *const_str_plain_createQObject;
static PyObject *const_str_digest_5370431bbaf6c67536847cbb4bcef764;
static PyObject *const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple;
extern PyObject *const_str_plain_buddy;
static PyObject *const_str_digest_304f3b222ad519647bcf566a6896f005;
extern PyObject *const_str_plain_icon;
extern PyObject *const_str_plain_qtgui_module;
static PyObject *const_str_plain_addAction;
extern PyObject *const_str_plain_property;
extern PyObject *const_str_plain_QListWidgetItem;
extern PyObject *const_str_plain_startswith;
extern PyObject *const_str_plain_role;
static PyObject *const_str_plain_dwArea;
static PyObject *const_tuple_ba4029ef5794ebf626de2d5293ee19ba_tuple;
extern PyObject *const_str_plain_QTableWidget;
static PyObject *const_tuple_str_plain_bool_tuple;
static PyObject *const_str_plain_find;
static PyObject *const_str_plain_extends;
static PyObject *const_tuple_str_empty_str_dot_tuple;
static PyObject *const_tuple_cfbf2f9fef9a4a29dff546053cf762b5_tuple;
extern PyObject *const_str_plain_QStatusBar;
static PyObject *const_str_digest_748f503b941eaf25a96f0608b1afa652;
extern PyObject *const_str_plain_leftMargin;
static PyObject *const_tuple_str_plain_Q_tuple;
extern PyObject *const_str_plain_sender;
static PyObject *const_str_plain_currentActionGroup;
static PyObject *const_str_plain_action;
static PyObject *const_str_plain_check_state;
static PyObject *const_str_digest_262a47eb39a0fa2d22b104b5c2c3b066;
extern PyObject *const_str_plain_string;
static PyObject *const_str_plain_setItemToolTip;
static PyObject *const_str_plain_background;
static PyObject *const_str_plain_createLayout;
static PyObject *const_str_plain_spacerItem;
extern PyObject *const_slice_int_pos_1_none_none;
extern PyObject *const_str_plain_buddies;
extern PyObject *const_str_plain___file__;
static PyObject *const_str_plain_setter;
static PyObject *const_str_plain_nr_in_parent;
static PyObject *const_str_plain_stack;
static PyObject *const_str_plain_insertToolBarBreak;
extern PyObject *const_str_plain_widget;
static PyObject *const_str_digest_4c143f3e7c99b8cfb3d059979f943c26;
extern PyObject *const_str_plain_rightMargin;
static PyObject *const_str_digest_0744c8b0e87f37fc06b224185eda60ef;
static PyObject *const_tuple_str_chr_44_tuple;
extern PyObject *const_str_plain_QLayout;
static PyObject *const_str_plain_name_suffixes;
static PyObject *const_str_plain_bound_signal;
extern PyObject *const_str_plain_QAbstractButton;
static PyObject *const_str_plain_size_args;
static PyObject *const_str_plain_setForeground;
static PyObject *const_str_plain__layout_position;
static PyObject *const_str_plain_cname;
extern PyObject *const_str_plain_read;
static PyObject *const_tuple_str_plain_location_tuple;
extern PyObject *const_str_plain_QToolBar;
extern PyObject *const_str_plain_connect;
extern PyObject *const_str_plain_ui;
extern PyObject *const_str_plain_clsname;
extern PyObject *const_str_plain_lower;
extern PyObject *const_str_plain___orig_bases__;
extern PyObject *const_slice_none_int_neg_2_none;
static PyObject *const_str_plain_createUserInterface;
static PyObject *const_str_plain_DockWidgetArea;
static PyObject *const_str_plain_setText;
extern PyObject *const_str_plain_Line;
extern PyObject *const_str_plain___qualname__;
static PyObject *const_str_plain_suffix;
static PyObject *const_str_plain_ShowSortIndicator;
extern PyObject *const_str_plain_slot;
static PyObject *const_str_plain_setArray;
static PyObject *const_str_plain_ButtonGroup;
extern PyObject *const_str_plain_w;
static PyObject *const_str_plain_SubElement;
extern PyObject *const_str_plain_QTableWidgetItem;
extern PyObject *const_str_plain_value;
extern PyObject *const_str_plain_Qt;
static PyObject *const_str_plain_columnCount;
extern PyObject *const_tuple_str_plain_property_tuple;
static PyObject *const_str_plain_setCheckState;
static PyObject *const_str_plain_conn;
static PyObject *const_tuple_str_plain_extends_tuple;
static PyObject *const_str_plain_setColumnStretch;
static PyObject *const_str_plain_setRowStretch;
static PyObject *const_str_plain_loc;
extern PyObject *const_str_plain_context;
extern PyObject *const_str_plain_finalize;
extern PyObject *const_str_plain_enumerate;
static PyObject *const_str_plain_setColumnCount;
extern PyObject *const_str_plain_creatorPolicy;
static PyObject *const_str_plain_top;
extern PyObject *const_str_plain_verticalHeaderItem;
static PyObject *const_str_plain_buttonGroup;
static PyObject *const_str_plain_action_group;
extern PyObject *const_str_plain_setSortingEnabled;
static PyObject *const_str_plain_branchHandlers;
static PyObject *const_str_digest_fd85e1e33893df4fefabac55226f6627;
static PyObject *const_str_plain_widget_class;
extern PyObject *const_tuple_str_plain_self_str_plain_classname_str_plain_widgetname_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_elem_str_plain_action_group_tuple;
extern PyObject *const_str_plain_horizontalHeaderItem;
static PyObject *const_str_digest_9217665ed117cafee377d2e94bb84921;
extern PyObject *const_tuple_str_empty_tuple;
static PyObject *const_str_plain_toolBarBreak;
extern PyObject *const_str_plain___getitem__;
extern PyObject *const_str_plain_getProperty;
static PyObject *const_str_plain_setWhatsThis;
static PyObject *const_tuple_f352c0ae9f0b6746072efc848800194b_tuple;
static PyObject *const_str_digest_716fa675c51a4763e154b34613be1a48;
extern PyObject *const_str_plain_iter;
static PyObject *const_str_plain_buttonGroups;
static PyObject *const_tuple_8f69df6790447d68e0e3d1443283a4fd_tuple;
static PyObject *const_str_plain_setCascadingSectionResizes;
static PyObject *const_slice_none_int_neg_4_none;
static PyObject *const_str_plain_setVisible;
static PyObject *const_tuple_str_plain_signal_tuple;
static PyObject *const_str_plain_DefaultSectionSize;
extern PyObject *const_str_plain_getSlot;
extern PyObject *const_str_plain_text;
static PyObject *const_str_plain_action_obj;
extern PyObject *const_str_plain_origin;
extern PyObject *const_str_plain_part;
static PyObject *const_tuple_str_plain_self_str_plain_elem_tuple;
extern PyObject *const_str_digest_75fd71b1edada749c2ef7ac810062295;
extern PyObject *const_str_plain_className;
static PyObject *const_str_plain_toolBarArea;
extern PyObject *const_str_plain_QMenu;
static PyObject *const_str_plain_any_i18n;
static PyObject *const_str_chr_40;
static PyObject *const_str_plain_setRowMinimumHeight;
static PyObject *const_str_plain_column_counter;
static PyObject *const_tuple_4d5ee9d521aa05b1afef1840a57b3195_tuple;
static PyObject *const_str_plain_setStatusTip;
extern PyObject *const_str_plain_signal_name;
extern PyObject *const_str_plain_QtWidgets;
extern PyObject *const_str_plain_createToplevelWidget;
static PyObject *const_str_plain_setLayout;
static PyObject *const_str_plain_push;
static PyObject *const_str_plain_signal_args;
static PyObject *const_str_chr_47;
static PyObject *const_str_digest_4bfe12afbfc91eb5d662408182ab89f0;
extern PyObject *const_str_plain_sys;
static PyObject *const_str_plain_setMinimumSectionSize;
static PyObject *const_str_plain_setBackground;
extern PyObject *const_slice_none_int_neg_1_none;
extern PyObject *const_str_plain_findall;
static PyObject *const_str_plain_zorder;
extern PyObject *const_tuple_str_chr_124_tuple;
extern PyObject *const_str_plain_elem;
extern PyObject *const_str_plain_findtext;
extern PyObject *const_str_plain___init__;
static PyObject *const_str_plain_left;
static PyObject *const_str_plain_addDockWidget;
extern PyObject *const_str_plain_parse;
static PyObject *const_str_plain_name2object;
static PyObject *const_str_plain_setTabOrder;
extern PyObject *const_str_plain_QtCore;
static PyObject *const_str_plain_buttongroups;
static PyObject *const_tuple_str_plain_alignment_tuple;
static PyObject *const_str_plain_sorting_enabled;
extern PyObject *const_str_plain_mname;
static PyObject *const_str_plain_createSpacer;
static PyObject *const_str_digest_9ec655c186ef3cb2461e08a7bff9a8dc;
extern PyObject *const_str_plain_DEBUG;
extern PyObject *const_str_plain_has_location;
static PyObject *const_str_plain_version;
static PyObject *const_str_digest_8453bcf550b723650709ee663bd6e4d6;
extern PyObject *const_str_empty;
static PyObject *const_str_plain_layoutdefault;
static PyObject *const_dict_d7b7cb1704cf1609d1297de4bce6075f;
extern PyObject *const_str_plain_bottomMargin;
extern PyObject *const_tuple_str_digest_ebebb18731664a12452b2ba6915b22ed_tuple;
static PyObject *const_str_plain_setTabToolTip;
static PyObject *const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple;
static PyObject *const_str_digest_cb6fa27e118f1c8e5a09ad2d9734c341;
static PyObject *const_tuple_str_plain_version_tuple;
static PyObject *const_str_plain_array;
extern PyObject *const_str_plain_getLogger;
static PyObject *const_str_digest_338b00a8bfb328deb8eeff6c34f47234;
static PyObject *const_str_plain_whats_this;
static PyObject *const_str_plain_setBuddies;
static PyObject *const_tuple_str_plain_slot_tuple;
static PyObject *const_str_plain_tabstops;
static PyObject *const_str_plain_colspan;
static PyObject *const_str_plain_uniqueName;
static PyObject *const_str_digest_d2fbcd2f684bdeb7c036ce7f430e21b6;
extern PyObject *const_int_neg_1;
extern PyObject *const_str_plain_QMenuBar;
static PyObject *const_str_digest_2981af78011f3ca0a7325bdc08940505;
extern PyObject *const_str_plain_indexOf;
extern PyObject *const_str_plain_widgetname;
static PyObject *const_tuple_str_plain_spacerItem_tuple;
static PyObject *const_tuple_str_plain_header_tuple;
static PyObject *const_str_digest_b912f583a917a493abbf8d46781f9053;
static PyObject *const_tuple_str_plain_column_tuple;
static PyObject *const_str_plain_columnminimumwidth;
static PyObject *const_str_plain_c_prop;
static PyObject *const_tuple_0a15021ef3f570acf96e4125349210bb_tuple;
static PyObject *const_str_digest_a8a6bd741afb87886de41d69dd3c4f2d;
static PyObject *const_str_plain_bg_i18n;
static PyObject *const_str_digest_c48babcf9874284b2ebed30b54116256;
extern PyObject *const_str_plain_QSizePolicy;
extern PyObject *const_str_plain_QTreeView;
static PyObject *const_tuple_0f99ef9bbf8af9390421ffc4af44e38a_tuple;
extern PyObject *const_tuple_true_tuple;
extern PyObject *const_str_plain_QGridLayout;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_plain_setObjectName;
static PyObject *const_tuple_str_plain_row_tuple;
extern PyObject *const_str_plain_re;
extern PyObject *const_str_plain_root;
static PyObject *const_str_digest_242c3b8eab8a7b896128bb7d41e496e9;
static PyObject *const_str_plain_peek;
static PyObject *const_tuple_str_digest_2598b7d5190e4e17266e5229aa9e007c_tuple;
static PyObject *const_str_plain_label;
extern PyObject *const_str_plain_QTreeWidgetItem;
static PyObject *const_str_plain_readDefaults;
static PyObject *const_tuple_573875de7099457af4fa28766608094f_tuple;
static PyObject *const_str_plain_align;
extern PyObject *const_str_digest_ebebb18731664a12452b2ba6915b22ed;
extern PyObject *const_str_plain_item;
static PyObject *const_str_plain_mpath;
extern PyObject *const_str_plain_topMargin;
extern PyObject *const_tuple_str_plain_self_tuple;
extern PyObject *const_str_plain_horizontalSpacing;
static PyObject *const_str_plain_parent;
static PyObject *const_str_plain_height;
extern PyObject *const_str_plain_QFrame;
extern PyObject *const_str_plain_convert;
static PyObject *const_str_plain_toolTip;
extern PyObject *const_tuple_empty;
extern PyObject *const_str_space;
static PyObject *const_str_digest_45b12fe1ec97ee0dba8b2e57e629b25d;
extern PyObject *const_str_plain_append;
static PyObject *const_tuple_07bae01c431d143432661f50ae3017e8_tuple;
static PyObject *const_str_plain_actor;
static PyObject *const_str_plain_tbArea;
extern PyObject *const_str_plain_QTabWidget;
extern PyObject *const_str_plain_setContext;
static PyObject *const_str_digest_572e435e50adc23dbb2f3687384284ab;
static PyObject *const_str_plain_setHighlightSections;
static PyObject *const_str_plain_setExclusive;
static PyObject *const_str_plain_rowminimumheight;
static PyObject *const_str_digest_d535eaef61094327aa1026ba7b302dc3;
static PyObject *const_str_plain_addHeader;
static PyObject *const_str_plain_createAction;
extern PyObject *const_str_plain_split;
extern PyObject *const_str_plain_QAction;
static PyObject *const_str_plain_addToolBar;
static PyObject *const_str_plain_receiver;
static PyObject *const_str_plain_traverseWidgetTree;
extern PyObject *const_str_plain_qtwidgets_module;
static PyObject *const_str_plain_buttongroup;
static PyObject *const_tuple_type_list_tuple;
static PyObject *const_str_plain_list;
extern PyObject *const_str_plain_UIParser;
static PyObject *const_str_digest_fcf3816197585187164b4224546fc9de;
static PyObject *const_str_plain_rowspan;
extern PyObject *const_str_plain_margin;
static PyObject *const_tuple_str_space_str_empty_tuple;
extern PyObject *const_str_plain_classname;
static PyObject *const_str_digest_f22bebc168b7d8ed6b55ed0d053513e0;
static PyObject *const_str_plain_col;
extern PyObject *const_str_plain_objectName;
static PyObject *const_str_digest_a9757f1823576260a744f1c5953e3c4d;
static PyObject *const_str_plain___sortingEnabled;
extern PyObject *const_tuple_str_plain_Properties_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_elem_str_plain_name_str_plain_prop_tuple;
extern PyObject *const_str_plain_reset;
static PyObject *const_str_plain_LabelRole;
static PyObject *const_str_digest_1a65ba3212f08d41c1e778325d5d05ca;
static PyObject *const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple;
extern PyObject *const_str_plain_Properties;
static PyObject *const_str_digest_ca295fcc08de80c67d850ba455907a8b;
static PyObject *const_dict_e993c1f0ede312f17d11add870c0ef8c;
static PyObject *const_str_digest_f61bca08bfc72a176162ab1bf09cdb19;
static PyObject *const_str_digest_7e7a747a621069ae73d59f0e9254b5db;
static PyObject *const_str_plain_nr_in_root;
static PyObject *const_str_plain_iterator;
extern PyObject *const_str_plain_dirname;
static PyObject *const_str_digest_6ac68c5ef1bab74796286d26f9e887d5;
static PyObject *const_str_digest_3cdde86d7672d3e5eccfb1a4e9488768;
extern PyObject *const_str_plain___class__;
static PyObject *const_str_digest_7b85d249a0a0a4cdf516a65c693960d6;
static PyObject *const_str_digest_bba21dfbbd60e63084b6d163cd34049c;
extern PyObject *const_str_plain__;
static PyObject *const_str_plain_setItem;
static PyObject *const_str_digest_04d67503345d6d64752f0c9fc2a764c3;
extern PyObject *const_str_plain___module__;
static PyObject *const_tuple_str_digest_10ebdb17bdc88158bceb0eeee092f4a7_tuple;
extern PyObject *const_str_plain_debug;
static PyObject *const_str_digest_8d04cde8e249f5ecc6a6436471207d1f;
static PyObject *const_str_digest_bc1f6041ef8bbbd1432e73c0d64228be;
static PyObject *const_str_plain_actiongroup;
static PyObject *const_str_digest_9270090f135b77d267e2b4cc9ded6732;
static PyObject *const_tuple_str_digest_ca913d6a9f68c5308f38cd021160f12c_tuple;
static PyObject *const_tuple_str_chr_47_tuple;
extern PyObject *const_str_plain_base_dir;
extern PyObject *const_str_plain_logger;
static PyObject *const_str_plain_titm;
extern PyObject *const_str_plain_menuAction;
static PyObject *const_str_digest_84fe8cce8ed440a80406c6f7fbb31b98;
static PyObject *const_str_digest_a9160ed77ff1cfbfc34edf97a5d225d2;
static PyObject *const_str_plain_widget_elem;
static PyObject *const_str_plain_Expanding;
extern PyObject *const_str_plain_QMetaObject;
static PyObject *const_str_digest_460add3f2fc1bfb3ad294aea7c05117c;
static PyObject *const_str_plain_handleItem;
static PyObject *const_str_plain_tooltip;
static PyObject *const_str_digest_030fb6874dacc73e7238010567f6f810;
static PyObject *const_str_plain_addaction;
static PyObject *const_str_plain_tagname;
extern PyObject *const_str_plain_get;
static PyObject *const_tuple_str_plain_self_str_plain_elem_str_plain_name_tuple;
static PyObject *const_str_plain_createWidgetItem;
extern PyObject *const_str_plain_QToolBox;
static PyObject *const_str_plain_lay;
static PyObject *const_str_plain_lastwidget;
static PyObject *const_str_digest_49057ba07775359ea68b084a8a6d4cb3;
extern PyObject *const_str_plain_logging;
static PyObject *const_tuple_str_plain_obj_str_plain_self_tuple;
static PyObject *const_str_digest_10ebdb17bdc88158bceb0eeee092f4a7;
static PyObject *const_str_plain_number;
extern PyObject *const_str_plain_uiname;
static PyObject *const_tuple_str_plain_rowspan_int_pos_1_tuple;
static PyObject *const_tuple_a338667ecb10e025b2485ec6f4dd612c_tuple;
static PyObject *const_tuple_str_plain_colspan_int_pos_1_tuple;
static PyObject *const_tuple_str_digest_2f355444d3ad388bf7643fe371ee6112_tuple;
static PyObject *const_str_plain_foreground;
extern PyObject *const_str_plain_tag;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_str_plain_whatsThis;
static PyObject *const_str_plain_props;
extern PyObject *const_tuple_str_plain___class___tuple;
static PyObject *const_tuple_false_tuple;
extern PyObject *const_str_angle_metaclass;
static PyObject *const_str_plain_SpanningRole;
static PyObject *const_tuple_str_digest_ebebb18731664a12452b2ba6915b22ed_str_dot_tuple;
static PyObject *const_str_digest_388c13b496d9f0d445c57c79d06ec868;
static PyObject *const_str_plain_tbBreak;
extern PyObject *const_str_plain_args;
static PyObject *const_tuple_f1c3a060d57425ca05d562927681f67b_tuple;
static PyObject *const_str_plain_button_groups;
extern PyObject *const_str_plain_a;
static PyObject *const_str_digest_a237f7620def8531919f60154ef3b11a;
static PyObject *const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple;
extern PyObject *const_str_plain_QTableView;
static PyObject *const_str_plain_signal;
extern PyObject *const_str_plain_layout;
extern PyObject *const_str_plain_staticmethod;
static PyObject *const_str_plain_bg;
static PyObject *const_tuple_str_plain_QObjectCreator_tuple;
extern PyObject *const_str_plain_verticalSpacing;
static PyObject *const_str_plain_topIsLayout;
static PyObject *const_str_plain_Horizontal;
extern PyObject *const_str_plain_join;
static PyObject *const_str_plain_getroot;
static PyObject *const_str_plain_setVerticalHeaderItem;
static PyObject *const_str_plain_addWidget;
extern PyObject *const_str_dot;
extern PyObject *const_str_plain_topLevelItem;
static PyObject *const_str_plain_Minimum;
static PyObject *const_str_digest_ca913d6a9f68c5308f38cd021160f12c;
static PyObject *const_str_plain_setColumnMinimumWidth;
static PyObject *const_str_plain_popLayout;
static PyObject *const_str_plain_wname;
extern PyObject *const_str_chr_44;
static PyObject *const_str_plain_createActionGroup;
static PyObject *const_str_plain_columnstretch;
static PyObject *const_str_plain_addActions;
extern PyObject *const_str_plain_properties;
extern PyObject *const_str_plain_delayed_props;
static PyObject *const_str_plain_setItemText;
static PyObject *const_tuple_fab1a18f66095cbfe499fd5876f41844_tuple;
static PyObject *const_str_digest_9a41cae06c3fe424bbe50b44c89cd454;
static PyObject *const_int_neg_4;
static PyObject *const_str_plain_button_group;
static PyObject *const_str_digest_a982dd7c9405803357897e1de910033e;
extern PyObject *const_str_plain_QActionGroup;
static PyObject *const_str_plain_c_prop_name;
extern PyObject *const_str_plain_vert;
static PyObject *const_str_plain_setFont;
static PyObject *const_str_digest_865923a05ccab2c4f6b7a197cb0dddb6;
static PyObject *const_str_plain_addButton;
static PyObject *const_tuple_str_plain_receiver_tuple;
extern PyObject *const_str_plain_title;
static PyObject *const_str_plain_separator;
static PyObject *const_str_digest_5acaa0e70bf910a8d08fcfccccadaa8c;
static PyObject *const_str_digest_6d62fde1c7144eb954a22e7133e63741;
static PyObject *const_str_plain_setBuddy;
static PyObject *const_str_plain_document;
static PyObject *const_str_digest_ff3c9a6e26ef48a60ac21af2efdc3d8c;
static PyObject *const_str_digest_bd21ceaf4d3eed5d1250b347c8589985;
static PyObject *const_str_plain_action_name;
extern PyObject *const_str_plain_QTreeWidget;
static PyObject *const_str_plain_textAlignment;
static PyObject *const_str_plain_Q;
static PyObject *const_str_plain_item_type;
static PyObject *const_str_plain_layout_position;
static PyObject *const_str_digest_6d71cbfde3f26c93c13431a89e9c5250;
static PyObject *const_tuple_str_plain_self_str_plain_parent_tuple;
extern PyObject *const_str_plain_QStackedWidget;
static PyObject *const_str_digest_923ef44bf80f96193615a804a6a69929;
static PyObject *const_str_plain_customWidgets;
extern PyObject *const_str_plain_QScrollArea;
extern PyObject *const_str_plain_resource_suffix;
extern PyObject *const_str_plain_toplevelWidget;
static PyObject *const_str_plain_getter;
static PyObject *const_str_plain_row;
extern PyObject *const_str_plain_QDockWidget;
static PyObject *const_tuple_1f1995d702ddf4eff788994a8695766c_tuple;
static PyObject *const_str_plain_setTextAlignment;
static PyObject *const_str_plain_setDefaultSectionSize;
static PyObject *const_str_plain_connections;
static PyObject *const_str_plain_right;
static PyObject *const_tuple_str_plain_layout_position_str_plain_role_tuple;
extern PyObject *const_str_plain_header;
static PyObject *const_str_plain_column;
static PyObject *const_str_digest_7b79a8950d64155a442741f6cc8c809b;
static PyObject *const_str_plain_exclusive;
static PyObject *const_str_plain_checkState;
static PyObject *const_tuple_str_plain_self_str_plain_elem_str_plain_layout_tuple;
static PyObject *const_str_plain_stretch;
static PyObject *const_tuple_str_plain_self_str_plain_layout_tuple;
static PyObject *const_str_plain_addLayout;
static PyObject *const_str_digest_136d91415b51aaa5e5a8cc9dd6e8f212;
static PyObject *const_str_plain_customwidgets;
extern PyObject *const_str_plain_isSortingEnabled;
extern PyObject *const_str_plain_orientation;
extern PyObject *const_str_plain_QButtonGroup;
static PyObject *const_tuple_str_digest_304f3b222ad519647bcf566a6896f005_tuple;
static PyObject *const_str_plain_item_nr;
extern PyObject *const_str_plain_idx;
extern PyObject *const_tuple_type_object_tuple;
extern PyObject *const_str_plain_addTab;
extern PyObject *const_str_plain_QMdiArea;
static PyObject *const_str_plain_text_alignment;
extern PyObject *const_str_plain_filename;
extern PyObject *const_str_plain_pyuicMargins;
static PyObject *const_str_digest_6249efb741b0fb6b9be6449647a36de6;
static PyObject *const_str_plain_width;
extern PyObject *const_str_plain_factory;
static PyObject *const_tuple_str_plain_args_str_plain_a_tuple;
static PyObject *const_str_plain_setStretchLastSection;
static PyObject *const_str_digest_5f33924e786752a1b16f3fa0623d9ebe;
extern PyObject *const_int_pos_3;
static PyObject *const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple;
extern PyObject *const_str_plain_prop;
extern PyObject *const_str_plain_addItem;
static PyObject *const_str_digest_bd4c096f6d6d24996c987abf0fcff08e;
extern PyObject *const_tuple_str_plain_class_tuple;
extern PyObject *const_str_plain_self;
static PyObject *const_tuple_str_plain_name_tuple;
static PyObject *const_str_digest_fef1f988ce622611673dba0e4ecba271;
static PyObject *const_str_plain_statusTip;
static PyObject *const_tuple_str_plain_self_str_plain_widget_str_plain_buddy_tuple;
static PyObject *const_str_plain_policy;
extern PyObject *const_str_plain_getAttribute;
extern PyObject *const_str_plain_verticalHeader;
extern PyObject *const_int_pos_2;
static PyObject *const_tuple_str_chr_40_tuple;
extern PyObject *const_str_plain_obj;
static PyObject *const_tuple_str_plain_self_str_plain_widget_str_plain_item_tuple;
extern PyObject *const_str_plain_headerItem;
extern PyObject *const_str_plain_addCustomWidget;
static PyObject *const_str_digest_9ef75a40156841d8c7e26edd14ca72ae;
static PyObject *const_str_plain_handler;
static PyObject *const_str_plain_createConnections;
static PyObject *const_tuple_str_plain_sender_tuple;
static PyObject *module_filename_obj;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(void) {
    const_str_plain_widgetTreeItemHandlers = UNSTREAM_STRING_ASCII(&constant_bin[ 20022 ], 22, 1);
    const_str_plain_getter_args = UNSTREAM_STRING_ASCII(&constant_bin[ 20044 ], 11, 1);
    const_str_plain_actions = UNSTREAM_STRING_ASCII(&constant_bin[ 20055 ], 7, 1);
    const_str_digest_7bc3470fc4778b29b7a8609fed8b43ef = UNSTREAM_STRING_ASCII(&constant_bin[ 20062 ], 21, 0);
    const_tuple_str_plain_header_str_plain_mpath_str_plain_part_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_header_str_plain_mpath_str_plain_part_tuple, 0, const_str_plain_header); Py_INCREF(const_str_plain_header);
    const_str_plain_mpath = UNSTREAM_STRING_ASCII(&constant_bin[ 20083 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_header_str_plain_mpath_str_plain_part_tuple, 1, const_str_plain_mpath); Py_INCREF(const_str_plain_mpath);
    PyTuple_SET_ITEM(const_tuple_str_plain_header_str_plain_mpath_str_plain_part_tuple, 2, const_str_plain_part); Py_INCREF(const_str_plain_part);
    const_str_plain__resource_suffix = UNSTREAM_STRING_ASCII(&constant_bin[ 20088 ], 16, 1);
    const_str_plain_cme = UNSTREAM_STRING_ASCII(&constant_bin[ 1507 ], 3, 1);
    const_str_plain_FieldRole = UNSTREAM_STRING_ASCII(&constant_bin[ 20104 ], 9, 1);
    const_str_plain_MinimumSectionSize = UNSTREAM_STRING_ASCII(&constant_bin[ 20113 ], 18, 1);
    const_str_plain_Visible = UNSTREAM_STRING_ASCII(&constant_bin[ 20131 ], 7, 1);
    const_str_plain_bool = UNSTREAM_STRING_ASCII(&constant_bin[ 3125 ], 4, 1);
    const_tuple_31345ce69497665f1c3b1f55e99685cb_tuple = PyTuple_New(6);
    PyTuple_SET_ITEM(const_tuple_31345ce69497665f1c3b1f55e99685cb_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_31345ce69497665f1c3b1f55e99685cb_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    const_str_plain_button_group = UNSTREAM_STRING_ASCII(&constant_bin[ 20138 ], 12, 1);
    PyTuple_SET_ITEM(const_tuple_31345ce69497665f1c3b1f55e99685cb_tuple, 2, const_str_plain_button_group); Py_INCREF(const_str_plain_button_group);
    const_str_plain_bg_name = UNSTREAM_STRING_ASCII(&constant_bin[ 20150 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_31345ce69497665f1c3b1f55e99685cb_tuple, 3, const_str_plain_bg_name); Py_INCREF(const_str_plain_bg_name);
    const_str_plain_bg = UNSTREAM_STRING_ASCII(&constant_bin[ 20150 ], 2, 1);
    PyTuple_SET_ITEM(const_tuple_31345ce69497665f1c3b1f55e99685cb_tuple, 4, const_str_plain_bg); Py_INCREF(const_str_plain_bg);
    PyTuple_SET_ITEM(const_tuple_31345ce69497665f1c3b1f55e99685cb_tuple, 5, const_str_plain_prop); Py_INCREF(const_str_plain_prop);
    const_str_plain_setSortIndicatorShown = UNSTREAM_STRING_ASCII(&constant_bin[ 20157 ], 21, 1);
    const_str_plain_branch = UNSTREAM_STRING_ASCII(&constant_bin[ 20178 ], 6, 1);
    const_str_plain_top_layout = UNSTREAM_STRING_ASCII(&constant_bin[ 20184 ], 10, 1);
    const_str_plain_setMenuBar = UNSTREAM_STRING_ASCII(&constant_bin[ 20194 ], 10, 1);
    const_str_digest_5480cd9990f0e99fdeb8be21e41fe513 = UNSTREAM_STRING_ASCII(&constant_bin[ 20204 ], 235, 0);
    const_str_plain_readResources = UNSTREAM_STRING_ASCII(&constant_bin[ 20439 ], 13, 1);
    const_str_digest_4464fc3d3e5c3d0815748277863f12d2 = UNSTREAM_STRING_ASCII(&constant_bin[ 20452 ], 29, 0);
    const_str_plain_rowstretch = UNSTREAM_STRING_ASCII(&constant_bin[ 20481 ], 10, 1);
    const_str_plain_topwidget = UNSTREAM_STRING_ASCII(&constant_bin[ 20491 ], 9, 1);
    const_str_plain_itemstack = UNSTREAM_STRING_ASCII(&constant_bin[ 20500 ], 9, 1);
    const_str_plain_false = UNSTREAM_STRING_ASCII(&constant_bin[ 20509 ], 5, 1);
    const_tuple_str_plain_self_str_plain_item_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_item_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_item_tuple, 1, const_str_plain_item); Py_INCREF(const_str_plain_item);
    const_str_plain_CascadingSectionResizes = UNSTREAM_STRING_ASCII(&constant_bin[ 20514 ], 23, 1);
    const_str_plain_sizeType = UNSTREAM_STRING_ASCII(&constant_bin[ 20537 ], 8, 1);
    const_str_plain_setRowCount = UNSTREAM_STRING_ASCII(&constant_bin[ 20545 ], 11, 1);
    const_str_digest_14766822bea9857bbe07483cf8fafd80 = UNSTREAM_STRING_ASCII(&constant_bin[ 20556 ], 26, 0);
    const_str_digest_2598b7d5190e4e17266e5229aa9e007c = UNSTREAM_STRING_ASCII(&constant_bin[ 20582 ], 18, 0);
    const_str_digest_2f355444d3ad388bf7643fe371ee6112 = UNSTREAM_STRING_ASCII(&constant_bin[ 20600 ], 19, 0);
    const_str_digest_6520b8ef2454df66a7574994488b7177 = UNSTREAM_STRING_ASCII(&constant_bin[ 20619 ], 26, 0);
    const_str_plain_setWidget = UNSTREAM_STRING_ASCII(&constant_bin[ 20645 ], 9, 1);
    const_str_plain_handleHeaderView = UNSTREAM_STRING_ASCII(&constant_bin[ 20654 ], 16, 1);
    const_str_plain_setFlags = UNSTREAM_STRING_ASCII(&constant_bin[ 20670 ], 8, 1);
    const_str_plain_setStretch = UNSTREAM_STRING_ASCII(&constant_bin[ 20678 ], 10, 1);
    const_str_plain_createWidget = UNSTREAM_STRING_ASCII(&constant_bin[ 3561 ], 12, 1);
    const_str_digest_b793113dcb397eec5a91e1173742188e = UNSTREAM_STRING_ASCII(&constant_bin[ 20688 ], 24, 0);
    const_str_plain_addSeparator = UNSTREAM_STRING_ASCII(&constant_bin[ 20712 ], 12, 1);
    const_str_plain_StretchLastSection = UNSTREAM_STRING_ASCII(&constant_bin[ 20724 ], 18, 1);
    const_str_plain_configureLayout = UNSTREAM_STRING_ASCII(&constant_bin[ 20697 ], 15, 1);
    const_str_plain_setIcon = UNSTREAM_STRING_ASCII(&constant_bin[ 20742 ], 7, 1);
    const_tuple_str_plain_include_tuple = PyTuple_New(1);
    const_str_plain_include = UNSTREAM_STRING_ASCII(&constant_bin[ 20749 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_include_tuple, 0, const_str_plain_include); Py_INCREF(const_str_plain_include);
    const_str_plain_disableSorting = UNSTREAM_STRING_ASCII(&constant_bin[ 20756 ], 14, 1);
    const_str_plain_reversed = UNSTREAM_STRING_ASCII(&constant_bin[ 20770 ], 8, 1);
    const_str_plain_getiterator = UNSTREAM_STRING_ASCII(&constant_bin[ 20778 ], 11, 1);
    const_str_plain_topIsLayoutWidget = UNSTREAM_STRING_ASCII(&constant_bin[ 20464 ], 17, 1);
    const_str_plain_setTaborder = UNSTREAM_STRING_ASCII(&constant_bin[ 20789 ], 11, 1);
    const_tuple_str_plain_self_str_plain_name_str_plain_suffix_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_name_str_plain_suffix_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_name_str_plain_suffix_tuple, 1, const_str_plain_name); Py_INCREF(const_str_plain_name);
    const_str_plain_suffix = UNSTREAM_STRING_ASCII(&constant_bin[ 4807 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_name_str_plain_suffix_tuple, 2, const_str_plain_suffix); Py_INCREF(const_str_plain_suffix);
    const_str_plain_HighlightSections = UNSTREAM_STRING_ASCII(&constant_bin[ 20800 ], 17, 1);
    const_str_digest_8e75a3f9bd8e7aa4de8c51b615c6cc63 = UNSTREAM_STRING_ASCII(&constant_bin[ 20817 ], 20, 0);
    const_str_plain_tool_tip = UNSTREAM_STRING_ASCII(&constant_bin[ 20837 ], 8, 1);
    const_str_digest_b2826c76a53514b634ff682880f98334 = UNSTREAM_STRING_ASCII(&constant_bin[ 20845 ], 49, 0);
    const_str_digest_9ed5685f4fa965cd3b72c775342f502e = UNSTREAM_STRING_ASCII(&constant_bin[ 20894 ], 22, 0);
    const_tuple_01d6212b4165d924dbe2429b699023db_tuple = PyTuple_New(4);
    PyTuple_SET_ITEM(const_tuple_01d6212b4165d924dbe2429b699023db_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_01d6212b4165d924dbe2429b699023db_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_01d6212b4165d924dbe2429b699023db_tuple, 2, const_str_plain_child); Py_INCREF(const_str_plain_child);
    const_str_plain_handler = UNSTREAM_STRING_ASCII(&constant_bin[ 20916 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_01d6212b4165d924dbe2429b699023db_tuple, 3, const_str_plain_handler); Py_INCREF(const_str_plain_handler);
    const_str_plain__parse_alignment = UNSTREAM_STRING_ASCII(&constant_bin[ 3292 ], 16, 1);
    const_tuple_9e565e4871d64ba6e72d77a7e15bf1de_tuple = PyTuple_New(5);
    PyTuple_SET_ITEM(const_tuple_9e565e4871d64ba6e72d77a7e15bf1de_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_9e565e4871d64ba6e72d77a7e15bf1de_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_9e565e4871d64ba6e72d77a7e15bf1de_tuple, 2, const_str_plain_name); Py_INCREF(const_str_plain_name);
    PyTuple_SET_ITEM(const_tuple_9e565e4871d64ba6e72d77a7e15bf1de_tuple, 3, const_str_plain_header); Py_INCREF(const_str_plain_header);
    PyTuple_SET_ITEM(const_tuple_9e565e4871d64ba6e72d77a7e15bf1de_tuple, 4, const_str_plain_value); Py_INCREF(const_str_plain_value);
    const_dict_c4936adada434d6aeb6575d30ce7e76f = _PyDict_NewPresized( 2 );
    PyDict_SetItem(const_dict_c4936adada434d6aeb6575d30ce7e76f, const_str_plain_spacing, const_int_neg_1);
    PyDict_SetItem(const_dict_c4936adada434d6aeb6575d30ce7e76f, const_str_plain_margin, const_int_neg_1);
    assert(PyDict_Size(const_dict_c4936adada434d6aeb6575d30ce7e76f) == 2);
    const_str_plain_dockWidgetArea = UNSTREAM_STRING_ASCII(&constant_bin[ 20923 ], 14, 1);
    const_str_plain_pop = UNSTREAM_STRING_ASCII(&constant_bin[ 20937 ], 3, 1);
    const_str_plain__form_layout_role = UNSTREAM_STRING_ASCII(&constant_bin[ 20628 ], 17, 1);
    const_str_plain_lp = UNSTREAM_STRING_ASCII(&constant_bin[ 18784 ], 2, 1);
    const_str_digest_d35bd4063b7190ff1a4439d1e8f23b29 = UNSTREAM_STRING_ASCII(&constant_bin[ 20940 ], 18, 0);
    const_str_plain_header2module = UNSTREAM_STRING_ASCII(&constant_bin[ 20958 ], 13, 1);
    const_str_plain_setZOrder = UNSTREAM_STRING_ASCII(&constant_bin[ 3830 ], 9, 1);
    const_str_plain_alignment = UNSTREAM_STRING_ASCII(&constant_bin[ 3299 ], 9, 1);
    const_str_plain_setCentralWidget = UNSTREAM_STRING_ASCII(&constant_bin[ 20971 ], 16, 1);
    const_str_plain_row_counter = UNSTREAM_STRING_ASCII(&constant_bin[ 20987 ], 11, 1);
    const_str_digest_ec008b11def3fee25602c86081895340 = UNSTREAM_STRING_ASCII(&constant_bin[ 20998 ], 3, 0);
    const_str_plain_setHorizontalHeaderItem = UNSTREAM_STRING_ASCII(&constant_bin[ 21001 ], 23, 1);
    const_str_plain_WidgetStack = UNSTREAM_STRING_ASCII(&constant_bin[ 3398 ], 11, 1);
    const_str_plain_qt_align = UNSTREAM_STRING_ASCII(&constant_bin[ 21024 ], 8, 1);
    const_str_plain_defaults = UNSTREAM_STRING_ASCII(&constant_bin[ 21032 ], 8, 1);
    const_str_plain_location = UNSTREAM_STRING_ASCII(&constant_bin[ 21040 ], 8, 1);
    const_tuple_str_plain_self_str_plain_w_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_w_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_w_tuple, 1, const_str_plain_w); Py_INCREF(const_str_plain_w);
    const_str_digest_3234265c5f9965146a60ec0be84c2f5d = UNSTREAM_STRING_ASCII(&constant_bin[ 21048 ], 16, 0);
    const_tuple_14f192b8a9cdcc4ba60cd5944569028a_tuple = PyTuple_New(8);
    PyTuple_SET_ITEM(const_tuple_14f192b8a9cdcc4ba60cd5944569028a_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_14f192b8a9cdcc4ba60cd5944569028a_tuple, 1, const_str_plain_clsname); Py_INCREF(const_str_plain_clsname);
    const_str_plain_parent = UNSTREAM_STRING_ASCII(&constant_bin[ 21064 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_14f192b8a9cdcc4ba60cd5944569028a_tuple, 2, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_14f192b8a9cdcc4ba60cd5944569028a_tuple, 3, const_str_plain_branch); Py_INCREF(const_str_plain_branch);
    PyTuple_SET_ITEM(const_tuple_14f192b8a9cdcc4ba60cd5944569028a_tuple, 4, const_str_plain_is_attribute); Py_INCREF(const_str_plain_is_attribute);
    PyTuple_SET_ITEM(const_tuple_14f192b8a9cdcc4ba60cd5944569028a_tuple, 5, const_str_plain_name); Py_INCREF(const_str_plain_name);
    PyTuple_SET_ITEM(const_tuple_14f192b8a9cdcc4ba60cd5944569028a_tuple, 6, const_str_plain_args); Py_INCREF(const_str_plain_args);
    PyTuple_SET_ITEM(const_tuple_14f192b8a9cdcc4ba60cd5944569028a_tuple, 7, const_str_plain_obj); Py_INCREF(const_str_plain_obj);
    const_tuple_str_plain_parse_str_plain_SubElement_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_parse_str_plain_SubElement_tuple, 0, const_str_plain_parse); Py_INCREF(const_str_plain_parse);
    const_str_plain_SubElement = UNSTREAM_STRING_ASCII(&constant_bin[ 3464 ], 10, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_parse_str_plain_SubElement_tuple, 1, const_str_plain_SubElement); Py_INCREF(const_str_plain_SubElement);
    const_str_plain_setStatusBar = UNSTREAM_STRING_ASCII(&constant_bin[ 21070 ], 12, 1);
    const_str_plain_basename = UNSTREAM_STRING_ASCII(&constant_bin[ 5231 ], 8, 1);
    const_str_digest_90b8f10f9305c30aebe0115117ce89fd = UNSTREAM_STRING_ASCII(&constant_bin[ 21082 ], 4, 0);
    const_str_plain_align_flags = UNSTREAM_STRING_ASCII(&constant_bin[ 21086 ], 11, 1);
    const_str_plain_bottom = UNSTREAM_STRING_ASCII(&constant_bin[ 21097 ], 6, 1);
    const_str_plain_setToolTip = UNSTREAM_STRING_ASCII(&constant_bin[ 21103 ], 10, 1);
    const_str_plain_addPage = UNSTREAM_STRING_ASCII(&constant_bin[ 21113 ], 7, 1);
    const_str_plain_custom_widget = UNSTREAM_STRING_ASCII(&constant_bin[ 21120 ], 13, 1);
    const_str_digest_78725272a22480dab3a6e00173902429 = UNSTREAM_STRING_ASCII(&constant_bin[ 21133 ], 17, 0);
    const_str_plain_setupObject = UNSTREAM_STRING_ASCII(&constant_bin[ 21150 ], 11, 1);
    const_str_plain_rowCount = UNSTREAM_STRING_ASCII(&constant_bin[ 21161 ], 8, 1);
    const_str_plain_popWidget = UNSTREAM_STRING_ASCII(&constant_bin[ 21169 ], 9, 1);
    const_str_plain_raise_ = UNSTREAM_STRING_ASCII(&constant_bin[ 21178 ], 6, 1);
    const_str_plain_status_tip = UNSTREAM_STRING_ASCII(&constant_bin[ 21184 ], 10, 1);
    const_str_plain_wprops = UNSTREAM_STRING_ASCII(&constant_bin[ 21194 ], 6, 1);
    const_str_digest_9eb71d06406e6df9ce9a7d61186f5141 = UNSTREAM_STRING_ASCII(&constant_bin[ 21200 ], 16, 0);
    const_str_plain_spacer = UNSTREAM_STRING_ASCII(&constant_bin[ 21216 ], 6, 1);
    const_str_digest_08f4331807e37aaa29acae8ee7261be4 = UNSTREAM_STRING_ASCII(&constant_bin[ 21222 ], 25, 0);
    const_str_digest_bfceee1376ebbffaee68ba1980d9c486 = UNSTREAM_STRING_ASCII(&constant_bin[ 21247 ], 107, 0);
    const_str_digest_5370431bbaf6c67536847cbb4bcef764 = UNSTREAM_STRING_ASCII(&constant_bin[ 21354 ], 41, 0);
    const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple = PyTuple_New(15);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 2, const_str_plain_w); Py_INCREF(const_str_plain_w);
    const_str_plain_props = UNSTREAM_STRING_ASCII(&constant_bin[ 21195 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 3, const_str_plain_props); Py_INCREF(const_str_plain_props);
    const_str_plain_col = UNSTREAM_STRING_ASCII(&constant_bin[ 17882 ], 3, 1);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 4, const_str_plain_col); Py_INCREF(const_str_plain_col);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 5, const_str_plain_text); Py_INCREF(const_str_plain_text);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 6, const_str_plain_status_tip); Py_INCREF(const_str_plain_status_tip);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 7, const_str_plain_tool_tip); Py_INCREF(const_str_plain_tool_tip);
    const_str_plain_whats_this = UNSTREAM_STRING_ASCII(&constant_bin[ 21395 ], 10, 1);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 8, const_str_plain_whats_this); Py_INCREF(const_str_plain_whats_this);
    const_str_plain_text_alignment = UNSTREAM_STRING_ASCII(&constant_bin[ 21405 ], 14, 1);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 9, const_str_plain_text_alignment); Py_INCREF(const_str_plain_text_alignment);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 10, const_str_plain_font); Py_INCREF(const_str_plain_font);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 11, const_str_plain_icon); Py_INCREF(const_str_plain_icon);
    const_str_plain_background = UNSTREAM_STRING_ASCII(&constant_bin[ 21419 ], 10, 1);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 12, const_str_plain_background); Py_INCREF(const_str_plain_background);
    const_str_plain_foreground = UNSTREAM_STRING_ASCII(&constant_bin[ 21429 ], 10, 1);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 13, const_str_plain_foreground); Py_INCREF(const_str_plain_foreground);
    PyTuple_SET_ITEM(const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 14, const_str_plain_item); Py_INCREF(const_str_plain_item);
    const_str_digest_304f3b222ad519647bcf566a6896f005 = UNSTREAM_STRING_ASCII(&constant_bin[ 11769 ], 2, 0);
    const_str_plain_addAction = UNSTREAM_STRING_ASCII(&constant_bin[ 3595 ], 9, 1);
    const_str_plain_dwArea = UNSTREAM_STRING_ASCII(&constant_bin[ 21439 ], 6, 1);
    const_tuple_ba4029ef5794ebf626de2d5293ee19ba_tuple = PyTuple_New(6);
    PyTuple_SET_ITEM(const_tuple_ba4029ef5794ebf626de2d5293ee19ba_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_ba4029ef5794ebf626de2d5293ee19ba_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    const_str_plain_iterator = UNSTREAM_STRING_ASCII(&constant_bin[ 20781 ], 8, 1);
    PyTuple_SET_ITEM(const_tuple_ba4029ef5794ebf626de2d5293ee19ba_tuple, 2, const_str_plain_iterator); Py_INCREF(const_str_plain_iterator);
    PyTuple_SET_ITEM(const_tuple_ba4029ef5794ebf626de2d5293ee19ba_tuple, 3, const_str_plain_include); Py_INCREF(const_str_plain_include);
    const_str_plain_loc = UNSTREAM_STRING_ASCII(&constant_bin[ 2225 ], 3, 1);
    PyTuple_SET_ITEM(const_tuple_ba4029ef5794ebf626de2d5293ee19ba_tuple, 4, const_str_plain_loc); Py_INCREF(const_str_plain_loc);
    PyTuple_SET_ITEM(const_tuple_ba4029ef5794ebf626de2d5293ee19ba_tuple, 5, const_str_plain_mname); Py_INCREF(const_str_plain_mname);
    const_tuple_str_plain_bool_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_bool_tuple, 0, const_str_plain_bool); Py_INCREF(const_str_plain_bool);
    const_str_plain_find = UNSTREAM_STRING_ASCII(&constant_bin[ 36 ], 4, 1);
    const_str_plain_extends = UNSTREAM_STRING_ASCII(&constant_bin[ 21445 ], 7, 1);
    const_tuple_str_empty_str_dot_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_empty_str_dot_tuple, 0, const_str_empty); Py_INCREF(const_str_empty);
    PyTuple_SET_ITEM(const_tuple_str_empty_str_dot_tuple, 1, const_str_dot); Py_INCREF(const_str_dot);
    const_tuple_cfbf2f9fef9a4a29dff546053cf762b5_tuple = PyTuple_New(4);
    PyTuple_SET_ITEM(const_tuple_cfbf2f9fef9a4a29dff546053cf762b5_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_cfbf2f9fef9a4a29dff546053cf762b5_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    const_str_plain_cname = UNSTREAM_STRING_ASCII(&constant_bin[ 21452 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_cfbf2f9fef9a4a29dff546053cf762b5_tuple, 2, const_str_plain_cname); Py_INCREF(const_str_plain_cname);
    const_str_plain_wname = UNSTREAM_STRING_ASCII(&constant_bin[ 21457 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_cfbf2f9fef9a4a29dff546053cf762b5_tuple, 3, const_str_plain_wname); Py_INCREF(const_str_plain_wname);
    const_str_digest_748f503b941eaf25a96f0608b1afa652 = UNSTREAM_STRING_ASCII(&constant_bin[ 21462 ], 19, 0);
    const_tuple_str_plain_Q_tuple = PyTuple_New(1);
    const_str_plain_Q = UNSTREAM_STRING_ASCII(&constant_bin[ 669 ], 1, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_Q_tuple, 0, const_str_plain_Q); Py_INCREF(const_str_plain_Q);
    const_str_plain_currentActionGroup = UNSTREAM_STRING_ASCII(&constant_bin[ 21481 ], 18, 1);
    const_str_plain_action = UNSTREAM_STRING_ASCII(&constant_bin[ 20055 ], 6, 1);
    const_str_plain_check_state = UNSTREAM_STRING_ASCII(&constant_bin[ 21499 ], 11, 1);
    const_str_digest_262a47eb39a0fa2d22b104b5c2c3b066 = UNSTREAM_STRING_ASCII(&constant_bin[ 21222 ], 21, 0);
    const_str_plain_setItemToolTip = UNSTREAM_STRING_ASCII(&constant_bin[ 21510 ], 14, 1);
    const_str_plain_createLayout = UNSTREAM_STRING_ASCII(&constant_bin[ 3626 ], 12, 1);
    const_str_plain_spacerItem = UNSTREAM_STRING_ASCII(&constant_bin[ 21524 ], 10, 1);
    const_str_plain_setter = UNSTREAM_STRING_ASCII(&constant_bin[ 21534 ], 6, 1);
    const_str_plain_nr_in_parent = UNSTREAM_STRING_ASCII(&constant_bin[ 21540 ], 12, 1);
    const_str_plain_stack = UNSTREAM_STRING_ASCII(&constant_bin[ 20504 ], 5, 1);
    const_str_plain_insertToolBarBreak = UNSTREAM_STRING_ASCII(&constant_bin[ 21552 ], 18, 1);
    const_str_digest_4c143f3e7c99b8cfb3d059979f943c26 = UNSTREAM_STRING_ASCII(&constant_bin[ 21570 ], 19, 0);
    const_str_digest_0744c8b0e87f37fc06b224185eda60ef = UNSTREAM_STRING_ASCII(&constant_bin[ 21589 ], 21, 0);
    const_tuple_str_chr_44_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_chr_44_tuple, 0, const_str_chr_44); Py_INCREF(const_str_chr_44);
    const_str_plain_name_suffixes = UNSTREAM_STRING_ASCII(&constant_bin[ 21610 ], 13, 1);
    const_str_plain_bound_signal = UNSTREAM_STRING_ASCII(&constant_bin[ 21623 ], 12, 1);
    const_str_plain_size_args = UNSTREAM_STRING_ASCII(&constant_bin[ 21635 ], 9, 1);
    const_str_plain_setForeground = UNSTREAM_STRING_ASCII(&constant_bin[ 21644 ], 13, 1);
    const_str_plain__layout_position = UNSTREAM_STRING_ASCII(&constant_bin[ 3496 ], 16, 1);
    const_tuple_str_plain_location_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_location_tuple, 0, const_str_plain_location); Py_INCREF(const_str_plain_location);
    const_str_plain_createUserInterface = UNSTREAM_STRING_ASCII(&constant_bin[ 21657 ], 19, 1);
    const_str_plain_DockWidgetArea = UNSTREAM_STRING_ASCII(&constant_bin[ 21676 ], 14, 1);
    const_str_plain_setText = UNSTREAM_STRING_ASCII(&constant_bin[ 21690 ], 7, 1);
    const_str_plain_ShowSortIndicator = UNSTREAM_STRING_ASCII(&constant_bin[ 21697 ], 17, 1);
    const_str_plain_setArray = UNSTREAM_STRING_ASCII(&constant_bin[ 21714 ], 8, 1);
    const_str_plain_ButtonGroup = UNSTREAM_STRING_ASCII(&constant_bin[ 3431 ], 11, 1);
    const_str_plain_columnCount = UNSTREAM_STRING_ASCII(&constant_bin[ 21722 ], 11, 1);
    const_str_plain_setCheckState = UNSTREAM_STRING_ASCII(&constant_bin[ 21733 ], 13, 1);
    const_str_plain_conn = UNSTREAM_STRING_ASCII(&constant_bin[ 11156 ], 4, 1);
    const_tuple_str_plain_extends_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_extends_tuple, 0, const_str_plain_extends); Py_INCREF(const_str_plain_extends);
    const_str_plain_setColumnStretch = UNSTREAM_STRING_ASCII(&constant_bin[ 21746 ], 16, 1);
    const_str_plain_setRowStretch = UNSTREAM_STRING_ASCII(&constant_bin[ 21762 ], 13, 1);
    const_str_plain_setColumnCount = UNSTREAM_STRING_ASCII(&constant_bin[ 21775 ], 14, 1);
    const_str_plain_top = UNSTREAM_STRING_ASCII(&constant_bin[ 11177 ], 3, 1);
    const_str_plain_buttonGroup = UNSTREAM_STRING_ASCII(&constant_bin[ 21789 ], 11, 1);
    const_str_plain_action_group = UNSTREAM_STRING_ASCII(&constant_bin[ 21800 ], 12, 1);
    const_str_plain_branchHandlers = UNSTREAM_STRING_ASCII(&constant_bin[ 21812 ], 14, 1);
    const_str_digest_fd85e1e33893df4fefabac55226f6627 = UNSTREAM_STRING_ASCII(&constant_bin[ 21826 ], 17, 0);
    const_str_plain_widget_class = UNSTREAM_STRING_ASCII(&constant_bin[ 21843 ], 12, 1);
    const_tuple_str_plain_self_str_plain_elem_str_plain_action_group_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_action_group_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_action_group_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_action_group_tuple, 2, const_str_plain_action_group); Py_INCREF(const_str_plain_action_group);
    const_str_digest_9217665ed117cafee377d2e94bb84921 = UNSTREAM_STRING_ASCII(&constant_bin[ 21855 ], 23, 0);
    const_str_plain_toolBarBreak = UNSTREAM_STRING_ASCII(&constant_bin[ 21878 ], 12, 1);
    const_str_plain_setWhatsThis = UNSTREAM_STRING_ASCII(&constant_bin[ 21890 ], 12, 1);
    const_tuple_f352c0ae9f0b6746072efc848800194b_tuple = PyTuple_New(6);
    PyTuple_SET_ITEM(const_tuple_f352c0ae9f0b6746072efc848800194b_tuple, 0, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    const_str_plain_row = UNSTREAM_STRING_ASCII(&constant_bin[ 12038 ], 3, 1);
    PyTuple_SET_ITEM(const_tuple_f352c0ae9f0b6746072efc848800194b_tuple, 1, const_str_plain_row); Py_INCREF(const_str_plain_row);
    const_str_plain_column = UNSTREAM_STRING_ASCII(&constant_bin[ 21722 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_f352c0ae9f0b6746072efc848800194b_tuple, 2, const_str_plain_column); Py_INCREF(const_str_plain_column);
    PyTuple_SET_ITEM(const_tuple_f352c0ae9f0b6746072efc848800194b_tuple, 3, const_str_plain_alignment); Py_INCREF(const_str_plain_alignment);
    const_str_plain_rowspan = UNSTREAM_STRING_ASCII(&constant_bin[ 21902 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_f352c0ae9f0b6746072efc848800194b_tuple, 4, const_str_plain_rowspan); Py_INCREF(const_str_plain_rowspan);
    const_str_plain_colspan = UNSTREAM_STRING_ASCII(&constant_bin[ 21909 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_f352c0ae9f0b6746072efc848800194b_tuple, 5, const_str_plain_colspan); Py_INCREF(const_str_plain_colspan);
    const_str_digest_716fa675c51a4763e154b34613be1a48 = UNSTREAM_STRING_ASCII(&constant_bin[ 21916 ], 17, 0);
    const_str_plain_buttonGroups = UNSTREAM_STRING_ASCII(&constant_bin[ 21933 ], 12, 1);
    const_tuple_8f69df6790447d68e0e3d1443283a4fd_tuple = PyTuple_New(7);
    PyTuple_SET_ITEM(const_tuple_8f69df6790447d68e0e3d1443283a4fd_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_8f69df6790447d68e0e3d1443283a4fd_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_8f69df6790447d68e0e3d1443283a4fd_tuple, 2, const_str_plain_name); Py_INCREF(const_str_plain_name);
    PyTuple_SET_ITEM(const_tuple_8f69df6790447d68e0e3d1443283a4fd_tuple, 3, const_str_plain_setter); Py_INCREF(const_str_plain_setter);
    const_str_plain_array = UNSTREAM_STRING_ASCII(&constant_bin[ 21945 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_8f69df6790447d68e0e3d1443283a4fd_tuple, 4, const_str_plain_array); Py_INCREF(const_str_plain_array);
    PyTuple_SET_ITEM(const_tuple_8f69df6790447d68e0e3d1443283a4fd_tuple, 5, const_str_plain_idx); Py_INCREF(const_str_plain_idx);
    PyTuple_SET_ITEM(const_tuple_8f69df6790447d68e0e3d1443283a4fd_tuple, 6, const_str_plain_value); Py_INCREF(const_str_plain_value);
    const_str_plain_setCascadingSectionResizes = UNSTREAM_STRING_ASCII(&constant_bin[ 21950 ], 26, 1);
    const_int_neg_4 = PyLong_FromLong(-4l);
    const_slice_none_int_neg_4_none = PySlice_New(Py_None, const_int_neg_4, Py_None);
    const_str_plain_setVisible = UNSTREAM_STRING_ASCII(&constant_bin[ 21976 ], 10, 1);
    const_tuple_str_plain_signal_tuple = PyTuple_New(1);
    const_str_plain_signal = UNSTREAM_STRING_ASCII(&constant_bin[ 10674 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_signal_tuple, 0, const_str_plain_signal); Py_INCREF(const_str_plain_signal);
    const_str_plain_DefaultSectionSize = UNSTREAM_STRING_ASCII(&constant_bin[ 21986 ], 18, 1);
    const_str_plain_action_obj = UNSTREAM_STRING_ASCII(&constant_bin[ 22004 ], 10, 1);
    const_tuple_str_plain_self_str_plain_elem_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    const_str_plain_toolBarArea = UNSTREAM_STRING_ASCII(&constant_bin[ 22014 ], 11, 1);
    const_str_plain_any_i18n = UNSTREAM_STRING_ASCII(&constant_bin[ 21925 ], 8, 1);
    const_str_chr_40 = UNSTREAM_STRING_ASCII(&constant_bin[ 4348 ], 1, 0);
    const_str_plain_setRowMinimumHeight = UNSTREAM_STRING_ASCII(&constant_bin[ 22025 ], 19, 1);
    const_str_plain_column_counter = UNSTREAM_STRING_ASCII(&constant_bin[ 22044 ], 14, 1);
    const_tuple_4d5ee9d521aa05b1afef1840a57b3195_tuple = PyTuple_New(4);
    PyTuple_SET_ITEM(const_tuple_4d5ee9d521aa05b1afef1840a57b3195_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_4d5ee9d521aa05b1afef1840a57b3195_tuple, 1, const_str_plain_widget); Py_INCREF(const_str_plain_widget);
    const_str_plain_action_name = UNSTREAM_STRING_ASCII(&constant_bin[ 22058 ], 11, 1);
    PyTuple_SET_ITEM(const_tuple_4d5ee9d521aa05b1afef1840a57b3195_tuple, 2, const_str_plain_action_name); Py_INCREF(const_str_plain_action_name);
    PyTuple_SET_ITEM(const_tuple_4d5ee9d521aa05b1afef1840a57b3195_tuple, 3, const_str_plain_action_obj); Py_INCREF(const_str_plain_action_obj);
    const_str_plain_setStatusTip = UNSTREAM_STRING_ASCII(&constant_bin[ 22069 ], 12, 1);
    const_str_plain_setLayout = UNSTREAM_STRING_ASCII(&constant_bin[ 22081 ], 9, 1);
    const_str_plain_push = UNSTREAM_STRING_ASCII(&constant_bin[ 22090 ], 4, 1);
    const_str_plain_signal_args = UNSTREAM_STRING_ASCII(&constant_bin[ 22094 ], 11, 1);
    const_str_chr_47 = UNSTREAM_STRING_ASCII(&constant_bin[ 18047 ], 1, 0);
    const_str_digest_4bfe12afbfc91eb5d662408182ab89f0 = UNSTREAM_STRING_ASCII(&constant_bin[ 22105 ], 77, 0);
    const_str_plain_setMinimumSectionSize = UNSTREAM_STRING_ASCII(&constant_bin[ 22182 ], 21, 1);
    const_str_plain_setBackground = UNSTREAM_STRING_ASCII(&constant_bin[ 22203 ], 13, 1);
    const_str_plain_zorder = UNSTREAM_STRING_ASCII(&constant_bin[ 22216 ], 6, 1);
    const_str_plain_left = UNSTREAM_STRING_ASCII(&constant_bin[ 22222 ], 4, 1);
    const_str_plain_addDockWidget = UNSTREAM_STRING_ASCII(&constant_bin[ 22226 ], 13, 1);
    const_str_plain_name2object = UNSTREAM_STRING_ASCII(&constant_bin[ 22239 ], 11, 1);
    const_str_plain_setTabOrder = UNSTREAM_STRING_ASCII(&constant_bin[ 22250 ], 11, 1);
    const_str_plain_buttongroups = UNSTREAM_STRING_ASCII(&constant_bin[ 22261 ], 12, 1);
    const_tuple_str_plain_alignment_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_alignment_tuple, 0, const_str_plain_alignment); Py_INCREF(const_str_plain_alignment);
    const_str_plain_sorting_enabled = UNSTREAM_STRING_ASCII(&constant_bin[ 22273 ], 15, 1);
    const_str_plain_createSpacer = UNSTREAM_STRING_ASCII(&constant_bin[ 3660 ], 12, 1);
    const_str_digest_9ec655c186ef3cb2461e08a7bff9a8dc = UNSTREAM_STRING_ASCII(&constant_bin[ 22288 ], 16, 0);
    const_str_plain_version = UNSTREAM_STRING_ASCII(&constant_bin[ 22304 ], 7, 1);
    const_str_digest_8453bcf550b723650709ee663bd6e4d6 = UNSTREAM_STRING_ASCII(&constant_bin[ 22311 ], 26, 0);
    const_str_plain_layoutdefault = UNSTREAM_STRING_ASCII(&constant_bin[ 22337 ], 13, 1);
    const_dict_d7b7cb1704cf1609d1297de4bce6075f = _PyDict_NewPresized( 1 );
    PyDict_SetItem(const_dict_d7b7cb1704cf1609d1297de4bce6075f, const_str_plain_name, const_str_plain_pyuicMargins);
    assert(PyDict_Size(const_dict_d7b7cb1704cf1609d1297de4bce6075f) == 1);
    const_str_plain_setTabToolTip = UNSTREAM_STRING_ASCII(&constant_bin[ 22350 ], 13, 1);
    const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple = PyTuple_New(16);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 2, const_str_plain_margin); Py_INCREF(const_str_plain_margin);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 3, const_str_plain_left); Py_INCREF(const_str_plain_left);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 4, const_str_plain_top); Py_INCREF(const_str_plain_top);
    const_str_plain_right = UNSTREAM_STRING_ASCII(&constant_bin[ 22363 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 5, const_str_plain_right); Py_INCREF(const_str_plain_right);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 6, const_str_plain_bottom); Py_INCREF(const_str_plain_bottom);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 7, const_str_plain_cme); Py_INCREF(const_str_plain_cme);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 8, const_str_plain_spacing); Py_INCREF(const_str_plain_spacing);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 9, const_str_plain_horiz); Py_INCREF(const_str_plain_horiz);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 10, const_str_plain_vert); Py_INCREF(const_str_plain_vert);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 11, const_str_plain_classname); Py_INCREF(const_str_plain_classname);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 12, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 13, const_str_plain_layout); Py_INCREF(const_str_plain_layout);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 14, const_str_plain_top_layout); Py_INCREF(const_str_plain_top_layout);
    PyTuple_SET_ITEM(const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 15, const_str_plain_lp); Py_INCREF(const_str_plain_lp);
    const_str_digest_cb6fa27e118f1c8e5a09ad2d9734c341 = UNSTREAM_STRING_ASCII(&constant_bin[ 22368 ], 19, 0);
    const_tuple_str_plain_version_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_version_tuple, 0, const_str_plain_version); Py_INCREF(const_str_plain_version);
    const_str_digest_338b00a8bfb328deb8eeff6c34f47234 = UNSTREAM_STRING_ASCII(&constant_bin[ 22387 ], 52, 0);
    const_str_plain_setBuddies = UNSTREAM_STRING_ASCII(&constant_bin[ 22377 ], 10, 1);
    const_tuple_str_plain_slot_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_slot_tuple, 0, const_str_plain_slot); Py_INCREF(const_str_plain_slot);
    const_str_plain_tabstops = UNSTREAM_STRING_ASCII(&constant_bin[ 22439 ], 8, 1);
    const_str_plain_uniqueName = UNSTREAM_STRING_ASCII(&constant_bin[ 20213 ], 10, 1);
    const_str_digest_d2fbcd2f684bdeb7c036ce7f430e21b6 = UNSTREAM_STRING_ASCII(&constant_bin[ 22447 ], 21, 0);
    const_str_digest_2981af78011f3ca0a7325bdc08940505 = UNSTREAM_STRING_ASCII(&constant_bin[ 22468 ], 27, 0);
    const_tuple_str_plain_spacerItem_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_spacerItem_tuple, 0, const_str_plain_spacerItem); Py_INCREF(const_str_plain_spacerItem);
    const_tuple_str_plain_header_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_header_tuple, 0, const_str_plain_header); Py_INCREF(const_str_plain_header);
    const_str_digest_b912f583a917a493abbf8d46781f9053 = UNSTREAM_STRING_ASCII(&constant_bin[ 22495 ], 21, 0);
    const_tuple_str_plain_column_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_column_tuple, 0, const_str_plain_column); Py_INCREF(const_str_plain_column);
    const_str_plain_columnminimumwidth = UNSTREAM_STRING_ASCII(&constant_bin[ 22516 ], 18, 1);
    const_str_plain_c_prop = UNSTREAM_STRING_ASCII(&constant_bin[ 22534 ], 6, 1);
    const_tuple_0a15021ef3f570acf96e4125349210bb_tuple = PyTuple_New(5);
    PyTuple_SET_ITEM(const_tuple_0a15021ef3f570acf96e4125349210bb_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_0a15021ef3f570acf96e4125349210bb_tuple, 1, const_str_plain_widget); Py_INCREF(const_str_plain_widget);
    PyTuple_SET_ITEM(const_tuple_0a15021ef3f570acf96e4125349210bb_tuple, 2, const_str_plain_layout); Py_INCREF(const_str_plain_layout);
    PyTuple_SET_ITEM(const_tuple_0a15021ef3f570acf96e4125349210bb_tuple, 3, const_str_plain_setter); Py_INCREF(const_str_plain_setter);
    PyTuple_SET_ITEM(const_tuple_0a15021ef3f570acf96e4125349210bb_tuple, 4, const_str_plain_args); Py_INCREF(const_str_plain_args);
    const_str_digest_a8a6bd741afb87886de41d69dd3c4f2d = UNSTREAM_STRING_ASCII(&constant_bin[ 22540 ], 59, 0);
    const_str_plain_bg_i18n = UNSTREAM_STRING_ASCII(&constant_bin[ 22599 ], 7, 1);
    const_str_digest_c48babcf9874284b2ebed30b54116256 = UNSTREAM_STRING_ASCII(&constant_bin[ 22606 ], 22, 0);
    const_tuple_0f99ef9bbf8af9390421ffc4af44e38a_tuple = PyTuple_New(5);
    PyTuple_SET_ITEM(const_tuple_0f99ef9bbf8af9390421ffc4af44e38a_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_0f99ef9bbf8af9390421ffc4af44e38a_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    const_str_plain_lastwidget = UNSTREAM_STRING_ASCII(&constant_bin[ 22628 ], 10, 1);
    PyTuple_SET_ITEM(const_tuple_0f99ef9bbf8af9390421ffc4af44e38a_tuple, 2, const_str_plain_lastwidget); Py_INCREF(const_str_plain_lastwidget);
    const_str_plain_widget_elem = UNSTREAM_STRING_ASCII(&constant_bin[ 22638 ], 11, 1);
    PyTuple_SET_ITEM(const_tuple_0f99ef9bbf8af9390421ffc4af44e38a_tuple, 3, const_str_plain_widget_elem); Py_INCREF(const_str_plain_widget_elem);
    PyTuple_SET_ITEM(const_tuple_0f99ef9bbf8af9390421ffc4af44e38a_tuple, 4, const_str_plain_widget); Py_INCREF(const_str_plain_widget);
    const_str_plain_setObjectName = UNSTREAM_STRING_ASCII(&constant_bin[ 22649 ], 13, 1);
    const_tuple_str_plain_row_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_row_tuple, 0, const_str_plain_row); Py_INCREF(const_str_plain_row);
    const_str_digest_242c3b8eab8a7b896128bb7d41e496e9 = UNSTREAM_STRING_ASCII(&constant_bin[ 22662 ], 16, 0);
    const_str_plain_peek = UNSTREAM_STRING_ASCII(&constant_bin[ 21212 ], 4, 1);
    const_tuple_str_digest_2598b7d5190e4e17266e5229aa9e007c_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_2598b7d5190e4e17266e5229aa9e007c_tuple, 0, const_str_digest_2598b7d5190e4e17266e5229aa9e007c); Py_INCREF(const_str_digest_2598b7d5190e4e17266e5229aa9e007c);
    const_str_plain_label = UNSTREAM_STRING_ASCII(&constant_bin[ 22678 ], 5, 1);
    const_str_plain_readDefaults = UNSTREAM_STRING_ASCII(&constant_bin[ 22683 ], 12, 1);
    const_tuple_573875de7099457af4fa28766608094f_tuple = PyTuple_New(16);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 2, const_str_plain_widget_class); Py_INCREF(const_str_plain_widget_class);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 3, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 4, const_str_plain_widget); Py_INCREF(const_str_plain_widget);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 5, const_str_plain_bg_i18n); Py_INCREF(const_str_plain_bg_i18n);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 6, const_str_plain_bg_name); Py_INCREF(const_str_plain_bg_name);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 7, const_str_plain_bg); Py_INCREF(const_str_plain_bg);
    const_str_plain_lay = UNSTREAM_STRING_ASCII(&constant_bin[ 190 ], 3, 1);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 8, const_str_plain_lay); Py_INCREF(const_str_plain_lay);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 9, const_str_plain_lp); Py_INCREF(const_str_plain_lp);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 10, const_str_plain_topwidget); Py_INCREF(const_str_plain_topwidget);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 11, const_str_plain_icon); Py_INCREF(const_str_plain_icon);
    const_str_plain_tooltip = UNSTREAM_STRING_ASCII(&constant_bin[ 22695 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 12, const_str_plain_tooltip); Py_INCREF(const_str_plain_tooltip);
    const_str_plain_tbArea = UNSTREAM_STRING_ASCII(&constant_bin[ 22702 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 13, const_str_plain_tbArea); Py_INCREF(const_str_plain_tbArea);
    const_str_plain_tbBreak = UNSTREAM_STRING_ASCII(&constant_bin[ 22708 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 14, const_str_plain_tbBreak); Py_INCREF(const_str_plain_tbBreak);
    PyTuple_SET_ITEM(const_tuple_573875de7099457af4fa28766608094f_tuple, 15, const_str_plain_dwArea); Py_INCREF(const_str_plain_dwArea);
    const_str_plain_align = UNSTREAM_STRING_ASCII(&constant_bin[ 3299 ], 5, 1);
    const_str_plain_height = UNSTREAM_STRING_ASCII(&constant_bin[ 22715 ], 6, 1);
    const_str_plain_toolTip = UNSTREAM_STRING_ASCII(&constant_bin[ 22721 ], 7, 1);
    const_str_digest_45b12fe1ec97ee0dba8b2e57e629b25d = UNSTREAM_STRING_ASCII(&constant_bin[ 22728 ], 18, 0);
    const_tuple_07bae01c431d143432661f50ae3017e8_tuple = PyTuple_New(5);
    PyTuple_SET_ITEM(const_tuple_07bae01c431d143432661f50ae3017e8_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_07bae01c431d143432661f50ae3017e8_tuple, 1, const_str_plain_qtcore_module); Py_INCREF(const_str_plain_qtcore_module);
    PyTuple_SET_ITEM(const_tuple_07bae01c431d143432661f50ae3017e8_tuple, 2, const_str_plain_qtgui_module); Py_INCREF(const_str_plain_qtgui_module);
    PyTuple_SET_ITEM(const_tuple_07bae01c431d143432661f50ae3017e8_tuple, 3, const_str_plain_qtwidgets_module); Py_INCREF(const_str_plain_qtwidgets_module);
    PyTuple_SET_ITEM(const_tuple_07bae01c431d143432661f50ae3017e8_tuple, 4, const_str_plain_creatorPolicy); Py_INCREF(const_str_plain_creatorPolicy);
    const_str_plain_actor = UNSTREAM_STRING_ASCII(&constant_bin[ 15985 ], 5, 1);
    const_str_digest_572e435e50adc23dbb2f3687384284ab = UNSTREAM_STRING_ASCII(&constant_bin[ 22746 ], 40, 0);
    const_str_plain_setHighlightSections = UNSTREAM_STRING_ASCII(&constant_bin[ 22786 ], 20, 1);
    const_str_plain_setExclusive = UNSTREAM_STRING_ASCII(&constant_bin[ 22806 ], 12, 1);
    const_str_plain_rowminimumheight = UNSTREAM_STRING_ASCII(&constant_bin[ 22818 ], 16, 1);
    const_str_digest_d535eaef61094327aa1026ba7b302dc3 = UNSTREAM_STRING_ASCII(&constant_bin[ 22834 ], 17, 0);
    const_str_plain_addHeader = UNSTREAM_STRING_ASCII(&constant_bin[ 3799 ], 9, 1);
    const_str_plain_createAction = UNSTREAM_STRING_ASCII(&constant_bin[ 3726 ], 12, 1);
    const_str_plain_addToolBar = UNSTREAM_STRING_ASCII(&constant_bin[ 22851 ], 10, 1);
    const_str_plain_receiver = UNSTREAM_STRING_ASCII(&constant_bin[ 22861 ], 8, 1);
    const_str_plain_traverseWidgetTree = UNSTREAM_STRING_ASCII(&constant_bin[ 22869 ], 18, 1);
    const_str_plain_buttongroup = UNSTREAM_STRING_ASCII(&constant_bin[ 22261 ], 11, 1);
    const_tuple_type_list_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_type_list_tuple, 0, (PyObject *)&PyList_Type); Py_INCREF((PyObject *)&PyList_Type);
    const_str_plain_list = UNSTREAM_STRING_ASCII(&constant_bin[ 2864 ], 4, 1);
    const_str_digest_fcf3816197585187164b4224546fc9de = UNSTREAM_STRING_ASCII(&constant_bin[ 22887 ], 30, 0);
    const_tuple_str_space_str_empty_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_space_str_empty_tuple, 0, const_str_space); Py_INCREF(const_str_space);
    PyTuple_SET_ITEM(const_tuple_str_space_str_empty_tuple, 1, const_str_empty); Py_INCREF(const_str_empty);
    const_str_digest_f22bebc168b7d8ed6b55ed0d053513e0 = UNSTREAM_STRING_ASCII(&constant_bin[ 22917 ], 25, 0);
    const_str_digest_a9757f1823576260a744f1c5953e3c4d = UNSTREAM_STRING_ASCII(&constant_bin[ 22942 ], 20, 0);
    const_str_plain___sortingEnabled = UNSTREAM_STRING_ASCII(&constant_bin[ 22962 ], 16, 1);
    const_tuple_str_plain_self_str_plain_elem_str_plain_name_str_plain_prop_tuple = PyTuple_New(4);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_name_str_plain_prop_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_name_str_plain_prop_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_name_str_plain_prop_tuple, 2, const_str_plain_name); Py_INCREF(const_str_plain_name);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_name_str_plain_prop_tuple, 3, const_str_plain_prop); Py_INCREF(const_str_plain_prop);
    const_str_plain_LabelRole = UNSTREAM_STRING_ASCII(&constant_bin[ 22978 ], 9, 1);
    const_str_digest_1a65ba3212f08d41c1e778325d5d05ca = UNSTREAM_STRING_ASCII(&constant_bin[ 22987 ], 19, 0);
    const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple = PyTuple_New(10);
    PyTuple_SET_ITEM(const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple, 2, const_str_plain_name2object); Py_INCREF(const_str_plain_name2object);
    PyTuple_SET_ITEM(const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple, 3, const_str_plain_conn); Py_INCREF(const_str_plain_conn);
    PyTuple_SET_ITEM(const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple, 4, const_str_plain_signal); Py_INCREF(const_str_plain_signal);
    PyTuple_SET_ITEM(const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple, 5, const_str_plain_signal_name); Py_INCREF(const_str_plain_signal_name);
    PyTuple_SET_ITEM(const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple, 6, const_str_plain_signal_args); Py_INCREF(const_str_plain_signal_args);
    PyTuple_SET_ITEM(const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple, 7, const_str_plain_sender); Py_INCREF(const_str_plain_sender);
    PyTuple_SET_ITEM(const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple, 8, const_str_plain_bound_signal); Py_INCREF(const_str_plain_bound_signal);
    PyTuple_SET_ITEM(const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple, 9, const_str_plain_slot); Py_INCREF(const_str_plain_slot);
    const_str_digest_ca295fcc08de80c67d850ba455907a8b = UNSTREAM_STRING_ASCII(&constant_bin[ 23006 ], 26, 0);
    const_dict_e993c1f0ede312f17d11add870c0ef8c = _PyDict_NewPresized( 1 );
    PyDict_SetItem(const_dict_e993c1f0ede312f17d11add870c0ef8c, const_str_plain_name, const_str_plain_pyuicSpacing);
    assert(PyDict_Size(const_dict_e993c1f0ede312f17d11add870c0ef8c) == 1);
    const_str_digest_f61bca08bfc72a176162ab1bf09cdb19 = UNSTREAM_STRING_ASCII(&constant_bin[ 23032 ], 18, 0);
    const_str_digest_7e7a747a621069ae73d59f0e9254b5db = UNSTREAM_STRING_ASCII(&constant_bin[ 23050 ], 22, 0);
    const_str_plain_nr_in_root = UNSTREAM_STRING_ASCII(&constant_bin[ 23072 ], 10, 1);
    const_str_digest_6ac68c5ef1bab74796286d26f9e887d5 = UNSTREAM_STRING_ASCII(&constant_bin[ 23082 ], 16, 0);
    const_str_digest_3cdde86d7672d3e5eccfb1a4e9488768 = UNSTREAM_STRING_ASCII(&constant_bin[ 20204 ], 19, 0);
    const_str_digest_7b85d249a0a0a4cdf516a65c693960d6 = UNSTREAM_STRING_ASCII(&constant_bin[ 23098 ], 10, 0);
    const_str_digest_bba21dfbbd60e63084b6d163cd34049c = UNSTREAM_STRING_ASCII(&constant_bin[ 23108 ], 45, 0);
    const_str_plain_setItem = UNSTREAM_STRING_ASCII(&constant_bin[ 12258 ], 7, 1);
    const_str_digest_04d67503345d6d64752f0c9fc2a764c3 = UNSTREAM_STRING_ASCII(&constant_bin[ 23153 ], 21, 0);
    const_tuple_str_digest_10ebdb17bdc88158bceb0eeee092f4a7_tuple = PyTuple_New(1);
    const_str_digest_10ebdb17bdc88158bceb0eeee092f4a7 = UNSTREAM_STRING_ASCII(&constant_bin[ 23174 ], 20, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_10ebdb17bdc88158bceb0eeee092f4a7_tuple, 0, const_str_digest_10ebdb17bdc88158bceb0eeee092f4a7); Py_INCREF(const_str_digest_10ebdb17bdc88158bceb0eeee092f4a7);
    const_str_digest_8d04cde8e249f5ecc6a6436471207d1f = UNSTREAM_STRING_ASCII(&constant_bin[ 23194 ], 21, 0);
    const_str_digest_bc1f6041ef8bbbd1432e73c0d64228be = UNSTREAM_STRING_ASCII(&constant_bin[ 23215 ], 47, 0);
    const_str_plain_actiongroup = UNSTREAM_STRING_ASCII(&constant_bin[ 23262 ], 11, 1);
    const_str_digest_9270090f135b77d267e2b4cc9ded6732 = UNSTREAM_STRING_ASCII(&constant_bin[ 23273 ], 20, 0);
    const_tuple_str_digest_ca913d6a9f68c5308f38cd021160f12c_tuple = PyTuple_New(1);
    const_str_digest_ca913d6a9f68c5308f38cd021160f12c = UNSTREAM_STRING_ASCII(&constant_bin[ 5463 ], 4, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_ca913d6a9f68c5308f38cd021160f12c_tuple, 0, const_str_digest_ca913d6a9f68c5308f38cd021160f12c); Py_INCREF(const_str_digest_ca913d6a9f68c5308f38cd021160f12c);
    const_tuple_str_chr_47_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_chr_47_tuple, 0, const_str_chr_47); Py_INCREF(const_str_chr_47);
    const_str_plain_titm = UNSTREAM_STRING_ASCII(&constant_bin[ 23293 ], 4, 1);
    const_str_digest_84fe8cce8ed440a80406c6f7fbb31b98 = UNSTREAM_STRING_ASCII(&constant_bin[ 23297 ], 7, 0);
    const_str_digest_a9160ed77ff1cfbfc34edf97a5d225d2 = UNSTREAM_STRING_ASCII(&constant_bin[ 23304 ], 14, 0);
    const_str_plain_Expanding = UNSTREAM_STRING_ASCII(&constant_bin[ 23318 ], 9, 1);
    const_str_digest_460add3f2fc1bfb3ad294aea7c05117c = UNSTREAM_STRING_ASCII(&constant_bin[ 23327 ], 248, 0);
    const_str_plain_handleItem = UNSTREAM_STRING_ASCII(&constant_bin[ 3694 ], 10, 1);
    const_str_digest_030fb6874dacc73e7238010567f6f810 = UNSTREAM_STRING_ASCII(&constant_bin[ 23575 ], 18, 0);
    const_str_plain_addaction = UNSTREAM_STRING_ASCII(&constant_bin[ 23593 ], 9, 1);
    const_str_plain_tagname = UNSTREAM_STRING_ASCII(&constant_bin[ 23602 ], 7, 1);
    const_tuple_str_plain_self_str_plain_elem_str_plain_name_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_name_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_name_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_name_tuple, 2, const_str_plain_name); Py_INCREF(const_str_plain_name);
    const_str_plain_createWidgetItem = UNSTREAM_STRING_ASCII(&constant_bin[ 21231 ], 16, 1);
    const_str_digest_49057ba07775359ea68b084a8a6d4cb3 = UNSTREAM_STRING_ASCII(&constant_bin[ 20452 ], 23, 0);
    const_tuple_str_plain_obj_str_plain_self_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_obj_str_plain_self_tuple, 0, const_str_plain_obj); Py_INCREF(const_str_plain_obj);
    PyTuple_SET_ITEM(const_tuple_str_plain_obj_str_plain_self_tuple, 1, const_str_plain_self); Py_INCREF(const_str_plain_self);
    const_str_plain_number = UNSTREAM_STRING_ASCII(&constant_bin[ 3002 ], 6, 1);
    const_tuple_str_plain_rowspan_int_pos_1_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_rowspan_int_pos_1_tuple, 0, const_str_plain_rowspan); Py_INCREF(const_str_plain_rowspan);
    PyTuple_SET_ITEM(const_tuple_str_plain_rowspan_int_pos_1_tuple, 1, const_int_pos_1); Py_INCREF(const_int_pos_1);
    const_tuple_a338667ecb10e025b2485ec6f4dd612c_tuple = PyTuple_New(5);
    PyTuple_SET_ITEM(const_tuple_a338667ecb10e025b2485ec6f4dd612c_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_a338667ecb10e025b2485ec6f4dd612c_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_a338667ecb10e025b2485ec6f4dd612c_tuple, 2, const_str_plain_header2module); Py_INCREF(const_str_plain_header2module);
    PyTuple_SET_ITEM(const_tuple_a338667ecb10e025b2485ec6f4dd612c_tuple, 3, const_str_plain_custom_widget); Py_INCREF(const_str_plain_custom_widget);
    PyTuple_SET_ITEM(const_tuple_a338667ecb10e025b2485ec6f4dd612c_tuple, 4, const_str_plain_classname); Py_INCREF(const_str_plain_classname);
    const_tuple_str_plain_colspan_int_pos_1_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_colspan_int_pos_1_tuple, 0, const_str_plain_colspan); Py_INCREF(const_str_plain_colspan);
    PyTuple_SET_ITEM(const_tuple_str_plain_colspan_int_pos_1_tuple, 1, const_int_pos_1); Py_INCREF(const_int_pos_1);
    const_tuple_str_digest_2f355444d3ad388bf7643fe371ee6112_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_2f355444d3ad388bf7643fe371ee6112_tuple, 0, const_str_digest_2f355444d3ad388bf7643fe371ee6112); Py_INCREF(const_str_digest_2f355444d3ad388bf7643fe371ee6112);
    const_str_plain_whatsThis = UNSTREAM_STRING_ASCII(&constant_bin[ 23609 ], 9, 1);
    const_tuple_false_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_false_tuple, 0, Py_False); Py_INCREF(Py_False);
    const_str_plain_SpanningRole = UNSTREAM_STRING_ASCII(&constant_bin[ 23618 ], 12, 1);
    const_tuple_str_digest_ebebb18731664a12452b2ba6915b22ed_str_dot_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_digest_ebebb18731664a12452b2ba6915b22ed_str_dot_tuple, 0, const_str_digest_ebebb18731664a12452b2ba6915b22ed); Py_INCREF(const_str_digest_ebebb18731664a12452b2ba6915b22ed);
    PyTuple_SET_ITEM(const_tuple_str_digest_ebebb18731664a12452b2ba6915b22ed_str_dot_tuple, 1, const_str_dot); Py_INCREF(const_str_dot);
    const_str_digest_388c13b496d9f0d445c57c79d06ec868 = UNSTREAM_STRING_ASCII(&constant_bin[ 23630 ], 21, 0);
    const_tuple_f1c3a060d57425ca05d562927681f67b_tuple = PyTuple_New(12);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 1, const_str_plain_filename); Py_INCREF(const_str_plain_filename);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 2, const_str_plain_resource_suffix); Py_INCREF(const_str_plain_resource_suffix);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 3, const_str_plain_base_dir); Py_INCREF(const_str_plain_base_dir);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 4, const_str_plain_branchHandlers); Py_INCREF(const_str_plain_branchHandlers);
    const_str_plain_document = UNSTREAM_STRING_ASCII(&constant_bin[ 23651 ], 8, 1);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 5, const_str_plain_document); Py_INCREF(const_str_plain_document);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 6, const_str_plain_root); Py_INCREF(const_str_plain_root);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 7, const_str_plain_version); Py_INCREF(const_str_plain_version);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 8, const_str_plain_tagname); Py_INCREF(const_str_plain_tagname);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 9, const_str_plain_actor); Py_INCREF(const_str_plain_actor);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 10, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 11, const_str_plain_w); Py_INCREF(const_str_plain_w);
    const_str_plain_button_groups = UNSTREAM_STRING_ASCII(&constant_bin[ 23659 ], 13, 1);
    const_str_digest_a237f7620def8531919f60154ef3b11a = UNSTREAM_STRING_ASCII(&constant_bin[ 23672 ], 21, 0);
    const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple = PyTuple_New(10);
    PyTuple_SET_ITEM(const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    const_str_plain_width = UNSTREAM_STRING_ASCII(&constant_bin[ 435 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple, 2, const_str_plain_width); Py_INCREF(const_str_plain_width);
    PyTuple_SET_ITEM(const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple, 3, const_str_plain_height); Py_INCREF(const_str_plain_height);
    PyTuple_SET_ITEM(const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple, 4, const_str_plain_size_args); Py_INCREF(const_str_plain_size_args);
    PyTuple_SET_ITEM(const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple, 5, const_str_plain_sizeType); Py_INCREF(const_str_plain_sizeType);
    const_str_plain_policy = UNSTREAM_STRING_ASCII(&constant_bin[ 3097 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple, 6, const_str_plain_policy); Py_INCREF(const_str_plain_policy);
    PyTuple_SET_ITEM(const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple, 7, const_str_plain_spacer); Py_INCREF(const_str_plain_spacer);
    PyTuple_SET_ITEM(const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple, 8, const_str_plain_lay); Py_INCREF(const_str_plain_lay);
    PyTuple_SET_ITEM(const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple, 9, const_str_plain_lp); Py_INCREF(const_str_plain_lp);
    const_tuple_str_plain_QObjectCreator_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_QObjectCreator_tuple, 0, const_str_plain_QObjectCreator); Py_INCREF(const_str_plain_QObjectCreator);
    const_str_plain_topIsLayout = UNSTREAM_STRING_ASCII(&constant_bin[ 20464 ], 11, 1);
    const_str_plain_Horizontal = UNSTREAM_STRING_ASCII(&constant_bin[ 17860 ], 10, 1);
    const_str_plain_getroot = UNSTREAM_STRING_ASCII(&constant_bin[ 23693 ], 7, 1);
    const_str_plain_setVerticalHeaderItem = UNSTREAM_STRING_ASCII(&constant_bin[ 23700 ], 21, 1);
    const_str_plain_addWidget = UNSTREAM_STRING_ASCII(&constant_bin[ 23721 ], 9, 1);
    const_str_plain_Minimum = UNSTREAM_STRING_ASCII(&constant_bin[ 20113 ], 7, 1);
    const_str_plain_setColumnMinimumWidth = UNSTREAM_STRING_ASCII(&constant_bin[ 23730 ], 21, 1);
    const_str_plain_popLayout = UNSTREAM_STRING_ASCII(&constant_bin[ 23751 ], 9, 1);
    const_str_plain_createActionGroup = UNSTREAM_STRING_ASCII(&constant_bin[ 3760 ], 17, 1);
    const_str_plain_columnstretch = UNSTREAM_STRING_ASCII(&constant_bin[ 23760 ], 13, 1);
    const_str_plain_addActions = UNSTREAM_STRING_ASCII(&constant_bin[ 23773 ], 10, 1);
    const_str_plain_setItemText = UNSTREAM_STRING_ASCII(&constant_bin[ 12258 ], 11, 1);
    const_tuple_fab1a18f66095cbfe499fd5876f41844_tuple = PyTuple_New(5);
    PyTuple_SET_ITEM(const_tuple_fab1a18f66095cbfe499fd5876f41844_tuple, 0, const_str_plain_alignment); Py_INCREF(const_str_plain_alignment);
    PyTuple_SET_ITEM(const_tuple_fab1a18f66095cbfe499fd5876f41844_tuple, 1, const_str_plain_align_flags); Py_INCREF(const_str_plain_align_flags);
    PyTuple_SET_ITEM(const_tuple_fab1a18f66095cbfe499fd5876f41844_tuple, 2, const_str_plain_qt_align); Py_INCREF(const_str_plain_qt_align);
    PyTuple_SET_ITEM(const_tuple_fab1a18f66095cbfe499fd5876f41844_tuple, 3, const_str_plain__); Py_INCREF(const_str_plain__);
    PyTuple_SET_ITEM(const_tuple_fab1a18f66095cbfe499fd5876f41844_tuple, 4, const_str_plain_align); Py_INCREF(const_str_plain_align);
    const_str_digest_9a41cae06c3fe424bbe50b44c89cd454 = UNSTREAM_STRING_ASCII(&constant_bin[ 23783 ], 19, 0);
    const_str_digest_a982dd7c9405803357897e1de910033e = UNSTREAM_STRING_ASCII(&constant_bin[ 23802 ], 21, 0);
    const_str_plain_c_prop_name = UNSTREAM_STRING_ASCII(&constant_bin[ 23823 ], 11, 1);
    const_str_plain_setFont = UNSTREAM_STRING_ASCII(&constant_bin[ 23834 ], 7, 1);
    const_str_digest_865923a05ccab2c4f6b7a197cb0dddb6 = UNSTREAM_STRING_ASCII(&constant_bin[ 23841 ], 53, 0);
    const_str_plain_addButton = UNSTREAM_STRING_ASCII(&constant_bin[ 23894 ], 9, 1);
    const_tuple_str_plain_receiver_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_receiver_tuple, 0, const_str_plain_receiver); Py_INCREF(const_str_plain_receiver);
    const_str_plain_separator = UNSTREAM_STRING_ASCII(&constant_bin[ 23903 ], 9, 1);
    const_str_digest_5acaa0e70bf910a8d08fcfccccadaa8c = UNSTREAM_STRING_ASCII(&constant_bin[ 23912 ], 28, 0);
    const_str_digest_6d62fde1c7144eb954a22e7133e63741 = UNSTREAM_STRING_ASCII(&constant_bin[ 23940 ], 99, 0);
    const_str_plain_setBuddy = UNSTREAM_STRING_ASCII(&constant_bin[ 24039 ], 8, 1);
    const_str_digest_ff3c9a6e26ef48a60ac21af2efdc3d8c = UNSTREAM_STRING_ASCII(&constant_bin[ 24047 ], 12, 0);
    const_str_digest_bd21ceaf4d3eed5d1250b347c8589985 = UNSTREAM_STRING_ASCII(&constant_bin[ 24059 ], 29, 0);
    const_str_plain_textAlignment = UNSTREAM_STRING_ASCII(&constant_bin[ 24088 ], 13, 1);
    const_str_plain_item_type = UNSTREAM_STRING_ASCII(&constant_bin[ 24101 ], 9, 1);
    const_str_plain_layout_position = UNSTREAM_STRING_ASCII(&constant_bin[ 3497 ], 15, 1);
    const_str_digest_6d71cbfde3f26c93c13431a89e9c5250 = UNSTREAM_STRING_ASCII(&constant_bin[ 24110 ], 14, 0);
    const_tuple_str_plain_self_str_plain_parent_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_parent_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_parent_tuple, 1, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    const_str_digest_923ef44bf80f96193615a804a6a69929 = UNSTREAM_STRING_ASCII(&constant_bin[ 24124 ], 24, 0);
    const_str_plain_customWidgets = UNSTREAM_STRING_ASCII(&constant_bin[ 16551 ], 13, 1);
    const_str_plain_getter = UNSTREAM_STRING_ASCII(&constant_bin[ 20044 ], 6, 1);
    const_tuple_1f1995d702ddf4eff788994a8695766c_tuple = PyTuple_New(18);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 1, const_str_plain_item_type); Py_INCREF(const_str_plain_item_type);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 2, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 3, const_str_plain_getter); Py_INCREF(const_str_plain_getter);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 4, const_str_plain_getter_args); Py_INCREF(const_str_plain_getter_args);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 5, const_str_plain_item); Py_INCREF(const_str_plain_item);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 6, const_str_plain_props); Py_INCREF(const_str_plain_props);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 7, const_str_plain_text); Py_INCREF(const_str_plain_text);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 8, const_str_plain_status_tip); Py_INCREF(const_str_plain_status_tip);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 9, const_str_plain_tool_tip); Py_INCREF(const_str_plain_tool_tip);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 10, const_str_plain_whats_this); Py_INCREF(const_str_plain_whats_this);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 11, const_str_plain_text_alignment); Py_INCREF(const_str_plain_text_alignment);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 12, const_str_plain_font); Py_INCREF(const_str_plain_font);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 13, const_str_plain_icon); Py_INCREF(const_str_plain_icon);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 14, const_str_plain_background); Py_INCREF(const_str_plain_background);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 15, const_str_plain_foreground); Py_INCREF(const_str_plain_foreground);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 16, const_str_plain_flags); Py_INCREF(const_str_plain_flags);
    PyTuple_SET_ITEM(const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 17, const_str_plain_check_state); Py_INCREF(const_str_plain_check_state);
    const_str_plain_setTextAlignment = UNSTREAM_STRING_ASCII(&constant_bin[ 24148 ], 16, 1);
    const_str_plain_setDefaultSectionSize = UNSTREAM_STRING_ASCII(&constant_bin[ 24164 ], 21, 1);
    const_str_plain_connections = UNSTREAM_STRING_ASCII(&constant_bin[ 24185 ], 11, 1);
    const_tuple_str_plain_layout_position_str_plain_role_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_layout_position_str_plain_role_tuple, 0, const_str_plain_layout_position); Py_INCREF(const_str_plain_layout_position);
    PyTuple_SET_ITEM(const_tuple_str_plain_layout_position_str_plain_role_tuple, 1, const_str_plain_role); Py_INCREF(const_str_plain_role);
    const_str_digest_7b79a8950d64155a442741f6cc8c809b = UNSTREAM_STRING_ASCII(&constant_bin[ 22435 ], 2, 0);
    const_str_plain_exclusive = UNSTREAM_STRING_ASCII(&constant_bin[ 24196 ], 9, 1);
    const_str_plain_checkState = UNSTREAM_STRING_ASCII(&constant_bin[ 24205 ], 10, 1);
    const_tuple_str_plain_self_str_plain_elem_str_plain_layout_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_layout_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_layout_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_elem_str_plain_layout_tuple, 2, const_str_plain_layout); Py_INCREF(const_str_plain_layout);
    const_str_plain_stretch = UNSTREAM_STRING_ASCII(&constant_bin[ 18479 ], 7, 1);
    const_tuple_str_plain_self_str_plain_layout_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_layout_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_layout_tuple, 1, const_str_plain_layout); Py_INCREF(const_str_plain_layout);
    const_str_plain_addLayout = UNSTREAM_STRING_ASCII(&constant_bin[ 24215 ], 9, 1);
    const_str_digest_136d91415b51aaa5e5a8cc9dd6e8f212 = UNSTREAM_STRING_ASCII(&constant_bin[ 24224 ], 192, 0);
    const_str_plain_customwidgets = UNSTREAM_STRING_ASCII(&constant_bin[ 24416 ], 13, 1);
    const_tuple_str_digest_304f3b222ad519647bcf566a6896f005_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_304f3b222ad519647bcf566a6896f005_tuple, 0, const_str_digest_304f3b222ad519647bcf566a6896f005); Py_INCREF(const_str_digest_304f3b222ad519647bcf566a6896f005);
    const_str_plain_item_nr = UNSTREAM_STRING_ASCII(&constant_bin[ 24429 ], 7, 1);
    const_str_digest_6249efb741b0fb6b9be6449647a36de6 = UNSTREAM_STRING_ASCII(&constant_bin[ 24436 ], 27, 0);
    const_tuple_str_plain_args_str_plain_a_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_args_str_plain_a_tuple, 0, const_str_plain_args); Py_INCREF(const_str_plain_args);
    PyTuple_SET_ITEM(const_tuple_str_plain_args_str_plain_a_tuple, 1, const_str_plain_a); Py_INCREF(const_str_plain_a);
    const_str_plain_setStretchLastSection = UNSTREAM_STRING_ASCII(&constant_bin[ 24463 ], 21, 1);
    const_str_digest_5f33924e786752a1b16f3fa0623d9ebe = UNSTREAM_STRING_ASCII(&constant_bin[ 24484 ], 21, 0);
    const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple = PyTuple_New(18);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 1, const_str_plain_elem); Py_INCREF(const_str_plain_elem);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 2, const_str_plain_w); Py_INCREF(const_str_plain_w);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 3, const_str_plain_text); Py_INCREF(const_str_plain_text);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 4, const_str_plain_icon); Py_INCREF(const_str_plain_icon);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 5, const_str_plain_item); Py_INCREF(const_str_plain_item);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 6, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 7, const_str_plain__); Py_INCREF(const_str_plain__);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 8, const_str_plain_nr_in_root); Py_INCREF(const_str_plain_nr_in_root);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 9, const_str_plain_titm); Py_INCREF(const_str_plain_titm);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 10, const_str_plain_child); Py_INCREF(const_str_plain_child);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 11, const_str_plain_nr_in_parent); Py_INCREF(const_str_plain_nr_in_parent);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 12, const_str_plain_column); Py_INCREF(const_str_plain_column);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 13, const_str_plain_prop); Py_INCREF(const_str_plain_prop);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 14, const_str_plain_c_prop); Py_INCREF(const_str_plain_c_prop);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 15, const_str_plain_c_prop_name); Py_INCREF(const_str_plain_c_prop_name);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 16, const_str_plain_row); Py_INCREF(const_str_plain_row);
    PyTuple_SET_ITEM(const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 17, const_str_plain_col); Py_INCREF(const_str_plain_col);
    const_str_digest_bd4c096f6d6d24996c987abf0fcff08e = UNSTREAM_STRING_ASCII(&constant_bin[ 24505 ], 17, 0);
    const_tuple_str_plain_name_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_name_tuple, 0, const_str_plain_name); Py_INCREF(const_str_plain_name);
    const_str_digest_fef1f988ce622611673dba0e4ecba271 = UNSTREAM_STRING_ASCII(&constant_bin[ 24522 ], 15, 0);
    const_str_plain_statusTip = UNSTREAM_STRING_ASCII(&constant_bin[ 24537 ], 9, 1);
    const_tuple_str_plain_self_str_plain_widget_str_plain_buddy_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_widget_str_plain_buddy_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_widget_str_plain_buddy_tuple, 1, const_str_plain_widget); Py_INCREF(const_str_plain_widget);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_widget_str_plain_buddy_tuple, 2, const_str_plain_buddy); Py_INCREF(const_str_plain_buddy);
    const_tuple_str_chr_40_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_chr_40_tuple, 0, const_str_chr_40); Py_INCREF(const_str_chr_40);
    const_tuple_str_plain_self_str_plain_widget_str_plain_item_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_widget_str_plain_item_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_widget_str_plain_item_tuple, 1, const_str_plain_widget); Py_INCREF(const_str_plain_widget);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_widget_str_plain_item_tuple, 2, const_str_plain_item); Py_INCREF(const_str_plain_item);
    const_str_digest_9ef75a40156841d8c7e26edd14ca72ae = UNSTREAM_STRING_ASCII(&constant_bin[ 24546 ], 20, 0);
    const_str_plain_createConnections = UNSTREAM_STRING_ASCII(&constant_bin[ 23015 ], 17, 1);
    const_tuple_str_plain_sender_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_sender_tuple, 0, const_str_plain_sender); Py_INCREF(const_str_plain_sender);

    constants_created = true;
}

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_PyQt5$uic$uiparser(void) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_79cb6a44225af627fb79455c2811402d;
static PyCodeObject *codeobj_7814d7f36e0a436b0414dc6ac25cb1ef;
static PyCodeObject *codeobj_568bd259457e2cbaeb46d9eb691f9da4;
static PyCodeObject *codeobj_cd0098c5d3c660c3b00878103fcb2052;
static PyCodeObject *codeobj_8a20804ebe99308633c3bf13541596ad;
static PyCodeObject *codeobj_a5d6da18d4fc5a14ca108bf54b48231e;
static PyCodeObject *codeobj_9e016243ac192c514357e3a8d512cc38;
static PyCodeObject *codeobj_0ee7bcc3b8ebd22fea9e29d15ece9ab4;
static PyCodeObject *codeobj_20451d88b4de7c0213215426dbdbbda3;
static PyCodeObject *codeobj_20f113b58c5f20530054cc284c15f53d;
static PyCodeObject *codeobj_33cd72d6fccc4cbebda5e8de7a2c6b35;
static PyCodeObject *codeobj_caf3f416bf939473dd3b64825dfb8d47;
static PyCodeObject *codeobj_fceaa942bd64bf26eecf6afefe924fec;
static PyCodeObject *codeobj_fa09b1e02f70623fe6b82b24ac819360;
static PyCodeObject *codeobj_e0500f79127391fd295472fef1d638f2;
static PyCodeObject *codeobj_9f61805490c624f2b75db56aa25711bf;
static PyCodeObject *codeobj_d97a9867ff3a899ff35cb618f6f1a94f;
static PyCodeObject *codeobj_454093e34e4bdd10dcf528eaba6cb663;
static PyCodeObject *codeobj_afda8c4f92064c7c5c00f807c770732c;
static PyCodeObject *codeobj_8734e569a964cb39939666b17f34aad7;
static PyCodeObject *codeobj_50cfdedaac028bc492c5aef6d5586946;
static PyCodeObject *codeobj_b7d4bb23b51d5fadacf2122065c59fd7;
static PyCodeObject *codeobj_12fd9871d96e205cf0be3fcfe53e9a38;
static PyCodeObject *codeobj_2debc51c32a41ce980416edeb6da9de2;
static PyCodeObject *codeobj_ecc96e93ac4bafafc8f5e92ac6000e4b;
static PyCodeObject *codeobj_9aa09f7f0c2ce4dd0a5cae2af6c849cd;
static PyCodeObject *codeobj_3602899ccc84138b8c0fa9694bc7a3c7;
static PyCodeObject *codeobj_7194c67e68af34f0817fcb089369a02f;
static PyCodeObject *codeobj_d5e8b84fe6eaf081c076b23dd780c667;
static PyCodeObject *codeobj_6a46948e6053641a0ea133769c1802ce;
static PyCodeObject *codeobj_f58e1cffaceb1c421c5a7093c7559ff1;
static PyCodeObject *codeobj_411ff0cc561a8e75a724f98227ff28de;
static PyCodeObject *codeobj_be9d4fa84374457005c62785746c4339;
static PyCodeObject *codeobj_2cda43e24accafc1f48c20cd1a643fed;
static PyCodeObject *codeobj_2d74b7e1e2dfa606ea26dcf6e820cec3;
static PyCodeObject *codeobj_8385c5f69a9dad01aa54859cedd24496;
static PyCodeObject *codeobj_5f05f090ce8fb98e4df349a17da4f433;
static PyCodeObject *codeobj_d730a7937bd8605d124cc743ef46d547;
static PyCodeObject *codeobj_fac6ba4dcfcf362b269d656d5c530988;
static PyCodeObject *codeobj_df852d9d25c89bf084365e94b882b419;
static PyCodeObject *codeobj_67278f08fcfa8f9c8fa60b897cd17658;
static PyCodeObject *codeobj_0aeb379c67eb5b0575ee08b11d674192;
static PyCodeObject *codeobj_97f6c3536969ff2249c878e9ce9b4d35;
static PyCodeObject *codeobj_e4d16b247c01057a64ef9e6006e36b12;
static PyCodeObject *codeobj_3009233ee6a3f860b86f88655dd73c46;
static PyCodeObject *codeobj_3bdb10fc4d552176f9e1a3f94d9a6a04;
static PyCodeObject *codeobj_f2a21b93ded1596f71bc4c83a78b7250;
static PyCodeObject *codeobj_9c090c292524cf6edb0bcbeab7a68c03;
static PyCodeObject *codeobj_dedda129c398d61b49fc9f812c597527;
static PyCodeObject *codeobj_f5e7d4f2fe69bf69eec68dbd469a1407;
static PyCodeObject *codeobj_05e316213848ea1025a618735175d0b2;
static PyCodeObject *codeobj_5ea471e84fc54c527294bdca9d0d752a;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(const_str_digest_7bc3470fc4778b29b7a8609fed8b43ef);
    codeobj_79cb6a44225af627fb79455c2811402d = MAKE_CODEOBJECT(module_filename_obj, 1, CO_NOFREE, const_str_digest_2981af78011f3ca0a7325bdc08940505, const_tuple_empty, 0, 0, 0);
    codeobj_7814d7f36e0a436b0414dc6ac25cb1ef = MAKE_CODEOBJECT(module_filename_obj, 164, CO_NOFREE, const_str_plain_ButtonGroup, const_tuple_str_plain___class___tuple, 0, 0, 0);
    codeobj_568bd259457e2cbaeb46d9eb691f9da4 = MAKE_CODEOBJECT(module_filename_obj, 175, CO_NOFREE, const_str_plain_UIParser, const_tuple_str_plain___class___tuple, 0, 0, 0);
    codeobj_cd0098c5d3c660c3b00878103fcb2052 = MAKE_CODEOBJECT(module_filename_obj, 105, CO_NOFREE, const_str_plain_WidgetStack, const_tuple_str_plain___class___tuple, 0, 0, 0);
    codeobj_8a20804ebe99308633c3bf13541596ad = MAKE_CODEOBJECT(module_filename_obj, 168, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain___init__, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_a5d6da18d4fc5a14ca108bf54b48231e = MAKE_CODEOBJECT(module_filename_obj, 176, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain___init__, const_tuple_07bae01c431d143432661f50ae3017e8_tuple, 5, 0, 0);
    codeobj_9e016243ac192c514357e3a8d512cc38 = MAKE_CODEOBJECT(module_filename_obj, 1044, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain__form_layout_role, const_tuple_str_plain_layout_position_str_plain_role_tuple, 1, 0, 0);
    codeobj_0ee7bcc3b8ebd22fea9e29d15ece9ab4 = MAKE_CODEOBJECT(module_filename_obj, 74, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain__layout_position, const_tuple_f352c0ae9f0b6746072efc848800194b_tuple, 1, 0, 0);
    codeobj_20451d88b4de7c0213215426dbdbbda3 = MAKE_CODEOBJECT(module_filename_obj, 58, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain__parse_alignment, const_tuple_fab1a18f66095cbfe499fd5876f41844_tuple, 1, 0, 0);
    codeobj_20f113b58c5f20530054cc284c15f53d = MAKE_CODEOBJECT(module_filename_obj, 633, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_addAction, const_tuple_str_plain_self_str_plain_elem_tuple, 2, 0, 0);
    codeobj_33cd72d6fccc4cbebda5e8de7a2c6b35 = MAKE_CODEOBJECT(module_filename_obj, 834, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_addActions, const_tuple_4d5ee9d521aa05b1afef1840a57b3195_tuple, 1, 0, 0);
    codeobj_caf3f416bf939473dd3b64825dfb8d47 = MAKE_CODEOBJECT(module_filename_obj, 705, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_addHeader, const_tuple_3a55cba17d7be20fe672a740b1f1d80c_tuple, 2, 0, 0);
    codeobj_fceaa942bd64bf26eecf6afefe924fec = MAKE_CODEOBJECT(module_filename_obj, 637, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE, const_str_plain_any_i18n, const_tuple_str_plain_args_str_plain_a_tuple, 0, 0, 0);
    codeobj_fa09b1e02f70623fe6b82b24ac819360 = MAKE_CODEOBJECT(module_filename_obj, 977, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_buttonGroups, const_tuple_31345ce69497665f1c3b1f55e99685cb_tuple, 2, 0, 0);
    codeobj_e0500f79127391fd295472fef1d638f2 = MAKE_CODEOBJECT(module_filename_obj, 863, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_classname, const_tuple_str_plain_self_str_plain_elem_str_plain_name_tuple, 2, 0, 0);
    codeobj_9f61805490c624f2b75db56aa25711bf = MAKE_CODEOBJECT(module_filename_obj, 517, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_configureLayout, const_tuple_str_plain_self_str_plain_elem_str_plain_layout_tuple, 3, 0, 0);
    codeobj_d97a9867ff3a899ff35cb618f6f1a94f = MAKE_CODEOBJECT(module_filename_obj, 776, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_createAction, const_tuple_str_plain_self_str_plain_elem_tuple, 2, 0, 0);
    codeobj_454093e34e4bdd10dcf528eaba6cb663 = MAKE_CODEOBJECT(module_filename_obj, 780, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_createActionGroup, const_tuple_str_plain_self_str_plain_elem_str_plain_action_group_tuple, 2, 0, 0);
    codeobj_afda8c4f92064c7c5c00f807c770732c = MAKE_CODEOBJECT(module_filename_obj, 915, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_createConnections, const_tuple_cc4a04b0c727fa46dc569e4aba321f4b_tuple, 2, 0, 0);
    codeobj_8734e569a964cb39939666b17f34aad7 = MAKE_CODEOBJECT(module_filename_obj, 451, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_createLayout, const_tuple_9e384c922ce8b2cf078420edf4fc200d_tuple, 2, 0, 0);
    codeobj_50cfdedaac028bc492c5aef6d5586946 = MAKE_CODEOBJECT(module_filename_obj, 421, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_createSpacer, const_tuple_a5c9f66a295e147807f7a957ad0b0be0_tuple, 2, 0, 0);
    codeobj_b7d4bb23b51d5fadacf2122065c59fd7 = MAKE_CODEOBJECT(module_filename_obj, 974, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_createToplevelWidget, const_tuple_str_plain_self_str_plain_classname_str_plain_widgetname_tuple, 3, 0, 0);
    codeobj_12fd9871d96e205cf0be3fcfe53e9a38 = MAKE_CODEOBJECT(module_filename_obj, 808, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_createUserInterface, const_tuple_cfbf2f9fef9a4a29dff546053cf762b5_tuple, 2, 0, 0);
    codeobj_2debc51c32a41ce980416edeb6da9de2 = MAKE_CODEOBJECT(module_filename_obj, 245, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_createWidget, const_tuple_573875de7099457af4fa28766608094f_tuple, 2, 0, 0);
    codeobj_ecc96e93ac4bafafc8f5e92ac6000e4b = MAKE_CODEOBJECT(module_filename_obj, 646, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE, const_str_plain_createWidgetItem, const_tuple_1f1995d702ddf4eff788994a8695766c_tuple, 4, 0, 0);
    codeobj_9aa09f7f0c2ce4dd0a5cae2af6c849cd = MAKE_CODEOBJECT(module_filename_obj, 944, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_customWidgets, const_tuple_a338667ecb10e025b2485ec6f4dd612c_tuple, 2, 0, 0);
    codeobj_3602899ccc84138b8c0fa9694bc7a3c7 = MAKE_CODEOBJECT(module_filename_obj, 537, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_disableSorting, const_tuple_str_plain_self_str_plain_w_tuple, 2, 0, 0);
    codeobj_7194c67e68af34f0817fcb089369a02f = MAKE_CODEOBJECT(module_filename_obj, 991, CO_NOFREE, const_str_plain_finalize, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_d5e8b84fe6eaf081c076b23dd780c667 = MAKE_CODEOBJECT(module_filename_obj, 238, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_getProperty, const_tuple_str_plain_self_str_plain_elem_str_plain_name_str_plain_prop_tuple, 3, 0, 0);
    codeobj_6a46948e6053641a0ea133769c1802ce = MAKE_CODEOBJECT(module_filename_obj, 392, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_handleHeaderView, const_tuple_9e565e4871d64ba6e72d77a7e15bf1de_tuple, 4, 0, 0);
    codeobj_f58e1cffaceb1c421c5a7093c7559ff1 = MAKE_CODEOBJECT(module_filename_obj, 543, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_handleItem, const_tuple_57b1cb536c50d820f3aeee6e449b64a6_tuple, 2, 0, 0);
    codeobj_411ff0cc561a8e75a724f98227ff28de = MAKE_CODEOBJECT(module_filename_obj, 945, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_header2module, const_tuple_str_plain_header_str_plain_mpath_str_plain_part_tuple, 1, 0, 0);
    codeobj_be9d4fa84374457005c62785746c4339 = MAKE_CODEOBJECT(module_filename_obj, 916, CO_OPTIMIZED | CO_NEWLOCALS, const_str_plain_name2object, const_tuple_str_plain_obj_str_plain_self_tuple, 1, 0, 0);
    codeobj_2cda43e24accafc1f48c20cd1a643fed = MAKE_CODEOBJECT(module_filename_obj, 994, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_parse, const_tuple_f1c3a060d57425ca05d562927681f67b_tuple, 3, 0, 0);
    codeobj_2d74b7e1e2dfa606ea26dcf6e820cec3 = MAKE_CODEOBJECT(module_filename_obj, 133, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_peek, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_8385c5f69a9dad01aa54859cedd24496 = MAKE_CODEOBJECT(module_filename_obj, 114, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_popLayout, const_tuple_str_plain_self_str_plain_layout_tuple, 1, 0, 0);
    codeobj_5f05f090ce8fb98e4df349a17da4f433 = MAKE_CODEOBJECT(module_filename_obj, 120, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_popWidget, const_tuple_str_plain_self_str_plain_widget_str_plain_item_tuple, 1, 0, 0);
    codeobj_d730a7937bd8605d124cc743ef46d547 = MAKE_CODEOBJECT(module_filename_obj, 107, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_push, const_tuple_str_plain_self_str_plain_item_tuple, 2, 0, 0);
    codeobj_fac6ba4dcfcf362b269d656d5c530988 = MAKE_CODEOBJECT(module_filename_obj, 881, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_readDefaults, const_tuple_str_plain_self_str_plain_elem_tuple, 2, 0, 0);
    codeobj_df852d9d25c89bf084365e94b882b419 = MAKE_CODEOBJECT(module_filename_obj, 895, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_readResources, const_tuple_ba4029ef5794ebf626de2d5293ee19ba_tuple, 2, 0, 0);
    codeobj_67278f08fcfa8f9c8fa60b897cd17658 = MAKE_CODEOBJECT(module_filename_obj, 208, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_reset, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_0aeb379c67eb5b0575ee08b11d674192 = MAKE_CODEOBJECT(module_filename_obj, 529, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_setArray, const_tuple_8f69df6790447d68e0e3d1443283a4fd_tuple, 4, 0, 0);
    codeobj_97f6c3536969ff2249c878e9ce9b4d35 = MAKE_CODEOBJECT(module_filename_obj, 854, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_setBuddies, const_tuple_str_plain_self_str_plain_widget_str_plain_buddy_tuple, 1, 0, 0);
    codeobj_e4d16b247c01057a64ef9e6006e36b12 = MAKE_CODEOBJECT(module_filename_obj, 874, CO_NOFREE, const_str_plain_setContext, const_tuple_str_plain_self_str_plain_context_tuple, 2, 0, 0);
    codeobj_3009233ee6a3f860b86f88655dd73c46 = MAKE_CODEOBJECT(module_filename_obj, 846, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_setDelayedProps, const_tuple_0a15021ef3f570acf96e4125349210bb_tuple, 1, 0, 0);
    codeobj_3bdb10fc4d552176f9e1a3f94d9a6a04 = MAKE_CODEOBJECT(module_filename_obj, 885, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_setTaborder, const_tuple_0f99ef9bbf8af9390421ffc4af44e38a_tuple, 2, 0, 0);
    codeobj_f2a21b93ded1596f71bc4c83a78b7250 = MAKE_CODEOBJECT(module_filename_obj, 763, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_setZOrder, const_tuple_str_plain_self_str_plain_elem_tuple, 2, 0, 0);
    codeobj_9c090c292524cf6edb0bcbeab7a68c03 = MAKE_CODEOBJECT(module_filename_obj, 220, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_setupObject, const_tuple_14f192b8a9cdcc4ba60cd5944569028a_tuple, 5, 0, 0);
    codeobj_dedda129c398d61b49fc9f812c597527 = MAKE_CODEOBJECT(module_filename_obj, 136, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_topIsLayout, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_f5e7d4f2fe69bf69eec68dbd469a1407 = MAKE_CODEOBJECT(module_filename_obj, 139, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_topIsLayoutWidget, const_tuple_str_plain_self_str_plain_parent_tuple, 1, 0, 0);
    codeobj_05e316213848ea1025a618735175d0b2 = MAKE_CODEOBJECT(module_filename_obj, 799, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_traverseWidgetTree, const_tuple_01d6212b4165d924dbe2429b699023db_tuple, 2, 0, 0);
    codeobj_5ea471e84fc54c527294bdca9d0d752a = MAKE_CODEOBJECT(module_filename_obj, 187, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_uniqueName, const_tuple_str_plain_self_str_plain_name_str_plain_suffix_tuple, 2, 0, 0);
}

// The module function declarations.
NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_1__mro_entries_conversion(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_6_complex_call_helper_pos_star_list(PyObject **python_pars);


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_10___init__();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_11_uniqueName();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_12_reset();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_13_setupObject(PyObject *defaults);


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_14_getProperty();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_15_createWidget();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_16_handleHeaderView();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_17_createSpacer();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_18_createLayout();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_19_configureLayout();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_1__parse_alignment();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_20_setArray();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_21_disableSorting();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_22_handleItem();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_23_addAction();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_24_any_i18n();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_25_createWidgetItem();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_26_addHeader();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_27_setZOrder();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_28_createAction();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_29_createActionGroup();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_2__layout_position();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_30_traverseWidgetTree();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_31_createUserInterface();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_32_addActions();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_33_setDelayedProps();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_34_setBuddies();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_35_classname();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_36_setContext();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_37_readDefaults();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_38_setTaborder();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_39_readResources();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_3_push();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_40_createConnections();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_40_createConnections$$$function_1_name2object();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_41_customWidgets();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_41_customWidgets$$$function_1_header2module();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_42_createToplevelWidget();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_43_buttonGroups();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_44_finalize();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_45_parse();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_46__form_layout_role();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_4_popLayout();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_5_popWidget();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_6_peek();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_7_topIsLayout();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_8_topIsLayoutWidget();


static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_9___init__();


// The module function definitions.
static PyObject *impl_PyQt5$uic$uiparser$$$function_1__parse_alignment(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_alignment = python_pars[0];
    PyObject *var_align_flags = NULL;
    PyObject *var_qt_align = NULL;
    PyObject *var__ = NULL;
    PyObject *var_align = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_20451d88b4de7c0213215426dbdbbda3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_20451d88b4de7c0213215426dbdbbda3 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        assert(var_align_flags == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_align_flags = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_20451d88b4de7c0213215426dbdbbda3, codeobj_20451d88b4de7c0213215426dbdbbda3, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_20451d88b4de7c0213215426dbdbbda3 = cache_frame_20451d88b4de7c0213215426dbdbbda3;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_20451d88b4de7c0213215426dbdbbda3);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_20451d88b4de7c0213215426dbdbbda3) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_alignment);
        tmp_called_instance_1 = par_alignment;
        frame_20451d88b4de7c0213215426dbdbbda3->m_frame.f_lineno = 62;
        tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_split, &PyTuple_GET_ITEM(const_tuple_str_chr_124_tuple, 0));

        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_3 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooo";
                exception_lineno = 62;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_4 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_qt_align;
            var_qt_align = tmp_assign_source_4;
            Py_INCREF(var_qt_align);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_qt_align);
        tmp_called_instance_2 = var_qt_align;
        frame_20451d88b4de7c0213215426dbdbbda3->m_frame.f_lineno = 63;
        tmp_iter_arg_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_split, &PyTuple_GET_ITEM(const_tuple_str_digest_ebebb18731664a12452b2ba6915b22ed_tuple, 0));

        if (tmp_iter_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 63;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        tmp_assign_source_5 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
        Py_DECREF(tmp_iter_arg_2);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 63;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_6 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 63;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_7 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 63;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL)
            {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration))
                {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooo";
                    exception_lineno = 63;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format(PyExc_ValueError, "too many values to unpack");
#else
            PyErr_Format(PyExc_ValueError, "too many values to unpack (expected 2)");
#endif
            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            type_description_1 = "ooooo";
            exception_lineno = 63;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var__;
            var__ = tmp_assign_source_8;
            Py_INCREF(var__);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_qt_align;
            assert(old != NULL);
            var_qt_align = tmp_assign_source_9;
            Py_INCREF(var_qt_align);
            Py_DECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_getattr_attr_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtCore);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtCore);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 1468 ], 28, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 64;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_getattr_target_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_Qt);
        if (tmp_getattr_target_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 64;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_qt_align);
        tmp_getattr_attr_1 = var_qt_align;
        tmp_assign_source_10 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, NULL);
        Py_DECREF(tmp_getattr_target_1);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 64;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_align;
            var_align = tmp_assign_source_10;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(var_align_flags);
        tmp_compexpr_left_1 = var_align_flags;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 == tmp_compexpr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_11;
            CHECK_OBJECT(var_align);
            tmp_assign_source_11 = var_align;
            {
                PyObject *old = var_align_flags;
                assert(old != NULL);
                var_align_flags = tmp_assign_source_11;
                Py_INCREF(var_align_flags);
                Py_DECREF(old);
            }

        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_assign_source_12;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            CHECK_OBJECT(var_align_flags);
            tmp_left_name_1 = var_align_flags;
            CHECK_OBJECT(var_align);
            tmp_right_name_1 = var_align;
            tmp_result = BINARY_OPERATION_INPLACE(PyNumber_InPlaceOr, &tmp_left_name_1, tmp_right_name_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 69;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_12 = tmp_left_name_1;
            var_align_flags = tmp_assign_source_12;

        }
        branch_end_1:;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 62;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_20451d88b4de7c0213215426dbdbbda3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_20451d88b4de7c0213215426dbdbbda3);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_20451d88b4de7c0213215426dbdbbda3, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_20451d88b4de7c0213215426dbdbbda3->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_20451d88b4de7c0213215426dbdbbda3, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_20451d88b4de7c0213215426dbdbbda3,
        type_description_1,
        par_alignment,
        var_align_flags,
        var_qt_align,
        var__,
        var_align
    );


    // Release cached frame.
    if (frame_20451d88b4de7c0213215426dbdbbda3 == cache_frame_20451d88b4de7c0213215426dbdbbda3) {
        Py_DECREF(frame_20451d88b4de7c0213215426dbdbbda3);
    }
    cache_frame_20451d88b4de7c0213215426dbdbbda3 = NULL;

    assertFrameObject(frame_20451d88b4de7c0213215426dbdbbda3);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    CHECK_OBJECT(var_align_flags);
    tmp_return_value = var_align_flags;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_1__parse_alignment);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_align_flags);
    Py_DECREF(var_align_flags);
    var_align_flags = NULL;

    Py_XDECREF(var_qt_align);
    var_qt_align = NULL;

    Py_XDECREF(var__);
    var__ = NULL;

    Py_XDECREF(var_align);
    var_align = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_align_flags);
    var_align_flags = NULL;

    Py_XDECREF(var_qt_align);
    var_qt_align = NULL;

    Py_XDECREF(var__);
    var__ = NULL;

    Py_XDECREF(var_align);
    var_align = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_1__parse_alignment);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_alignment);
    Py_DECREF(par_alignment);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_alignment);
    Py_DECREF(par_alignment);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_2__layout_position(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_elem = python_pars[0];
    PyObject *var_row = NULL;
    PyObject *var_column = NULL;
    PyObject *var_alignment = NULL;
    PyObject *var_rowspan = NULL;
    PyObject *var_colspan = NULL;
    struct Nuitka_FrameObject *frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4, codeobj_0ee7bcc3b8ebd22fea9e29d15ece9ab4, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4 = cache_frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT(par_elem);
        tmp_source_name_1 = par_elem;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_attrib);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 81;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4->m_frame.f_lineno = 81;
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_get, &PyTuple_GET_ITEM(const_tuple_str_plain_row_tuple, 0));

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 81;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_row == NULL);
        var_row = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT(par_elem);
        tmp_source_name_2 = par_elem;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_attrib);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 82;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4->m_frame.f_lineno = 82;
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_get, &PyTuple_GET_ITEM(const_tuple_str_plain_column_tuple, 0));

        Py_DECREF(tmp_called_instance_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 82;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_column == NULL);
        var_column = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT(par_elem);
        tmp_source_name_3 = par_elem;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_attrib);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4->m_frame.f_lineno = 83;
        tmp_assign_source_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_get, &PyTuple_GET_ITEM(const_tuple_str_plain_alignment_tuple, 0));

        Py_DECREF(tmp_called_instance_3);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_alignment == NULL);
        var_alignment = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT(var_row);
        tmp_compexpr_left_1 = var_row;
        tmp_compexpr_right_1 = Py_None;
        tmp_or_left_value_1 = (tmp_compexpr_left_1 == tmp_compexpr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(var_column);
        tmp_compexpr_left_2 = var_column;
        tmp_compexpr_right_2 = Py_None;
        tmp_or_right_value_1 = (tmp_compexpr_left_2 == tmp_compexpr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_1 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT(var_alignment);
            tmp_compexpr_left_3 = var_alignment;
            tmp_compexpr_right_3 = Py_None;
            tmp_condition_result_2 = (tmp_compexpr_left_3 == tmp_compexpr_right_3) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            tmp_return_value = const_tuple_empty;
            Py_INCREF(tmp_return_value);
            goto frame_return_exit_1;
            branch_no_2:;
        }
        {
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            tmp_tuple_element_1 = const_int_0;
            tmp_return_value = PyTuple_New(2);
            Py_INCREF(tmp_tuple_element_1);
            PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_1);
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain__parse_alignment);

            if (unlikely(tmp_mvar_value_1 == NULL)) {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__parse_alignment);
            }

            if (tmp_mvar_value_1 == NULL) {
                Py_DECREF(tmp_return_value);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3286 ], 38, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 90;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            CHECK_OBJECT(var_alignment);
            tmp_args_element_name_1 = var_alignment;
            frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4->m_frame.f_lineno = 90;
            tmp_tuple_element_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_return_value);

                exception_lineno = 90;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_1);
            goto frame_return_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_int_arg_1;
        CHECK_OBJECT(var_row);
        tmp_int_arg_1 = var_row;
        tmp_assign_source_4 = PyNumber_Int(tmp_int_arg_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 93;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_row;
            assert(old != NULL);
            var_row = tmp_assign_source_4;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_int_arg_2;
        CHECK_OBJECT(var_column);
        tmp_int_arg_2 = var_column;
        tmp_assign_source_5 = PyNumber_Int(tmp_int_arg_2);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 94;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_column;
            assert(old != NULL);
            var_column = tmp_assign_source_5;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_int_arg_3;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT(par_elem);
        tmp_source_name_4 = par_elem;
        tmp_called_instance_4 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_attrib);
        if (tmp_called_instance_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 96;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4->m_frame.f_lineno = 96;
        tmp_int_arg_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_4, const_str_plain_get, &PyTuple_GET_ITEM(const_tuple_str_plain_rowspan_int_pos_1_tuple, 0));

        Py_DECREF(tmp_called_instance_4);
        if (tmp_int_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 96;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_6 = PyNumber_Int(tmp_int_arg_3);
        Py_DECREF(tmp_int_arg_3);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 96;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_rowspan == NULL);
        var_rowspan = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_int_arg_4;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT(par_elem);
        tmp_source_name_5 = par_elem;
        tmp_called_instance_5 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_attrib);
        if (tmp_called_instance_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 97;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4->m_frame.f_lineno = 97;
        tmp_int_arg_4 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_5, const_str_plain_get, &PyTuple_GET_ITEM(const_tuple_str_plain_colspan_int_pos_1_tuple, 0));

        Py_DECREF(tmp_called_instance_5);
        if (tmp_int_arg_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 97;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_7 = PyNumber_Int(tmp_int_arg_4);
        Py_DECREF(tmp_int_arg_4);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 97;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_colspan == NULL);
        var_colspan = tmp_assign_source_7;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        CHECK_OBJECT(var_alignment);
        tmp_compexpr_left_4 = var_alignment;
        tmp_compexpr_right_4 = Py_None;
        tmp_condition_result_3 = (tmp_compexpr_left_4 == tmp_compexpr_right_4) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_tuple_element_2;
            CHECK_OBJECT(var_row);
            tmp_tuple_element_2 = var_row;
            tmp_return_value = PyTuple_New(4);
            Py_INCREF(tmp_tuple_element_2);
            PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_2);
            CHECK_OBJECT(var_column);
            tmp_tuple_element_2 = var_column;
            Py_INCREF(tmp_tuple_element_2);
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_2);
            CHECK_OBJECT(var_rowspan);
            tmp_tuple_element_2 = var_rowspan;
            Py_INCREF(tmp_tuple_element_2);
            PyTuple_SET_ITEM(tmp_return_value, 2, tmp_tuple_element_2);
            CHECK_OBJECT(var_colspan);
            tmp_tuple_element_2 = var_colspan;
            Py_INCREF(tmp_tuple_element_2);
            PyTuple_SET_ITEM(tmp_return_value, 3, tmp_tuple_element_2);
            goto frame_return_exit_1;
        }
        branch_no_3:;
    }
    {
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT(var_row);
        tmp_tuple_element_3 = var_row;
        tmp_return_value = PyTuple_New(5);
        Py_INCREF(tmp_tuple_element_3);
        PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_3);
        CHECK_OBJECT(var_column);
        tmp_tuple_element_3 = var_column;
        Py_INCREF(tmp_tuple_element_3);
        PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_3);
        CHECK_OBJECT(var_rowspan);
        tmp_tuple_element_3 = var_rowspan;
        Py_INCREF(tmp_tuple_element_3);
        PyTuple_SET_ITEM(tmp_return_value, 2, tmp_tuple_element_3);
        CHECK_OBJECT(var_colspan);
        tmp_tuple_element_3 = var_colspan;
        Py_INCREF(tmp_tuple_element_3);
        PyTuple_SET_ITEM(tmp_return_value, 3, tmp_tuple_element_3);
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain__parse_alignment);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__parse_alignment);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_return_value);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 3286 ], 38, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 102;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        CHECK_OBJECT(var_alignment);
        tmp_args_element_name_2 = var_alignment;
        frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4->m_frame.f_lineno = 102;
        tmp_tuple_element_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        if (tmp_tuple_element_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_return_value);

            exception_lineno = 102;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_return_value, 4, tmp_tuple_element_3);
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4,
        type_description_1,
        par_elem,
        var_row,
        var_column,
        var_alignment,
        var_rowspan,
        var_colspan
    );


    // Release cached frame.
    if (frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4 == cache_frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4) {
        Py_DECREF(frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4);
    }
    cache_frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4 = NULL;

    assertFrameObject(frame_0ee7bcc3b8ebd22fea9e29d15ece9ab4);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_2__layout_position);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_row);
    Py_DECREF(var_row);
    var_row = NULL;

    CHECK_OBJECT((PyObject *)var_column);
    Py_DECREF(var_column);
    var_column = NULL;

    CHECK_OBJECT((PyObject *)var_alignment);
    Py_DECREF(var_alignment);
    var_alignment = NULL;

    Py_XDECREF(var_rowspan);
    var_rowspan = NULL;

    Py_XDECREF(var_colspan);
    var_colspan = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_row);
    var_row = NULL;

    Py_XDECREF(var_column);
    var_column = NULL;

    Py_XDECREF(var_alignment);
    var_alignment = NULL;

    Py_XDECREF(var_rowspan);
    var_rowspan = NULL;

    Py_XDECREF(var_colspan);
    var_colspan = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_2__layout_position);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_3_push(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_item = python_pars[1];
    struct Nuitka_FrameObject *frame_d730a7937bd8605d124cc743ef46d547;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_d730a7937bd8605d124cc743ef46d547 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_d730a7937bd8605d124cc743ef46d547, codeobj_d730a7937bd8605d124cc743ef46d547, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *));
    frame_d730a7937bd8605d124cc743ef46d547 = cache_frame_d730a7937bd8605d124cc743ef46d547;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d730a7937bd8605d124cc743ef46d547);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d730a7937bd8605d124cc743ef46d547) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_called_instance_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_DEBUG);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 694 ], 27, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 108;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_left_name_1 = const_str_digest_7b85d249a0a0a4cdf516a65c693960d6;
        CHECK_OBJECT(par_item);
        tmp_called_instance_2 = par_item;
        frame_d730a7937bd8605d124cc743ef46d547->m_frame.f_lineno = 108;
        tmp_called_instance_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_metaObject);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_d730a7937bd8605d124cc743ef46d547->m_frame.f_lineno = 108;
        tmp_tuple_element_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_className);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_item);
        tmp_called_instance_3 = par_item;
        frame_d730a7937bd8605d124cc743ef46d547->m_frame.f_lineno = 109;
        tmp_tuple_element_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_objectName);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_right_name_1);

            exception_lineno = 109;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_right_name_1, 1, tmp_tuple_element_1);
        tmp_args_element_name_1 = BINARY_OPERATION_MOD_UNICODE_TUPLE(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_d730a7937bd8605d124cc743ef46d547->m_frame.f_lineno = 108;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_4 = par_self;
        CHECK_OBJECT(par_item);
        tmp_args_element_name_2 = par_item;
        frame_d730a7937bd8605d124cc743ef46d547->m_frame.f_lineno = 110;
        {
            PyObject *call_args[] = {tmp_args_element_name_2};
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_append, call_args);
        }

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        CHECK_OBJECT(par_item);
        tmp_isinstance_inst_1 = par_item;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 111;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_2;
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_QWidget);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 111;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 111;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT(par_item);
            tmp_assattr_name_1 = par_item;
            CHECK_OBJECT(par_self);
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_topwidget, tmp_assattr_name_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 112;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d730a7937bd8605d124cc743ef46d547);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d730a7937bd8605d124cc743ef46d547);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d730a7937bd8605d124cc743ef46d547, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_d730a7937bd8605d124cc743ef46d547->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d730a7937bd8605d124cc743ef46d547, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d730a7937bd8605d124cc743ef46d547,
        type_description_1,
        par_self,
        par_item
    );


    // Release cached frame.
    if (frame_d730a7937bd8605d124cc743ef46d547 == cache_frame_d730a7937bd8605d124cc743ef46d547) {
        Py_DECREF(frame_d730a7937bd8605d124cc743ef46d547);
    }
    cache_frame_d730a7937bd8605d124cc743ef46d547 = NULL;

    assertFrameObject(frame_d730a7937bd8605d124cc743ef46d547);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_3_push);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_item);
    Py_DECREF(par_item);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_item);
    Py_DECREF(par_item);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_4_popLayout(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *var_layout = NULL;
    struct Nuitka_FrameObject *frame_8385c5f69a9dad01aa54859cedd24496;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8385c5f69a9dad01aa54859cedd24496 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_8385c5f69a9dad01aa54859cedd24496, codeobj_8385c5f69a9dad01aa54859cedd24496, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *));
    frame_8385c5f69a9dad01aa54859cedd24496 = cache_frame_8385c5f69a9dad01aa54859cedd24496;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_8385c5f69a9dad01aa54859cedd24496);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_8385c5f69a9dad01aa54859cedd24496) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        tmp_called_instance_1 = (PyObject *)&PyList_Type;
        CHECK_OBJECT(par_self);
        tmp_args_element_name_1 = par_self;
        frame_8385c5f69a9dad01aa54859cedd24496->m_frame.f_lineno = 115;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_pop, call_args);
        }

        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert(var_layout == NULL);
        var_layout = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_called_instance_4;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_DEBUG);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 694 ], 27, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 116;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_left_name_1 = const_str_digest_242c3b8eab8a7b896128bb7d41e496e9;
        CHECK_OBJECT(var_layout);
        tmp_called_instance_3 = var_layout;
        frame_8385c5f69a9dad01aa54859cedd24496->m_frame.f_lineno = 116;
        tmp_called_instance_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_metaObject);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_8385c5f69a9dad01aa54859cedd24496->m_frame.f_lineno = 116;
        tmp_tuple_element_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_className);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_layout);
        tmp_called_instance_4 = var_layout;
        frame_8385c5f69a9dad01aa54859cedd24496->m_frame.f_lineno = 117;
        tmp_tuple_element_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_4, const_str_plain_objectName);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_right_name_1);

            exception_lineno = 117;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_right_name_1, 1, tmp_tuple_element_1);
        tmp_args_element_name_2 = BINARY_OPERATION_MOD_UNICODE_TUPLE(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_8385c5f69a9dad01aa54859cedd24496->m_frame.f_lineno = 116;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8385c5f69a9dad01aa54859cedd24496);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8385c5f69a9dad01aa54859cedd24496);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8385c5f69a9dad01aa54859cedd24496, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_8385c5f69a9dad01aa54859cedd24496->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8385c5f69a9dad01aa54859cedd24496, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8385c5f69a9dad01aa54859cedd24496,
        type_description_1,
        par_self,
        var_layout
    );


    // Release cached frame.
    if (frame_8385c5f69a9dad01aa54859cedd24496 == cache_frame_8385c5f69a9dad01aa54859cedd24496) {
        Py_DECREF(frame_8385c5f69a9dad01aa54859cedd24496);
    }
    cache_frame_8385c5f69a9dad01aa54859cedd24496 = NULL;

    assertFrameObject(frame_8385c5f69a9dad01aa54859cedd24496);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_layout);
    tmp_return_value = var_layout;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_4_popLayout);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_layout);
    Py_DECREF(var_layout);
    var_layout = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_layout);
    var_layout = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_4_popLayout);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_5_popWidget(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *var_widget = NULL;
    PyObject *var_item = NULL;
    nuitka_bool tmp_for_loop_1__break_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_5f05f090ce8fb98e4df349a17da4f433;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_5f05f090ce8fb98e4df349a17da4f433 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_5f05f090ce8fb98e4df349a17da4f433, codeobj_5f05f090ce8fb98e4df349a17da4f433, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_5f05f090ce8fb98e4df349a17da4f433 = cache_frame_5f05f090ce8fb98e4df349a17da4f433;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5f05f090ce8fb98e4df349a17da4f433);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5f05f090ce8fb98e4df349a17da4f433) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        tmp_called_instance_1 = (PyObject *)&PyList_Type;
        CHECK_OBJECT(par_self);
        tmp_args_element_name_1 = par_self;
        frame_5f05f090ce8fb98e4df349a17da4f433->m_frame.f_lineno = 121;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_pop, call_args);
        }

        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 121;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_widget == NULL);
        var_widget = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_called_instance_4;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_DEBUG);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 694 ], 27, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 122;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_left_name_1 = const_str_digest_3234265c5f9965146a60ec0be84c2f5d;
        CHECK_OBJECT(var_widget);
        tmp_called_instance_3 = var_widget;
        frame_5f05f090ce8fb98e4df349a17da4f433->m_frame.f_lineno = 122;
        tmp_called_instance_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_metaObject);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_5f05f090ce8fb98e4df349a17da4f433->m_frame.f_lineno = 122;
        tmp_tuple_element_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_className);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_widget);
        tmp_called_instance_4 = var_widget;
        frame_5f05f090ce8fb98e4df349a17da4f433->m_frame.f_lineno = 123;
        tmp_tuple_element_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_4, const_str_plain_objectName);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_right_name_1);

            exception_lineno = 123;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_right_name_1, 1, tmp_tuple_element_1);
        tmp_args_element_name_2 = BINARY_OPERATION_MOD_UNICODE_TUPLE(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_5f05f090ce8fb98e4df349a17da4f433->m_frame.f_lineno = 122;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        nuitka_bool tmp_assign_source_2;
        tmp_assign_source_2 = NUITKA_BOOL_FALSE;
        tmp_for_loop_1__break_indicator = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_3;
        tmp_called_name_2 = (PyObject *)&PyReversed_Type;
        CHECK_OBJECT(par_self);
        tmp_args_element_name_3 = par_self;
        frame_5f05f090ce8fb98e4df349a17da4f433->m_frame.f_lineno = 124;
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_3);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_3 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_value_name_1;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_value_name_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT(tmp_value_name_1);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooo";
            exception_lineno = 124;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = exception_keeper_type_1;
        tmp_compexpr_right_1 = PyExc_StopIteration;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            Py_DECREF(exception_keeper_type_1);
            Py_XDECREF(exception_keeper_value_1);
            Py_XDECREF(exception_keeper_tb_1);

            exception_lineno = 124;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_assign_source_5;
            tmp_assign_source_5 = NUITKA_BOOL_TRUE;
            tmp_for_loop_1__break_indicator = tmp_assign_source_5;
        }
        Py_DECREF(exception_keeper_type_1);
        Py_XDECREF(exception_keeper_value_1);
        Py_XDECREF(exception_keeper_tb_1);
        goto loop_end_1;
        goto branch_end_1;
        branch_no_1:;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_3;
        branch_end_1:;
    }
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_6 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_item;
            var_item = tmp_assign_source_6;
            Py_INCREF(var_item);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        CHECK_OBJECT(var_item);
        tmp_isinstance_inst_1 = var_item;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 125;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }

        tmp_source_name_1 = tmp_mvar_value_2;
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_QWidget);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT(var_item);
            tmp_assattr_name_1 = var_item;
            CHECK_OBJECT(par_self);
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_topwidget, tmp_assattr_name_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;
                type_description_1 = "ooo";
                goto try_except_handler_3;
            }
        }
        goto loop_end_1;
        branch_no_2:;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 124;
        type_description_1 = "ooo";
        goto try_except_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_3;
        nuitka_bool tmp_compexpr_left_2;
        nuitka_bool tmp_compexpr_right_2;
        assert(tmp_for_loop_1__break_indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_2 = tmp_for_loop_1__break_indicator;
        tmp_compexpr_right_2 = NUITKA_BOOL_TRUE;
        tmp_condition_result_3 = (tmp_compexpr_left_2 == tmp_compexpr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_assattr_target_2;
            tmp_assattr_name_2 = Py_None;
            CHECK_OBJECT(par_self);
            tmp_assattr_target_2 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_topwidget, tmp_assattr_name_2);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 129;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
        }
        branch_no_3:;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_source_name_2;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_DEBUG);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG);
        }

        if (tmp_mvar_value_3 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 694 ], 27, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 130;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_3 = tmp_mvar_value_3;
        tmp_left_name_2 = const_str_digest_6ac68c5ef1bab74796286d26f9e887d5;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_topwidget);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_right_name_2, 0, tmp_tuple_element_2);
        tmp_args_element_name_4 = BINARY_OPERATION_MOD_UNICODE_TUPLE(tmp_left_name_2, tmp_right_name_2);
        Py_DECREF(tmp_right_name_2);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_5f05f090ce8fb98e4df349a17da4f433->m_frame.f_lineno = 130;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_4);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5f05f090ce8fb98e4df349a17da4f433);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5f05f090ce8fb98e4df349a17da4f433);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5f05f090ce8fb98e4df349a17da4f433, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_5f05f090ce8fb98e4df349a17da4f433->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5f05f090ce8fb98e4df349a17da4f433, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5f05f090ce8fb98e4df349a17da4f433,
        type_description_1,
        par_self,
        var_widget,
        var_item
    );


    // Release cached frame.
    if (frame_5f05f090ce8fb98e4df349a17da4f433 == cache_frame_5f05f090ce8fb98e4df349a17da4f433) {
        Py_DECREF(frame_5f05f090ce8fb98e4df349a17da4f433);
    }
    cache_frame_5f05f090ce8fb98e4df349a17da4f433 = NULL;

    assertFrameObject(frame_5f05f090ce8fb98e4df349a17da4f433);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_widget);
    tmp_return_value = var_widget;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_5_popWidget);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_widget);
    Py_DECREF(var_widget);
    var_widget = NULL;

    Py_XDECREF(var_item);
    var_item = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_widget);
    var_widget = NULL;

    Py_XDECREF(var_item);
    var_item = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_5_popWidget);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_6_peek(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_2d74b7e1e2dfa606ea26dcf6e820cec3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2d74b7e1e2dfa606ea26dcf6e820cec3 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_2d74b7e1e2dfa606ea26dcf6e820cec3, codeobj_2d74b7e1e2dfa606ea26dcf6e820cec3, module_PyQt5$uic$uiparser, sizeof(void *));
    frame_2d74b7e1e2dfa606ea26dcf6e820cec3 = cache_frame_2d74b7e1e2dfa606ea26dcf6e820cec3;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2d74b7e1e2dfa606ea26dcf6e820cec3);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2d74b7e1e2dfa606ea26dcf6e820cec3) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_self);
        tmp_subscribed_name_1 = par_self;
        tmp_subscript_name_1 = const_int_neg_1;
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, -1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 134;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2d74b7e1e2dfa606ea26dcf6e820cec3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_2d74b7e1e2dfa606ea26dcf6e820cec3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2d74b7e1e2dfa606ea26dcf6e820cec3);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2d74b7e1e2dfa606ea26dcf6e820cec3, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_2d74b7e1e2dfa606ea26dcf6e820cec3->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2d74b7e1e2dfa606ea26dcf6e820cec3, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2d74b7e1e2dfa606ea26dcf6e820cec3,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if (frame_2d74b7e1e2dfa606ea26dcf6e820cec3 == cache_frame_2d74b7e1e2dfa606ea26dcf6e820cec3) {
        Py_DECREF(frame_2d74b7e1e2dfa606ea26dcf6e820cec3);
    }
    cache_frame_2d74b7e1e2dfa606ea26dcf6e820cec3 = NULL;

    assertFrameObject(frame_2d74b7e1e2dfa606ea26dcf6e820cec3);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_6_peek);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_7_topIsLayout(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_dedda129c398d61b49fc9f812c597527;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_dedda129c398d61b49fc9f812c597527 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_dedda129c398d61b49fc9f812c597527, codeobj_dedda129c398d61b49fc9f812c597527, module_PyQt5$uic$uiparser, sizeof(void *));
    frame_dedda129c398d61b49fc9f812c597527 = cache_frame_dedda129c398d61b49fc9f812c597527;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_dedda129c398d61b49fc9f812c597527);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_dedda129c398d61b49fc9f812c597527) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT(par_self);
        tmp_subscribed_name_1 = par_self;
        tmp_subscript_name_1 = const_int_neg_1;
        tmp_isinstance_inst_1 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, -1);
        if (tmp_isinstance_inst_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 137;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_1 == NULL) {
            Py_DECREF(tmp_isinstance_inst_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 137;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_QLayout);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_1);

            exception_lineno = 137;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_inst_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 137;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = (tmp_res != 0) ? Py_True : Py_False;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_dedda129c398d61b49fc9f812c597527);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_dedda129c398d61b49fc9f812c597527);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_dedda129c398d61b49fc9f812c597527);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_dedda129c398d61b49fc9f812c597527, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_dedda129c398d61b49fc9f812c597527->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_dedda129c398d61b49fc9f812c597527, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dedda129c398d61b49fc9f812c597527,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if (frame_dedda129c398d61b49fc9f812c597527 == cache_frame_dedda129c398d61b49fc9f812c597527) {
        Py_DECREF(frame_dedda129c398d61b49fc9f812c597527);
    }
    cache_frame_dedda129c398d61b49fc9f812c597527 = NULL;

    assertFrameObject(frame_dedda129c398d61b49fc9f812c597527);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_7_topIsLayout);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_8_topIsLayoutWidget(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *var_parent = NULL;
    struct Nuitka_FrameObject *frame_f5e7d4f2fe69bf69eec68dbd469a1407;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_f5e7d4f2fe69bf69eec68dbd469a1407 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_f5e7d4f2fe69bf69eec68dbd469a1407, codeobj_f5e7d4f2fe69bf69eec68dbd469a1407, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *));
    frame_f5e7d4f2fe69bf69eec68dbd469a1407 = cache_frame_f5e7d4f2fe69bf69eec68dbd469a1407;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f5e7d4f2fe69bf69eec68dbd469a1407);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f5e7d4f2fe69bf69eec68dbd469a1407) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT(par_self);
        tmp_subscribed_name_1 = par_self;
        tmp_subscript_name_1 = const_int_neg_1;
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, -1);
        if (tmp_type_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_left_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_1 == NULL) {
            Py_DECREF(tmp_compexpr_left_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 145;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_QWidget);
        if (tmp_compexpr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_1);

            exception_lineno = 145;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_compexpr_left_1 != tmp_compexpr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_compexpr_left_1);
        Py_DECREF(tmp_compexpr_right_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_False;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(par_self);
        tmp_len_arg_1 = par_self;
        tmp_compexpr_left_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 148;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_int_pos_2;
        tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        assert(!(tmp_res == -1));
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        tmp_return_value = Py_False;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT(par_self);
        tmp_subscribed_name_2 = par_self;
        tmp_subscript_name_2 = const_int_neg_2;
        tmp_assign_source_1 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, -2);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 151;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert(var_parent == NULL);
        var_parent = tmp_assign_source_1;
    }
    {
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_type_arg_2;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_source_name_8;
        PyObject *tmp_mvar_value_8;
        PyObject *tmp_source_name_9;
        PyObject *tmp_mvar_value_9;
        PyObject *tmp_source_name_10;
        PyObject *tmp_mvar_value_10;
        CHECK_OBJECT(var_parent);
        tmp_isinstance_inst_1 = var_parent;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 153;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_QWidget);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 153;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 153;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_and_left_truth_1 = CHECK_IF_TRUE(tmp_and_left_value_1);
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 153;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_parent);
        tmp_type_arg_2 = var_parent;
        tmp_compexpr_left_3 = BUILTIN_TYPE1(tmp_type_arg_2);
        assert(!(tmp_compexpr_left_3 == NULL));
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_3 == NULL) {
            Py_DECREF(tmp_compexpr_left_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 154;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_3;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_QMainWindow);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_3);

            exception_lineno = 154;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = PyTuple_New(8);
        PyTuple_SET_ITEM(tmp_compexpr_right_3, 0, tmp_tuple_element_1);
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_4 == NULL) {
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 155;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_4;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_QStackedWidget);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);

            exception_lineno = 155;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_compexpr_right_3, 1, tmp_tuple_element_1);
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_5 == NULL) {
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 156;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_5 = tmp_mvar_value_5;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_QToolBox);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);

            exception_lineno = 156;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_compexpr_right_3, 2, tmp_tuple_element_1);
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_6 == NULL) {
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 157;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_6;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_QTabWidget);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);

            exception_lineno = 157;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_compexpr_right_3, 3, tmp_tuple_element_1);
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_7 == NULL) {
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 158;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_7 = tmp_mvar_value_7;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_QScrollArea);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);

            exception_lineno = 158;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_compexpr_right_3, 4, tmp_tuple_element_1);
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_8 == NULL)) {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_8 == NULL) {
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 159;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_8 = tmp_mvar_value_8;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_QMdiArea);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);

            exception_lineno = 159;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_compexpr_right_3, 5, tmp_tuple_element_1);
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_9 == NULL)) {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_9 == NULL) {
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 160;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_9 = tmp_mvar_value_9;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_QWizard);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);

            exception_lineno = 160;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_compexpr_right_3, 6, tmp_tuple_element_1);
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_10 == NULL)) {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_10 == NULL) {
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 161;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_10 = tmp_mvar_value_10;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_QDockWidget);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_3);
            Py_DECREF(tmp_compexpr_right_3);

            exception_lineno = 161;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_compexpr_right_3, 7, tmp_tuple_element_1);
        tmp_res = PySequence_Contains(tmp_compexpr_right_3, tmp_compexpr_left_3);
        Py_DECREF(tmp_compexpr_left_3);
        Py_DECREF(tmp_compexpr_right_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 153;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 0) ? Py_True : Py_False;
        tmp_return_value = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_return_value = tmp_and_left_value_1;
        and_end_1:;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f5e7d4f2fe69bf69eec68dbd469a1407);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_f5e7d4f2fe69bf69eec68dbd469a1407);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f5e7d4f2fe69bf69eec68dbd469a1407);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f5e7d4f2fe69bf69eec68dbd469a1407, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_f5e7d4f2fe69bf69eec68dbd469a1407->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f5e7d4f2fe69bf69eec68dbd469a1407, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f5e7d4f2fe69bf69eec68dbd469a1407,
        type_description_1,
        par_self,
        var_parent
    );


    // Release cached frame.
    if (frame_f5e7d4f2fe69bf69eec68dbd469a1407 == cache_frame_f5e7d4f2fe69bf69eec68dbd469a1407) {
        Py_DECREF(frame_f5e7d4f2fe69bf69eec68dbd469a1407);
    }
    cache_frame_f5e7d4f2fe69bf69eec68dbd469a1407 = NULL;

    assertFrameObject(frame_f5e7d4f2fe69bf69eec68dbd469a1407);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_8_topIsLayoutWidget);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_parent);
    var_parent = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_parent);
    var_parent = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_8_topIsLayoutWidget);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_9___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_8a20804ebe99308633c3bf13541596ad;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8a20804ebe99308633c3bf13541596ad = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_8a20804ebe99308633c3bf13541596ad, codeobj_8a20804ebe99308633c3bf13541596ad, module_PyQt5$uic$uiparser, sizeof(void *));
    frame_8a20804ebe99308633c3bf13541596ad = cache_frame_8a20804ebe99308633c3bf13541596ad;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_8a20804ebe99308633c3bf13541596ad);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_8a20804ebe99308633c3bf13541596ad) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = Py_True;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_exclusive, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 171;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_object, tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 172;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8a20804ebe99308633c3bf13541596ad);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8a20804ebe99308633c3bf13541596ad);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8a20804ebe99308633c3bf13541596ad, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_8a20804ebe99308633c3bf13541596ad->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8a20804ebe99308633c3bf13541596ad, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8a20804ebe99308633c3bf13541596ad,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if (frame_8a20804ebe99308633c3bf13541596ad == cache_frame_8a20804ebe99308633c3bf13541596ad) {
        Py_DECREF(frame_8a20804ebe99308633c3bf13541596ad);
    }
    cache_frame_8a20804ebe99308633c3bf13541596ad = NULL;

    assertFrameObject(frame_8a20804ebe99308633c3bf13541596ad);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_9___init__);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_10___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_qtcore_module = python_pars[1];
    PyObject *par_qtgui_module = python_pars[2];
    PyObject *par_qtwidgets_module = python_pars[3];
    PyObject *par_creatorPolicy = python_pars[4];
    struct Nuitka_FrameObject *frame_a5d6da18d4fc5a14ca108bf54b48231e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_a5d6da18d4fc5a14ca108bf54b48231e = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_a5d6da18d4fc5a14ca108bf54b48231e, codeobj_a5d6da18d4fc5a14ca108bf54b48231e, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_a5d6da18d4fc5a14ca108bf54b48231e = cache_frame_a5d6da18d4fc5a14ca108bf54b48231e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a5d6da18d4fc5a14ca108bf54b48231e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a5d6da18d4fc5a14ca108bf54b48231e) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QObjectCreator);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QObjectCreator);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 3324 ], 36, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 177;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_creatorPolicy);
        tmp_args_element_name_1 = par_creatorPolicy;
        frame_a5d6da18d4fc5a14ca108bf54b48231e->m_frame.f_lineno = 177;
        tmp_assattr_name_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_assattr_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_factory, tmp_assattr_name_1);
        Py_DECREF(tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_assattr_target_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_Properties);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_Properties);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 3360 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 178;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_factory);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 178;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_qtcore_module);
        tmp_args_element_name_3 = par_qtcore_module;
        CHECK_OBJECT(par_qtgui_module);
        tmp_args_element_name_4 = par_qtgui_module;
        CHECK_OBJECT(par_qtwidgets_module);
        tmp_args_element_name_5 = par_qtwidgets_module;
        frame_a5d6da18d4fc5a14ca108bf54b48231e->m_frame.f_lineno = 178;
        {
            PyObject *call_args[] = {tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5};
            tmp_assattr_name_2 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_2, call_args);
        }

        Py_DECREF(tmp_args_element_name_2);
        if (tmp_assattr_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 178;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_wprops, tmp_assattr_name_2);
        Py_DECREF(tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 178;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(par_qtcore_module);
        tmp_assign_source_1 = par_qtcore_module;
        UPDATE_STRING_DICT0(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtCore, tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(par_qtwidgets_module);
        tmp_assign_source_2 = par_qtwidgets_module;
        UPDATE_STRING_DICT0(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets, tmp_assign_source_2);
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        frame_a5d6da18d4fc5a14ca108bf54b48231e->m_frame.f_lineno = 185;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_reset);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a5d6da18d4fc5a14ca108bf54b48231e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a5d6da18d4fc5a14ca108bf54b48231e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a5d6da18d4fc5a14ca108bf54b48231e, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_a5d6da18d4fc5a14ca108bf54b48231e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a5d6da18d4fc5a14ca108bf54b48231e, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a5d6da18d4fc5a14ca108bf54b48231e,
        type_description_1,
        par_self,
        par_qtcore_module,
        par_qtgui_module,
        par_qtwidgets_module,
        par_creatorPolicy
    );


    // Release cached frame.
    if (frame_a5d6da18d4fc5a14ca108bf54b48231e == cache_frame_a5d6da18d4fc5a14ca108bf54b48231e) {
        Py_DECREF(frame_a5d6da18d4fc5a14ca108bf54b48231e);
    }
    cache_frame_a5d6da18d4fc5a14ca108bf54b48231e = NULL;

    assertFrameObject(frame_a5d6da18d4fc5a14ca108bf54b48231e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_10___init__);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_qtcore_module);
    Py_DECREF(par_qtcore_module);
    CHECK_OBJECT(par_qtgui_module);
    Py_DECREF(par_qtgui_module);
    CHECK_OBJECT(par_qtwidgets_module);
    Py_DECREF(par_qtwidgets_module);
    CHECK_OBJECT(par_creatorPolicy);
    Py_DECREF(par_creatorPolicy);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_qtcore_module);
    Py_DECREF(par_qtcore_module);
    CHECK_OBJECT(par_qtgui_module);
    Py_DECREF(par_qtgui_module);
    CHECK_OBJECT(par_qtwidgets_module);
    Py_DECREF(par_qtwidgets_module);
    CHECK_OBJECT(par_creatorPolicy);
    Py_DECREF(par_creatorPolicy);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_11_uniqueName(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_name = python_pars[1];
    PyObject *var_suffix = NULL;
    struct Nuitka_FrameObject *frame_5ea471e84fc54c527294bdca9d0d752a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_5ea471e84fc54c527294bdca9d0d752a = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_5ea471e84fc54c527294bdca9d0d752a, codeobj_5ea471e84fc54c527294bdca9d0d752a, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_5ea471e84fc54c527294bdca9d0d752a = cache_frame_5ea471e84fc54c527294bdca9d0d752a;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5ea471e84fc54c527294bdca9d0d752a);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5ea471e84fc54c527294bdca9d0d752a) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_name_suffixes);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_name);
        tmp_subscript_name_1 = par_name;
        tmp_assign_source_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        assert(var_suffix == NULL);
        var_suffix = tmp_assign_source_1;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_type_1);
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_value_1);
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF(exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_5ea471e84fc54c527294bdca9d0d752a, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_5ea471e84fc54c527294bdca9d0d752a, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    PyException_SetTraceback(exception_keeper_value_1, (PyObject *)exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_KeyError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 199;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_ass_subscript_1;
            tmp_ass_subvalue_1 = const_int_0;
            CHECK_OBJECT(par_self);
            tmp_source_name_2 = par_self;
            tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_name_suffixes);
            if (tmp_ass_subscribed_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 200;
                type_description_1 = "ooo";
                goto try_except_handler_3;
            }
            CHECK_OBJECT(par_name);
            tmp_ass_subscript_1 = par_name;
            tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
            Py_DECREF(tmp_ass_subscribed_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 200;
                type_description_1 = "ooo";
                goto try_except_handler_3;
            }
        }
        CHECK_OBJECT(par_name);
        tmp_return_value = par_name;
        Py_INCREF(tmp_return_value);
        goto try_return_handler_3;
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        if (unlikely(tmp_result == false)) {
            exception_lineno = 197;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_5ea471e84fc54c527294bdca9d0d752a->m_frame) frame_5ea471e84fc54c527294bdca9d0d752a->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooo";
        goto try_except_handler_3;
        branch_end_1:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_11_uniqueName);
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT(var_suffix);
        tmp_left_name_1 = var_suffix;
        tmp_right_name_1 = const_int_pos_1;
        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_name_1, tmp_right_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 203;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = tmp_left_name_1;
        var_suffix = tmp_assign_source_2;

    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_ass_subscript_2;
        CHECK_OBJECT(var_suffix);
        tmp_ass_subvalue_2 = var_suffix;
        CHECK_OBJECT(par_self);
        tmp_source_name_3 = par_self;
        tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_name_suffixes);
        if (tmp_ass_subscribed_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 204;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_name);
        tmp_ass_subscript_2 = par_name;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        Py_DECREF(tmp_ass_subscribed_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 204;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_tuple_element_1;
        tmp_left_name_2 = const_str_digest_90b8f10f9305c30aebe0115117ce89fd;
        CHECK_OBJECT(par_name);
        tmp_tuple_element_1 = par_name;
        tmp_right_name_2 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_right_name_2, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_suffix);
        tmp_tuple_element_1 = var_suffix;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_right_name_2, 1, tmp_tuple_element_1);
        tmp_return_value = BINARY_OPERATION_MOD_UNICODE_TUPLE(tmp_left_name_2, tmp_right_name_2);
        Py_DECREF(tmp_right_name_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5ea471e84fc54c527294bdca9d0d752a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_5ea471e84fc54c527294bdca9d0d752a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5ea471e84fc54c527294bdca9d0d752a);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5ea471e84fc54c527294bdca9d0d752a, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_5ea471e84fc54c527294bdca9d0d752a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5ea471e84fc54c527294bdca9d0d752a, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5ea471e84fc54c527294bdca9d0d752a,
        type_description_1,
        par_self,
        par_name,
        var_suffix
    );


    // Release cached frame.
    if (frame_5ea471e84fc54c527294bdca9d0d752a == cache_frame_5ea471e84fc54c527294bdca9d0d752a) {
        Py_DECREF(frame_5ea471e84fc54c527294bdca9d0d752a);
    }
    cache_frame_5ea471e84fc54c527294bdca9d0d752a = NULL;

    assertFrameObject(frame_5ea471e84fc54c527294bdca9d0d752a);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_11_uniqueName);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_suffix);
    var_suffix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_suffix);
    var_suffix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_11_uniqueName);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_12_reset(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_67278f08fcfa8f9c8fa60b897cd17658;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_67278f08fcfa8f9c8fa60b897cd17658 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_67278f08fcfa8f9c8fa60b897cd17658, codeobj_67278f08fcfa8f9c8fa60b897cd17658, module_PyQt5$uic$uiparser, sizeof(void *));
    frame_67278f08fcfa8f9c8fa60b897cd17658 = cache_frame_67278f08fcfa8f9c8fa60b897cd17658;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_67278f08fcfa8f9c8fa60b897cd17658);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_67278f08fcfa8f9c8fa60b897cd17658) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_wprops);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 209;
            type_description_1 = "o";
            goto try_except_handler_1;
        }
        frame_67278f08fcfa8f9c8fa60b897cd17658->m_frame.f_lineno = 209;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_reset);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 209;
            type_description_1 = "o";
            goto try_except_handler_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_type_1);
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_value_1);
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF(exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_67278f08fcfa8f9c8fa60b897cd17658, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_67278f08fcfa8f9c8fa60b897cd17658, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    PyException_SetTraceback(exception_keeper_value_1, (PyObject *)exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_AttributeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;
            type_description_1 = "o";
            goto try_except_handler_2;
        }
        tmp_operand_name_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;
            type_description_1 = "o";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        if (unlikely(tmp_result == false)) {
            exception_lineno = 209;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_67278f08fcfa8f9c8fa60b897cd17658->m_frame) frame_67278f08fcfa8f9c8fa60b897cd17658->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "o";
        goto try_except_handler_2;
        branch_no_1:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_12_reset);
    return NULL;
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_toplevelWidget, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_assattr_target_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_WidgetStack);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_WidgetStack);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 3392 ], 33, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 212;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_67278f08fcfa8f9c8fa60b897cd17658->m_frame.f_lineno = 212;
        tmp_assattr_name_2 = CALL_FUNCTION_NO_ARGS(tmp_called_name_1);
        if (tmp_assattr_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 212;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_stack, tmp_assattr_name_2);
        Py_DECREF(tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 212;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = PyDict_New();
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_name_suffixes, tmp_assattr_name_3);
        Py_DECREF(tmp_assattr_name_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 213;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_name_4 = PyDict_Copy(const_dict_c4936adada434d6aeb6575d30ce7e76f);
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, const_str_plain_defaults, tmp_assattr_name_4);
        Py_DECREF(tmp_assattr_name_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 214;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_name_5 = PyList_New(0);
        CHECK_OBJECT(par_self);
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, const_str_plain_actions, tmp_assattr_name_5);
        Py_DECREF(tmp_assattr_name_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_assattr_target_6;
        tmp_assattr_name_6 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, const_str_plain_currentActionGroup, tmp_assattr_name_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_7;
        PyObject *tmp_assattr_target_7;
        tmp_assattr_name_7 = PyList_New(0);
        CHECK_OBJECT(par_self);
        tmp_assattr_target_7 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_7, const_str_plain_resources, tmp_assattr_name_7);
        Py_DECREF(tmp_assattr_name_7);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 217;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_8;
        PyObject *tmp_assattr_target_8;
        tmp_assattr_name_8 = PyDict_New();
        CHECK_OBJECT(par_self);
        tmp_assattr_target_8 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_8, const_str_plain_button_groups, tmp_assattr_name_8);
        Py_DECREF(tmp_assattr_name_8);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 218;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_67278f08fcfa8f9c8fa60b897cd17658);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_67278f08fcfa8f9c8fa60b897cd17658);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_67278f08fcfa8f9c8fa60b897cd17658, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_67278f08fcfa8f9c8fa60b897cd17658->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_67278f08fcfa8f9c8fa60b897cd17658, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_67278f08fcfa8f9c8fa60b897cd17658,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if (frame_67278f08fcfa8f9c8fa60b897cd17658 == cache_frame_67278f08fcfa8f9c8fa60b897cd17658) {
        Py_DECREF(frame_67278f08fcfa8f9c8fa60b897cd17658);
    }
    cache_frame_67278f08fcfa8f9c8fa60b897cd17658 = NULL;

    assertFrameObject(frame_67278f08fcfa8f9c8fa60b897cd17658);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_12_reset);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_13_setupObject(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_clsname = python_pars[1];
    PyObject *par_parent = python_pars[2];
    PyObject *par_branch = python_pars[3];
    PyObject *par_is_attribute = python_pars[4];
    PyObject *var_name = NULL;
    PyObject *var_args = NULL;
    PyObject *var_obj = NULL;
    struct Nuitka_FrameObject *frame_9c090c292524cf6edb0bcbeab7a68c03;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9c090c292524cf6edb0bcbeab7a68c03 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_9c090c292524cf6edb0bcbeab7a68c03, codeobj_9c090c292524cf6edb0bcbeab7a68c03, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_9c090c292524cf6edb0bcbeab7a68c03 = cache_frame_9c090c292524cf6edb0bcbeab7a68c03;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9c090c292524cf6edb0bcbeab7a68c03);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9c090c292524cf6edb0bcbeab7a68c03) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_uniqueName);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_branch);
        tmp_source_name_2 = par_branch;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_attrib);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 221;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        frame_9c090c292524cf6edb0bcbeab7a68c03->m_frame.f_lineno = 221;
        tmp_or_left_value_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_get, &PyTuple_GET_ITEM(const_tuple_str_plain_name_tuple, 0));

        Py_DECREF(tmp_called_instance_1);
        if (tmp_or_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 221;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 221;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        CHECK_OBJECT(par_clsname);
        tmp_subscribed_name_1 = par_clsname;
        tmp_subscript_name_1 = const_slice_int_pos_1_none_none;
        tmp_called_instance_2 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 221;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        frame_9c090c292524cf6edb0bcbeab7a68c03->m_frame.f_lineno = 221;
        tmp_or_right_value_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_lower);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_or_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 221;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_args_element_name_1 = tmp_or_left_value_1;
        or_end_1:;
        frame_9c090c292524cf6edb0bcbeab7a68c03->m_frame.f_lineno = 221;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_name == NULL);
        var_name = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(par_parent);
        tmp_compexpr_left_1 = par_parent;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 == tmp_compexpr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = const_tuple_empty;
            assert(var_args == NULL);
            Py_INCREF(tmp_assign_source_2);
            var_args = tmp_assign_source_2;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT(par_parent);
            tmp_tuple_element_1 = par_parent;
            tmp_assign_source_3 = PyTuple_New(1);
            Py_INCREF(tmp_tuple_element_1);
            PyTuple_SET_ITEM(tmp_assign_source_3, 0, tmp_tuple_element_1);
            assert(var_args == NULL);
            var_args = tmp_assign_source_3;
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        CHECK_OBJECT(par_self);
        tmp_source_name_3 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_factory);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 228;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_clsname);
        tmp_args_element_name_2 = par_clsname;
        CHECK_OBJECT(var_name);
        tmp_args_element_name_3 = var_name;
        CHECK_OBJECT(var_args);
        tmp_args_element_name_4 = var_args;
        CHECK_OBJECT(par_is_attribute);
        tmp_args_element_name_5 = par_is_attribute;
        frame_9c090c292524cf6edb0bcbeab7a68c03->m_frame.f_lineno = 228;
        {
            PyObject *call_args[] = {tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5};
            tmp_assign_source_4 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_3, const_str_plain_createQObject, call_args);
        }

        Py_DECREF(tmp_called_instance_3);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 228;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_obj == NULL);
        var_obj = tmp_assign_source_4;
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_source_name_4;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_args_element_name_7;
        CHECK_OBJECT(par_self);
        tmp_source_name_4 = par_self;
        tmp_called_instance_4 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_wprops);
        if (tmp_called_instance_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 230;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_obj);
        tmp_args_element_name_6 = var_obj;
        CHECK_OBJECT(par_branch);
        tmp_args_element_name_7 = par_branch;
        frame_9c090c292524cf6edb0bcbeab7a68c03->m_frame.f_lineno = 230;
        {
            PyObject *call_args[] = {tmp_args_element_name_6, tmp_args_element_name_7};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_4, const_str_plain_setProperties, call_args);
        }

        Py_DECREF(tmp_called_instance_4);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 230;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_8;
        CHECK_OBJECT(var_obj);
        tmp_called_instance_5 = var_obj;
        CHECK_OBJECT(var_name);
        tmp_args_element_name_8 = var_name;
        frame_9c090c292524cf6edb0bcbeab7a68c03->m_frame.f_lineno = 231;
        {
            PyObject *call_args[] = {tmp_args_element_name_8};
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_setObjectName, call_args);
        }

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_is_attribute);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_is_attribute);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_setattr_target_1;
            PyObject *tmp_source_name_5;
            PyObject *tmp_setattr_attr_1;
            PyObject *tmp_setattr_value_1;
            PyObject *tmp_capi_result_1;
            CHECK_OBJECT(par_self);
            tmp_source_name_5 = par_self;
            tmp_setattr_target_1 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_toplevelWidget);
            if (tmp_setattr_target_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 234;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(var_name);
            tmp_setattr_attr_1 = var_name;
            CHECK_OBJECT(var_obj);
            tmp_setattr_value_1 = var_obj;
            tmp_capi_result_1 = BUILTIN_SETATTR(tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1);
            Py_DECREF(tmp_setattr_target_1);
            if (tmp_capi_result_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 234;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_2:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9c090c292524cf6edb0bcbeab7a68c03);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9c090c292524cf6edb0bcbeab7a68c03);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9c090c292524cf6edb0bcbeab7a68c03, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_9c090c292524cf6edb0bcbeab7a68c03->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9c090c292524cf6edb0bcbeab7a68c03, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9c090c292524cf6edb0bcbeab7a68c03,
        type_description_1,
        par_self,
        par_clsname,
        par_parent,
        par_branch,
        par_is_attribute,
        var_name,
        var_args,
        var_obj
    );


    // Release cached frame.
    if (frame_9c090c292524cf6edb0bcbeab7a68c03 == cache_frame_9c090c292524cf6edb0bcbeab7a68c03) {
        Py_DECREF(frame_9c090c292524cf6edb0bcbeab7a68c03);
    }
    cache_frame_9c090c292524cf6edb0bcbeab7a68c03 = NULL;

    assertFrameObject(frame_9c090c292524cf6edb0bcbeab7a68c03);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_obj);
    tmp_return_value = var_obj;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_13_setupObject);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_name);
    Py_DECREF(var_name);
    var_name = NULL;

    CHECK_OBJECT((PyObject *)var_args);
    Py_DECREF(var_args);
    var_args = NULL;

    CHECK_OBJECT((PyObject *)var_obj);
    Py_DECREF(var_obj);
    var_obj = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_name);
    var_name = NULL;

    Py_XDECREF(var_args);
    var_args = NULL;

    Py_XDECREF(var_obj);
    var_obj = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_13_setupObject);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_clsname);
    Py_DECREF(par_clsname);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_branch);
    Py_DECREF(par_branch);
    CHECK_OBJECT(par_is_attribute);
    Py_DECREF(par_is_attribute);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_clsname);
    Py_DECREF(par_clsname);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_branch);
    Py_DECREF(par_branch);
    CHECK_OBJECT(par_is_attribute);
    Py_DECREF(par_is_attribute);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_14_getProperty(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *var_prop = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_d5e8b84fe6eaf081c076b23dd780c667;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_d5e8b84fe6eaf081c076b23dd780c667 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_d5e8b84fe6eaf081c076b23dd780c667, codeobj_d5e8b84fe6eaf081c076b23dd780c667, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_d5e8b84fe6eaf081c076b23dd780c667 = cache_frame_d5e8b84fe6eaf081c076b23dd780c667;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d5e8b84fe6eaf081c076b23dd780c667);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d5e8b84fe6eaf081c076b23dd780c667) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_elem);
        tmp_called_instance_1 = par_elem;
        frame_d5e8b84fe6eaf081c076b23dd780c667->m_frame.f_lineno = 239;
        tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_findall, &PyTuple_GET_ITEM(const_tuple_str_plain_property_tuple, 0));

        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 239;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 239;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_2 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooo";
                exception_lineno = 239;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_prop;
            var_prop = tmp_assign_source_3;
            Py_INCREF(var_prop);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(var_prop);
        tmp_source_name_1 = var_prop;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_attrib);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        tmp_subscript_name_1 = const_str_plain_name;
        tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_name);
        tmp_compexpr_right_1 = par_name;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT(var_prop);
        tmp_return_value = var_prop;
        Py_INCREF(tmp_return_value);
        goto try_return_handler_2;
        branch_no_1:;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 239;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT((PyObject *)tmp_for_loop_1__iter_value);
    Py_DECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d5e8b84fe6eaf081c076b23dd780c667);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d5e8b84fe6eaf081c076b23dd780c667);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d5e8b84fe6eaf081c076b23dd780c667);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d5e8b84fe6eaf081c076b23dd780c667, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_d5e8b84fe6eaf081c076b23dd780c667->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d5e8b84fe6eaf081c076b23dd780c667, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d5e8b84fe6eaf081c076b23dd780c667,
        type_description_1,
        par_self,
        par_elem,
        par_name,
        var_prop
    );


    // Release cached frame.
    if (frame_d5e8b84fe6eaf081c076b23dd780c667 == cache_frame_d5e8b84fe6eaf081c076b23dd780c667) {
        Py_DECREF(frame_d5e8b84fe6eaf081c076b23dd780c667);
    }
    cache_frame_d5e8b84fe6eaf081c076b23dd780c667 = NULL;

    assertFrameObject(frame_d5e8b84fe6eaf081c076b23dd780c667);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_14_getProperty);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_prop);
    var_prop = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_prop);
    var_prop = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_14_getProperty);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_15_createWidget(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_widget_class = NULL;
    PyObject *var_parent = NULL;
    PyObject *var_widget = NULL;
    PyObject *var_bg_i18n = NULL;
    PyObject *var_bg_name = NULL;
    PyObject *var_bg = NULL;
    PyObject *var_lay = NULL;
    PyObject *var_lp = NULL;
    PyObject *var_topwidget = NULL;
    PyObject *var_icon = NULL;
    PyObject *var_tooltip = NULL;
    PyObject *var_tbArea = NULL;
    PyObject *var_tbBreak = NULL;
    PyObject *var_dwArea = NULL;
    PyObject *tmp_assign_unpack_1__assign_source = NULL;
    struct Nuitka_FrameObject *frame_2debc51c32a41ce980416edeb6da9de2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_2debc51c32a41ce980416edeb6da9de2 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_2debc51c32a41ce980416edeb6da9de2, codeobj_2debc51c32a41ce980416edeb6da9de2, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_2debc51c32a41ce980416edeb6da9de2 = cache_frame_2debc51c32a41ce980416edeb6da9de2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2debc51c32a41ce980416edeb6da9de2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2debc51c32a41ce980416edeb6da9de2) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = const_int_0;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_column_counter, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 246;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = const_int_0;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_row_counter, tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 247;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = const_int_0;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_item_nr, tmp_assattr_name_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 248;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_name_4 = PyList_New(0);
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, const_str_plain_itemstack, tmp_assattr_name_4);
        Py_DECREF(tmp_assattr_name_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_name_5 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, const_str_plain_sorting_enabled, tmp_assattr_name_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 250;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_elem);
        tmp_source_name_1 = par_elem;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_attrib);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_str_plain_class;
        tmp_called_instance_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 252;
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM(const_tuple_str_digest_ebebb18731664a12452b2ba6915b22ed_str_dot_tuple, 0));

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_widget_class == NULL);
        var_widget_class = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(var_widget_class);
        tmp_compexpr_left_1 = var_widget_class;
        tmp_compexpr_right_1 = const_str_plain_Line;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = const_str_plain_QFrame;
            {
                PyObject *old = var_widget_class;
                assert(old != NULL);
                var_widget_class = tmp_assign_source_2;
                Py_INCREF(var_widget_class);
                Py_DECREF(old);
            }

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT(par_self);
        tmp_source_name_3 = par_self;
        tmp_source_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_stack);
        if (tmp_source_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 257;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_topwidget);
        Py_DECREF(tmp_source_name_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 257;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_parent == NULL);
        var_parent = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_source_name_8;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_source_name_9;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_source_name_10;
        PyObject *tmp_mvar_value_7;
        CHECK_OBJECT(var_parent);
        tmp_isinstance_inst_1 = var_parent;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 258;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_1;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_QDockWidget);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 258;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = PyTuple_New(7);
        PyTuple_SET_ITEM(tmp_isinstance_cls_1, 0, tmp_tuple_element_1);
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_isinstance_cls_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 258;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_5 = tmp_mvar_value_2;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_QMdiArea);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_cls_1);

            exception_lineno = 258;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_isinstance_cls_1, 1, tmp_tuple_element_1);
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_3 == NULL) {
            Py_DECREF(tmp_isinstance_cls_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 259;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_3;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_QScrollArea);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_cls_1);

            exception_lineno = 259;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_isinstance_cls_1, 2, tmp_tuple_element_1);
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_4 == NULL) {
            Py_DECREF(tmp_isinstance_cls_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 259;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_7 = tmp_mvar_value_4;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_QStackedWidget);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_cls_1);

            exception_lineno = 259;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_isinstance_cls_1, 3, tmp_tuple_element_1);
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_5 == NULL) {
            Py_DECREF(tmp_isinstance_cls_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 260;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_8 = tmp_mvar_value_5;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_QToolBox);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_cls_1);

            exception_lineno = 260;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_isinstance_cls_1, 4, tmp_tuple_element_1);
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_6 == NULL) {
            Py_DECREF(tmp_isinstance_cls_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 260;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_9 = tmp_mvar_value_6;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_QTabWidget);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_cls_1);

            exception_lineno = 260;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_isinstance_cls_1, 5, tmp_tuple_element_1);
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_7 == NULL) {
            Py_DECREF(tmp_isinstance_cls_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 261;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_10 = tmp_mvar_value_7;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_QWizard);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_cls_1);

            exception_lineno = 261;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_isinstance_cls_1, 6, tmp_tuple_element_1);
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 258;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_4;
            tmp_assign_source_4 = Py_None;
            {
                PyObject *old = var_parent;
                assert(old != NULL);
                var_parent = tmp_assign_source_4;
                Py_INCREF(var_parent);
                Py_DECREF(old);
            }

        }
        branch_no_2:;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_11;
        PyObject *tmp_source_name_12;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT(par_self);
        tmp_source_name_12 = par_self;
        tmp_source_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_stack);
        if (tmp_source_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 264;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_push);
        Py_DECREF(tmp_source_name_11);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 264;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT(var_widget_class);
        tmp_args_element_name_2 = var_widget_class;
        CHECK_OBJECT(var_parent);
        tmp_args_element_name_3 = var_parent;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_4 = par_elem;
        frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 264;
        {
            PyObject *call_args[] = {tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4};
            tmp_args_element_name_1 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_2, const_str_plain_setupObject, call_args);
        }

        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 264;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 264;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 264;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        PyObject *tmp_source_name_13;
        PyObject *tmp_source_name_14;
        PyObject *tmp_source_name_15;
        PyObject *tmp_mvar_value_8;
        CHECK_OBJECT(par_self);
        tmp_source_name_14 = par_self;
        tmp_source_name_13 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_stack);
        if (tmp_source_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_inst_2 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_topwidget);
        Py_DECREF(tmp_source_name_13);
        if (tmp_isinstance_inst_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_8 == NULL)) {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_8 == NULL) {
            Py_DECREF(tmp_isinstance_inst_2);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 266;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_15 = tmp_mvar_value_8;
        tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_QTableWidget);
        if (tmp_isinstance_cls_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_2);

            exception_lineno = 266;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        Py_DECREF(tmp_isinstance_inst_2);
        Py_DECREF(tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_called_instance_3;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_args_element_name_6;
            CHECK_OBJECT(par_self);
            tmp_called_instance_3 = par_self;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_5 = par_elem;
            tmp_args_element_name_6 = const_str_plain_columnCount;
            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 267;
            {
                PyObject *call_args[] = {tmp_args_element_name_5, tmp_args_element_name_6};
                tmp_compexpr_left_2 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_3, const_str_plain_getProperty, call_args);
            }

            if (tmp_compexpr_left_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 267;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_2 = Py_None;
            tmp_condition_result_4 = (tmp_compexpr_left_2 == tmp_compexpr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF(tmp_compexpr_left_2);
            if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_name_2;
                PyObject *tmp_source_name_16;
                PyObject *tmp_source_name_17;
                PyObject *tmp_source_name_18;
                PyObject *tmp_call_result_2;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_len_arg_1;
                PyObject *tmp_called_instance_4;
                CHECK_OBJECT(par_self);
                tmp_source_name_18 = par_self;
                tmp_source_name_17 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_stack);
                if (tmp_source_name_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 268;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_source_name_16 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_topwidget);
                Py_DECREF(tmp_source_name_17);
                if (tmp_source_name_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 268;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_setColumnCount);
                Py_DECREF(tmp_source_name_16);
                if (tmp_called_name_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 268;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_elem);
                tmp_called_instance_4 = par_elem;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 268;
                tmp_len_arg_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_findall, &PyTuple_GET_ITEM(const_tuple_str_plain_column_tuple, 0));

                if (tmp_len_arg_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_2);

                    exception_lineno = 268;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_7 = BUILTIN_LEN(tmp_len_arg_1);
                Py_DECREF(tmp_len_arg_1);
                if (tmp_args_element_name_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_2);

                    exception_lineno = 268;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 268;
                tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_7);
                Py_DECREF(tmp_called_name_2);
                Py_DECREF(tmp_args_element_name_7);
                if (tmp_call_result_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 268;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_2);
            }
            branch_no_4:;
        }
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_args_element_name_8;
            PyObject *tmp_args_element_name_9;
            CHECK_OBJECT(par_self);
            tmp_called_instance_5 = par_self;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_8 = par_elem;
            tmp_args_element_name_9 = const_str_plain_rowCount;
            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 270;
            {
                PyObject *call_args[] = {tmp_args_element_name_8, tmp_args_element_name_9};
                tmp_compexpr_left_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_5, const_str_plain_getProperty, call_args);
            }

            if (tmp_compexpr_left_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 270;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_3 = Py_None;
            tmp_condition_result_5 = (tmp_compexpr_left_3 == tmp_compexpr_right_3) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF(tmp_compexpr_left_3);
            if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
                goto branch_yes_5;
            } else {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_called_name_3;
                PyObject *tmp_source_name_19;
                PyObject *tmp_source_name_20;
                PyObject *tmp_source_name_21;
                PyObject *tmp_call_result_3;
                PyObject *tmp_args_element_name_10;
                PyObject *tmp_len_arg_2;
                PyObject *tmp_called_instance_6;
                CHECK_OBJECT(par_self);
                tmp_source_name_21 = par_self;
                tmp_source_name_20 = LOOKUP_ATTRIBUTE(tmp_source_name_21, const_str_plain_stack);
                if (tmp_source_name_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 271;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_source_name_19 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_topwidget);
                Py_DECREF(tmp_source_name_20);
                if (tmp_source_name_19 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 271;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_setRowCount);
                Py_DECREF(tmp_source_name_19);
                if (tmp_called_name_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 271;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_elem);
                tmp_called_instance_6 = par_elem;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 271;
                tmp_len_arg_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_findall, &PyTuple_GET_ITEM(const_tuple_str_plain_row_tuple, 0));

                if (tmp_len_arg_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_3);

                    exception_lineno = 271;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_10 = BUILTIN_LEN(tmp_len_arg_2);
                Py_DECREF(tmp_len_arg_2);
                if (tmp_args_element_name_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_3);

                    exception_lineno = 271;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 271;
                tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_10);
                Py_DECREF(tmp_called_name_3);
                Py_DECREF(tmp_args_element_name_10);
                if (tmp_call_result_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 271;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_3);
            }
            branch_no_5:;
        }
        branch_no_3:;
    }
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_11;
        CHECK_OBJECT(par_self);
        tmp_called_instance_7 = par_self;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_11 = par_elem;
        frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 273;
        {
            PyObject *call_args[] = {tmp_args_element_name_11};
            tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_traverseWidgetTree, call_args);
        }

        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 273;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_8;
        PyObject *tmp_source_name_22;
        CHECK_OBJECT(par_self);
        tmp_source_name_22 = par_self;
        tmp_called_instance_8 = LOOKUP_ATTRIBUTE(tmp_source_name_22, const_str_plain_stack);
        if (tmp_called_instance_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 274;
        tmp_assign_source_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_8, const_str_plain_popWidget);
        Py_DECREF(tmp_called_instance_8);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_widget == NULL);
        var_widget = tmp_assign_source_5;
    }
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_isinstance_inst_3;
        PyObject *tmp_isinstance_cls_3;
        PyObject *tmp_source_name_23;
        PyObject *tmp_mvar_value_9;
        CHECK_OBJECT(var_widget);
        tmp_isinstance_inst_3 = var_widget;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_9 == NULL)) {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_9 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 276;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_23 = tmp_mvar_value_9;
        tmp_isinstance_cls_3 = LOOKUP_ATTRIBUTE(tmp_source_name_23, const_str_plain_QTreeView);
        if (tmp_isinstance_cls_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 276;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_3, tmp_isinstance_cls_3);
        Py_DECREF(tmp_isinstance_cls_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 276;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_called_name_4;
            PyObject *tmp_source_name_24;
            PyObject *tmp_call_result_5;
            PyObject *tmp_args_element_name_12;
            PyObject *tmp_args_element_name_13;
            PyObject *tmp_args_element_name_14;
            PyObject *tmp_called_instance_9;
            CHECK_OBJECT(par_self);
            tmp_source_name_24 = par_self;
            tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_24, const_str_plain_handleHeaderView);
            if (tmp_called_name_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 277;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_12 = par_elem;
            tmp_args_element_name_13 = const_str_plain_header;
            CHECK_OBJECT(var_widget);
            tmp_called_instance_9 = var_widget;
            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 277;
            tmp_args_element_name_14 = CALL_METHOD_NO_ARGS(tmp_called_instance_9, const_str_plain_header);
            if (tmp_args_element_name_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_4);

                exception_lineno = 277;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 277;
            {
                PyObject *call_args[] = {tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14};
                tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_4, call_args);
            }

            Py_DECREF(tmp_called_name_4);
            Py_DECREF(tmp_args_element_name_14);
            if (tmp_call_result_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 277;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_5);
        }
        goto branch_end_6;
        branch_no_6:;
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_isinstance_inst_4;
            PyObject *tmp_isinstance_cls_4;
            PyObject *tmp_source_name_25;
            PyObject *tmp_mvar_value_10;
            CHECK_OBJECT(var_widget);
            tmp_isinstance_inst_4 = var_widget;
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

            if (unlikely(tmp_mvar_value_10 == NULL)) {
                tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
            }

            if (tmp_mvar_value_10 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 279;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_25 = tmp_mvar_value_10;
            tmp_isinstance_cls_4 = LOOKUP_ATTRIBUTE(tmp_source_name_25, const_str_plain_QTableView);
            if (tmp_isinstance_cls_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 279;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_4, tmp_isinstance_cls_4);
            Py_DECREF(tmp_isinstance_cls_4);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 279;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_7 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
                goto branch_yes_7;
            } else {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_called_name_5;
                PyObject *tmp_source_name_26;
                PyObject *tmp_call_result_6;
                PyObject *tmp_args_element_name_15;
                PyObject *tmp_args_element_name_16;
                PyObject *tmp_args_element_name_17;
                PyObject *tmp_called_instance_10;
                CHECK_OBJECT(par_self);
                tmp_source_name_26 = par_self;
                tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_26, const_str_plain_handleHeaderView);
                if (tmp_called_name_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 280;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_elem);
                tmp_args_element_name_15 = par_elem;
                tmp_args_element_name_16 = const_str_plain_horizontalHeader;
                CHECK_OBJECT(var_widget);
                tmp_called_instance_10 = var_widget;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 281;
                tmp_args_element_name_17 = CALL_METHOD_NO_ARGS(tmp_called_instance_10, const_str_plain_horizontalHeader);
                if (tmp_args_element_name_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_5);

                    exception_lineno = 281;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 280;
                {
                    PyObject *call_args[] = {tmp_args_element_name_15, tmp_args_element_name_16, tmp_args_element_name_17};
                    tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_5, call_args);
                }

                Py_DECREF(tmp_called_name_5);
                Py_DECREF(tmp_args_element_name_17);
                if (tmp_call_result_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 280;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_6);
            }
            {
                PyObject *tmp_called_name_6;
                PyObject *tmp_source_name_27;
                PyObject *tmp_call_result_7;
                PyObject *tmp_args_element_name_18;
                PyObject *tmp_args_element_name_19;
                PyObject *tmp_args_element_name_20;
                PyObject *tmp_called_instance_11;
                CHECK_OBJECT(par_self);
                tmp_source_name_27 = par_self;
                tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_27, const_str_plain_handleHeaderView);
                if (tmp_called_name_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 282;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_elem);
                tmp_args_element_name_18 = par_elem;
                tmp_args_element_name_19 = const_str_plain_verticalHeader;
                CHECK_OBJECT(var_widget);
                tmp_called_instance_11 = var_widget;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 283;
                tmp_args_element_name_20 = CALL_METHOD_NO_ARGS(tmp_called_instance_11, const_str_plain_verticalHeader);
                if (tmp_args_element_name_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_6);

                    exception_lineno = 283;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 282;
                {
                    PyObject *call_args[] = {tmp_args_element_name_18, tmp_args_element_name_19, tmp_args_element_name_20};
                    tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_6, call_args);
                }

                Py_DECREF(tmp_called_name_6);
                Py_DECREF(tmp_args_element_name_20);
                if (tmp_call_result_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 282;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_7);
            }
            goto branch_end_7;
            branch_no_7:;
            {
                nuitka_bool tmp_condition_result_8;
                PyObject *tmp_isinstance_inst_5;
                PyObject *tmp_isinstance_cls_5;
                PyObject *tmp_source_name_28;
                PyObject *tmp_mvar_value_11;
                CHECK_OBJECT(var_widget);
                tmp_isinstance_inst_5 = var_widget;
                tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                if (unlikely(tmp_mvar_value_11 == NULL)) {
                    tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                }

                if (tmp_mvar_value_11 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 285;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_28 = tmp_mvar_value_11;
                tmp_isinstance_cls_5 = LOOKUP_ATTRIBUTE(tmp_source_name_28, const_str_plain_QAbstractButton);
                if (tmp_isinstance_cls_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 285;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_5, tmp_isinstance_cls_5);
                Py_DECREF(tmp_isinstance_cls_5);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 285;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_8 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_8;
                } else {
                    goto branch_no_8;
                }
                branch_yes_8:;
                {
                    PyObject *tmp_assign_source_6;
                    PyObject *tmp_called_instance_12;
                    PyObject *tmp_source_name_29;
                    PyObject *tmp_args_element_name_21;
                    PyObject *tmp_args_element_name_22;
                    CHECK_OBJECT(par_self);
                    tmp_source_name_29 = par_self;
                    tmp_called_instance_12 = LOOKUP_ATTRIBUTE(tmp_source_name_29, const_str_plain_wprops);
                    if (tmp_called_instance_12 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 286;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT(par_elem);
                    tmp_args_element_name_21 = par_elem;
                    tmp_args_element_name_22 = const_str_plain_buttonGroup;
                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 286;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_21, tmp_args_element_name_22};
                        tmp_assign_source_6 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_12, const_str_plain_getAttribute, call_args);
                    }

                    Py_DECREF(tmp_called_instance_12);
                    if (tmp_assign_source_6 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 286;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert(var_bg_i18n == NULL);
                    var_bg_i18n = tmp_assign_source_6;
                }
                {
                    nuitka_bool tmp_condition_result_9;
                    PyObject *tmp_compexpr_left_4;
                    PyObject *tmp_compexpr_right_4;
                    CHECK_OBJECT(var_bg_i18n);
                    tmp_compexpr_left_4 = var_bg_i18n;
                    tmp_compexpr_right_4 = Py_None;
                    tmp_condition_result_9 = (tmp_compexpr_left_4 != tmp_compexpr_right_4) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_9;
                    } else {
                        goto branch_no_9;
                    }
                    branch_yes_9:;
                    // Tried code:
                    {
                        PyObject *tmp_assign_source_7;
                        PyObject *tmp_source_name_30;
                        CHECK_OBJECT(var_bg_i18n);
                        tmp_source_name_30 = var_bg_i18n;
                        tmp_assign_source_7 = LOOKUP_ATTRIBUTE(tmp_source_name_30, const_str_plain_string);
                        if (tmp_assign_source_7 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 292;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_2;
                        }
                        assert(var_bg_name == NULL);
                        var_bg_name = tmp_assign_source_7;
                    }
                    goto try_end_1;
                    // Exception handler code:
                    try_except_handler_2:;
                    exception_keeper_type_1 = exception_type;
                    exception_keeper_value_1 = exception_value;
                    exception_keeper_tb_1 = exception_tb;
                    exception_keeper_lineno_1 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    // Preserve existing published exception.
                    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
                    Py_XINCREF(exception_preserved_type_1);
                    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
                    Py_XINCREF(exception_preserved_value_1);
                    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
                    Py_XINCREF(exception_preserved_tb_1);

                    if (exception_keeper_tb_1 == NULL) {
                        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_2debc51c32a41ce980416edeb6da9de2, exception_keeper_lineno_1);
                    } else if (exception_keeper_lineno_1 != 0) {
                        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_2debc51c32a41ce980416edeb6da9de2, exception_keeper_lineno_1);
                    }

                    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
                    PyException_SetTraceback(exception_keeper_value_1, (PyObject *)exception_keeper_tb_1);
                    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
                    // Tried code:
                    {
                        nuitka_bool tmp_condition_result_10;
                        PyObject *tmp_compexpr_left_5;
                        PyObject *tmp_compexpr_right_5;
                        tmp_compexpr_left_5 = EXC_TYPE(PyThreadState_GET());
                        tmp_compexpr_right_5 = PyExc_AttributeError;
                        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_5, tmp_compexpr_right_5);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 293;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_condition_result_10 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_10;
                        } else {
                            goto branch_no_10;
                        }
                        branch_yes_10:;
                        {
                            PyObject *tmp_assign_source_8;
                            CHECK_OBJECT(var_bg_i18n);
                            tmp_assign_source_8 = var_bg_i18n;
                            assert(var_bg_name == NULL);
                            Py_INCREF(tmp_assign_source_8);
                            var_bg_name = tmp_assign_source_8;
                        }
                        goto branch_end_10;
                        branch_no_10:;
                        tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                        if (unlikely(tmp_result == false)) {
                            exception_lineno = 290;
                        }

                        if (exception_tb && exception_tb->tb_frame == &frame_2debc51c32a41ce980416edeb6da9de2->m_frame) frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = exception_tb->tb_lineno;
                        type_description_1 = "oooooooooooooooo";
                        goto try_except_handler_3;
                        branch_end_10:;
                    }
                    goto try_end_2;
                    // Exception handler code:
                    try_except_handler_3:;
                    exception_keeper_type_2 = exception_type;
                    exception_keeper_value_2 = exception_value;
                    exception_keeper_tb_2 = exception_tb;
                    exception_keeper_lineno_2 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    // Restore previous exception.
                    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
                    // Re-raise.
                    exception_type = exception_keeper_type_2;
                    exception_value = exception_keeper_value_2;
                    exception_tb = exception_keeper_tb_2;
                    exception_lineno = exception_keeper_lineno_2;

                    goto frame_exception_exit_1;
                    // End of try:
                    try_end_2:;
                    // Restore previous exception.
                    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
                    goto try_end_1;
                    // exception handler codes exits in all cases
                    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_15_createWidget);
                    return NULL;
                    // End of try:
                    try_end_1:;
                    {
                        nuitka_bool tmp_condition_result_11;
                        PyObject *tmp_operand_name_1;
                        if (var_bg_name == NULL) {

                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF(exception_type);
                            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg_name");
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                            CHAIN_EXCEPTION(exception_value);

                            exception_lineno = 301;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_operand_name_1 = var_bg_name;
                        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 301;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_11 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_11;
                        } else {
                            goto branch_no_11;
                        }
                        branch_yes_11:;
                        {
                            PyObject *tmp_assign_source_9;
                            tmp_assign_source_9 = const_str_plain_buttonGroup;
                            {
                                PyObject *old = var_bg_name;
                                var_bg_name = tmp_assign_source_9;
                                Py_INCREF(var_bg_name);
                                Py_XDECREF(old);
                            }

                        }
                        branch_no_11:;
                    }
                    // Tried code:
                    {
                        PyObject *tmp_assign_source_10;
                        PyObject *tmp_subscribed_name_2;
                        PyObject *tmp_source_name_31;
                        PyObject *tmp_subscript_name_2;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_31 = par_self;
                        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_31, const_str_plain_button_groups);
                        if (tmp_subscribed_name_2 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 305;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        if (var_bg_name == NULL) {
                            Py_DECREF(tmp_subscribed_name_2);
                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF(exception_type);
                            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg_name");
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                            CHAIN_EXCEPTION(exception_value);

                            exception_lineno = 305;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }

                        tmp_subscript_name_2 = var_bg_name;
                        tmp_assign_source_10 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_2, tmp_subscript_name_2);
                        Py_DECREF(tmp_subscribed_name_2);
                        if (tmp_assign_source_10 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 305;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        assert(var_bg == NULL);
                        var_bg = tmp_assign_source_10;
                    }
                    goto try_end_3;
                    // Exception handler code:
                    try_except_handler_4:;
                    exception_keeper_type_3 = exception_type;
                    exception_keeper_value_3 = exception_value;
                    exception_keeper_tb_3 = exception_tb;
                    exception_keeper_lineno_3 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    // Preserve existing published exception.
                    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
                    Py_XINCREF(exception_preserved_type_2);
                    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
                    Py_XINCREF(exception_preserved_value_2);
                    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
                    Py_XINCREF(exception_preserved_tb_2);

                    if (exception_keeper_tb_3 == NULL) {
                        exception_keeper_tb_3 = MAKE_TRACEBACK(frame_2debc51c32a41ce980416edeb6da9de2, exception_keeper_lineno_3);
                    } else if (exception_keeper_lineno_3 != 0) {
                        exception_keeper_tb_3 = ADD_TRACEBACK(exception_keeper_tb_3, frame_2debc51c32a41ce980416edeb6da9de2, exception_keeper_lineno_3);
                    }

                    NORMALIZE_EXCEPTION(&exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3);
                    PyException_SetTraceback(exception_keeper_value_3, (PyObject *)exception_keeper_tb_3);
                    PUBLISH_EXCEPTION(&exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3);
                    // Tried code:
                    {
                        nuitka_bool tmp_condition_result_12;
                        PyObject *tmp_compexpr_left_6;
                        PyObject *tmp_compexpr_right_6;
                        tmp_compexpr_left_6 = EXC_TYPE(PyThreadState_GET());
                        tmp_compexpr_right_6 = PyExc_KeyError;
                        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_6, tmp_compexpr_right_6);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 306;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_5;
                        }
                        tmp_condition_result_12 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_12;
                        } else {
                            goto branch_no_12;
                        }
                        branch_yes_12:;
                        // Tried code:
                        {
                            PyObject *tmp_assign_source_11;
                            PyObject *tmp_called_name_7;
                            PyObject *tmp_mvar_value_12;
                            tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_ButtonGroup);

                            if (unlikely(tmp_mvar_value_12 == NULL)) {
                                tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_ButtonGroup);
                            }

                            if (tmp_mvar_value_12 == NULL) {

                                exception_type = PyExc_NameError;
                                Py_INCREF(exception_type);
                                exception_value = UNSTREAM_STRING(&constant_bin[ 3425 ], 33, 0);
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                CHAIN_EXCEPTION(exception_value);

                                exception_lineno = 307;
                                type_description_1 = "oooooooooooooooo";
                                goto try_except_handler_6;
                            }

                            tmp_called_name_7 = tmp_mvar_value_12;
                            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 307;
                            tmp_assign_source_11 = CALL_FUNCTION_NO_ARGS(tmp_called_name_7);
                            if (tmp_assign_source_11 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 307;
                                type_description_1 = "oooooooooooooooo";
                                goto try_except_handler_6;
                            }
                            assert(tmp_assign_unpack_1__assign_source == NULL);
                            tmp_assign_unpack_1__assign_source = tmp_assign_source_11;
                        }
                        {
                            PyObject *tmp_assign_source_12;
                            CHECK_OBJECT(tmp_assign_unpack_1__assign_source);
                            tmp_assign_source_12 = tmp_assign_unpack_1__assign_source;
                            assert(var_bg == NULL);
                            Py_INCREF(tmp_assign_source_12);
                            var_bg = tmp_assign_source_12;
                        }
                        {
                            PyObject *tmp_ass_subvalue_1;
                            PyObject *tmp_ass_subscribed_1;
                            PyObject *tmp_source_name_32;
                            PyObject *tmp_ass_subscript_1;
                            CHECK_OBJECT(tmp_assign_unpack_1__assign_source);
                            tmp_ass_subvalue_1 = tmp_assign_unpack_1__assign_source;
                            CHECK_OBJECT(par_self);
                            tmp_source_name_32 = par_self;
                            tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_source_name_32, const_str_plain_button_groups);
                            if (tmp_ass_subscribed_1 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 307;
                                type_description_1 = "oooooooooooooooo";
                                goto try_except_handler_6;
                            }
                            if (var_bg_name == NULL) {
                                Py_DECREF(tmp_ass_subscribed_1);
                                exception_type = PyExc_UnboundLocalError;
                                Py_INCREF(exception_type);
                                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg_name");
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                CHAIN_EXCEPTION(exception_value);

                                exception_lineno = 307;
                                type_description_1 = "oooooooooooooooo";
                                goto try_except_handler_6;
                            }

                            tmp_ass_subscript_1 = var_bg_name;
                            tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
                            Py_DECREF(tmp_ass_subscribed_1);
                            if (tmp_result == false) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 307;
                                type_description_1 = "oooooooooooooooo";
                                goto try_except_handler_6;
                            }
                        }
                        goto try_end_4;
                        // Exception handler code:
                        try_except_handler_6:;
                        exception_keeper_type_4 = exception_type;
                        exception_keeper_value_4 = exception_value;
                        exception_keeper_tb_4 = exception_tb;
                        exception_keeper_lineno_4 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        Py_XDECREF(tmp_assign_unpack_1__assign_source);
                        tmp_assign_unpack_1__assign_source = NULL;

                        // Re-raise.
                        exception_type = exception_keeper_type_4;
                        exception_value = exception_keeper_value_4;
                        exception_tb = exception_keeper_tb_4;
                        exception_lineno = exception_keeper_lineno_4;

                        goto try_except_handler_5;
                        // End of try:
                        try_end_4:;
                        CHECK_OBJECT((PyObject *)tmp_assign_unpack_1__assign_source);
                        Py_DECREF(tmp_assign_unpack_1__assign_source);
                        tmp_assign_unpack_1__assign_source = NULL;

                        goto branch_end_12;
                        branch_no_12:;
                        tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                        if (unlikely(tmp_result == false)) {
                            exception_lineno = 304;
                        }

                        if (exception_tb && exception_tb->tb_frame == &frame_2debc51c32a41ce980416edeb6da9de2->m_frame) frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = exception_tb->tb_lineno;
                        type_description_1 = "oooooooooooooooo";
                        goto try_except_handler_5;
                        branch_end_12:;
                    }
                    goto try_end_5;
                    // Exception handler code:
                    try_except_handler_5:;
                    exception_keeper_type_5 = exception_type;
                    exception_keeper_value_5 = exception_value;
                    exception_keeper_tb_5 = exception_tb;
                    exception_keeper_lineno_5 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    // Restore previous exception.
                    SET_CURRENT_EXCEPTION(exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2);
                    // Re-raise.
                    exception_type = exception_keeper_type_5;
                    exception_value = exception_keeper_value_5;
                    exception_tb = exception_keeper_tb_5;
                    exception_lineno = exception_keeper_lineno_5;

                    goto frame_exception_exit_1;
                    // End of try:
                    try_end_5:;
                    // Restore previous exception.
                    SET_CURRENT_EXCEPTION(exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2);
                    goto try_end_3;
                    // exception handler codes exits in all cases
                    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_15_createWidget);
                    return NULL;
                    // End of try:
                    try_end_3:;
                    {
                        nuitka_bool tmp_condition_result_13;
                        PyObject *tmp_compexpr_left_7;
                        PyObject *tmp_compexpr_right_7;
                        PyObject *tmp_source_name_33;
                        if (var_bg == NULL) {

                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF(exception_type);
                            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg");
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                            CHAIN_EXCEPTION(exception_value);

                            exception_lineno = 309;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_33 = var_bg;
                        tmp_compexpr_left_7 = LOOKUP_ATTRIBUTE(tmp_source_name_33, const_str_plain_object);
                        if (tmp_compexpr_left_7 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 309;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_compexpr_right_7 = Py_None;
                        tmp_condition_result_13 = (tmp_compexpr_left_7 == tmp_compexpr_right_7) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        Py_DECREF(tmp_compexpr_left_7);
                        if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_13;
                        } else {
                            goto branch_no_13;
                        }
                        branch_yes_13:;
                        {
                            PyObject *tmp_assattr_name_6;
                            PyObject *tmp_called_name_8;
                            PyObject *tmp_source_name_34;
                            PyObject *tmp_source_name_35;
                            PyObject *tmp_args_element_name_23;
                            PyObject *tmp_args_element_name_24;
                            PyObject *tmp_args_element_name_25;
                            PyObject *tmp_tuple_element_2;
                            PyObject *tmp_source_name_36;
                            PyObject *tmp_assattr_target_6;
                            CHECK_OBJECT(par_self);
                            tmp_source_name_35 = par_self;
                            tmp_source_name_34 = LOOKUP_ATTRIBUTE(tmp_source_name_35, const_str_plain_factory);
                            if (tmp_source_name_34 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 310;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_called_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_34, const_str_plain_createQObject);
                            Py_DECREF(tmp_source_name_34);
                            if (tmp_called_name_8 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 310;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_args_element_name_23 = const_str_plain_QButtonGroup;
                            if (var_bg_name == NULL) {
                                Py_DECREF(tmp_called_name_8);
                                exception_type = PyExc_UnboundLocalError;
                                Py_INCREF(exception_type);
                                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg_name");
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                CHAIN_EXCEPTION(exception_value);

                                exception_lineno = 311;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_args_element_name_24 = var_bg_name;
                            CHECK_OBJECT(par_self);
                            tmp_source_name_36 = par_self;
                            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_source_name_36, const_str_plain_toplevelWidget);
                            if (tmp_tuple_element_2 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                Py_DECREF(tmp_called_name_8);

                                exception_lineno = 311;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_args_element_name_25 = PyTuple_New(1);
                            PyTuple_SET_ITEM(tmp_args_element_name_25, 0, tmp_tuple_element_2);
                            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 310;
                            {
                                PyObject *call_args[] = {tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25};
                                tmp_assattr_name_6 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_8, call_args);
                            }

                            Py_DECREF(tmp_called_name_8);
                            Py_DECREF(tmp_args_element_name_25);
                            if (tmp_assattr_name_6 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 310;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            if (var_bg == NULL) {
                                Py_DECREF(tmp_assattr_name_6);
                                exception_type = PyExc_UnboundLocalError;
                                Py_INCREF(exception_type);
                                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg");
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                CHAIN_EXCEPTION(exception_value);

                                exception_lineno = 310;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_assattr_target_6 = var_bg;
                            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, const_str_plain_object, tmp_assattr_name_6);
                            Py_DECREF(tmp_assattr_name_6);
                            if (tmp_result == false) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 310;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                        }
                        {
                            PyObject *tmp_setattr_target_1;
                            PyObject *tmp_source_name_37;
                            PyObject *tmp_setattr_attr_1;
                            PyObject *tmp_setattr_value_1;
                            PyObject *tmp_source_name_38;
                            PyObject *tmp_capi_result_1;
                            CHECK_OBJECT(par_self);
                            tmp_source_name_37 = par_self;
                            tmp_setattr_target_1 = LOOKUP_ATTRIBUTE(tmp_source_name_37, const_str_plain_toplevelWidget);
                            if (tmp_setattr_target_1 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 312;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            if (var_bg_name == NULL) {
                                Py_DECREF(tmp_setattr_target_1);
                                exception_type = PyExc_UnboundLocalError;
                                Py_INCREF(exception_type);
                                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg_name");
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                CHAIN_EXCEPTION(exception_value);

                                exception_lineno = 312;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_setattr_attr_1 = var_bg_name;
                            if (var_bg == NULL) {
                                Py_DECREF(tmp_setattr_target_1);
                                exception_type = PyExc_UnboundLocalError;
                                Py_INCREF(exception_type);
                                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg");
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                CHAIN_EXCEPTION(exception_value);

                                exception_lineno = 312;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_source_name_38 = var_bg;
                            tmp_setattr_value_1 = LOOKUP_ATTRIBUTE(tmp_source_name_38, const_str_plain_object);
                            if (tmp_setattr_value_1 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                Py_DECREF(tmp_setattr_target_1);

                                exception_lineno = 312;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_capi_result_1 = BUILTIN_SETATTR(tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1);
                            Py_DECREF(tmp_setattr_target_1);
                            Py_DECREF(tmp_setattr_value_1);
                            if (tmp_capi_result_1 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 312;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                        }
                        {
                            PyObject *tmp_called_name_9;
                            PyObject *tmp_source_name_39;
                            PyObject *tmp_source_name_40;
                            PyObject *tmp_call_result_8;
                            PyObject *tmp_args_element_name_26;
                            if (var_bg == NULL) {

                                exception_type = PyExc_UnboundLocalError;
                                Py_INCREF(exception_type);
                                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg");
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                CHAIN_EXCEPTION(exception_value);

                                exception_lineno = 314;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_source_name_40 = var_bg;
                            tmp_source_name_39 = LOOKUP_ATTRIBUTE(tmp_source_name_40, const_str_plain_object);
                            if (tmp_source_name_39 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 314;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_called_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_39, const_str_plain_setObjectName);
                            Py_DECREF(tmp_source_name_39);
                            if (tmp_called_name_9 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 314;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            if (var_bg_name == NULL) {
                                Py_DECREF(tmp_called_name_9);
                                exception_type = PyExc_UnboundLocalError;
                                Py_INCREF(exception_type);
                                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg_name");
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                CHAIN_EXCEPTION(exception_value);

                                exception_lineno = 314;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_args_element_name_26 = var_bg_name;
                            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 314;
                            tmp_call_result_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_9, tmp_args_element_name_26);
                            Py_DECREF(tmp_called_name_9);
                            if (tmp_call_result_8 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 314;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            Py_DECREF(tmp_call_result_8);
                        }
                        {
                            nuitka_bool tmp_condition_result_14;
                            PyObject *tmp_operand_name_2;
                            PyObject *tmp_source_name_41;
                            if (var_bg == NULL) {

                                exception_type = PyExc_UnboundLocalError;
                                Py_INCREF(exception_type);
                                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg");
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                CHAIN_EXCEPTION(exception_value);

                                exception_lineno = 316;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_source_name_41 = var_bg;
                            tmp_operand_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_41, const_str_plain_exclusive);
                            if (tmp_operand_name_2 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 316;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
                            Py_DECREF(tmp_operand_name_2);
                            if (tmp_res == -1) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 316;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_condition_result_14 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
                                goto branch_yes_14;
                            } else {
                                goto branch_no_14;
                            }
                            branch_yes_14:;
                            {
                                PyObject *tmp_called_instance_13;
                                PyObject *tmp_source_name_42;
                                PyObject *tmp_call_result_9;
                                if (var_bg == NULL) {

                                    exception_type = PyExc_UnboundLocalError;
                                    Py_INCREF(exception_type);
                                    exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg");
                                    exception_tb = NULL;
                                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                    CHAIN_EXCEPTION(exception_value);

                                    exception_lineno = 317;
                                    type_description_1 = "oooooooooooooooo";
                                    goto frame_exception_exit_1;
                                }

                                tmp_source_name_42 = var_bg;
                                tmp_called_instance_13 = LOOKUP_ATTRIBUTE(tmp_source_name_42, const_str_plain_object);
                                if (tmp_called_instance_13 == NULL) {
                                    assert(ERROR_OCCURRED());

                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                    exception_lineno = 317;
                                    type_description_1 = "oooooooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 317;
                                tmp_call_result_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_13, const_str_plain_setExclusive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

                                Py_DECREF(tmp_called_instance_13);
                                if (tmp_call_result_9 == NULL) {
                                    assert(ERROR_OCCURRED());

                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                    exception_lineno = 317;
                                    type_description_1 = "oooooooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                Py_DECREF(tmp_call_result_9);
                            }
                            branch_no_14:;
                        }
                        branch_no_13:;
                    }
                    {
                        PyObject *tmp_called_instance_14;
                        PyObject *tmp_source_name_43;
                        PyObject *tmp_call_result_10;
                        PyObject *tmp_args_element_name_27;
                        if (var_bg == NULL) {

                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF(exception_type);
                            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bg");
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                            CHAIN_EXCEPTION(exception_value);

                            exception_lineno = 319;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_43 = var_bg;
                        tmp_called_instance_14 = LOOKUP_ATTRIBUTE(tmp_source_name_43, const_str_plain_object);
                        if (tmp_called_instance_14 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 319;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        CHECK_OBJECT(var_widget);
                        tmp_args_element_name_27 = var_widget;
                        frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 319;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_27};
                            tmp_call_result_10 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_14, const_str_plain_addButton, call_args);
                        }

                        Py_DECREF(tmp_called_instance_14);
                        if (tmp_call_result_10 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 319;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        Py_DECREF(tmp_call_result_10);
                    }
                    branch_no_9:;
                }
                branch_no_8:;
            }
            branch_end_7:;
        }
        branch_end_6:;
    }
    {
        nuitka_bool tmp_condition_result_15;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        PyObject *tmp_source_name_44;
        CHECK_OBJECT(par_self);
        tmp_source_name_44 = par_self;
        tmp_compexpr_left_8 = LOOKUP_ATTRIBUTE(tmp_source_name_44, const_str_plain_sorting_enabled);
        if (tmp_compexpr_left_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 321;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_8 = Py_None;
        tmp_condition_result_15 = (tmp_compexpr_left_8 != tmp_compexpr_right_8) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_compexpr_left_8);
        if (tmp_condition_result_15 == NUITKA_BOOL_TRUE) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
        branch_yes_15:;
        {
            PyObject *tmp_called_name_10;
            PyObject *tmp_source_name_45;
            PyObject *tmp_call_result_11;
            PyObject *tmp_args_element_name_28;
            PyObject *tmp_source_name_46;
            CHECK_OBJECT(var_widget);
            tmp_source_name_45 = var_widget;
            tmp_called_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_45, const_str_plain_setSortingEnabled);
            if (tmp_called_name_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 322;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_source_name_46 = par_self;
            tmp_args_element_name_28 = LOOKUP_ATTRIBUTE(tmp_source_name_46, const_str_plain_sorting_enabled);
            if (tmp_args_element_name_28 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_10);

                exception_lineno = 322;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 322;
            tmp_call_result_11 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_10, tmp_args_element_name_28);
            Py_DECREF(tmp_called_name_10);
            Py_DECREF(tmp_args_element_name_28);
            if (tmp_call_result_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 322;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_11);
        }
        {
            PyObject *tmp_assattr_name_7;
            PyObject *tmp_assattr_target_7;
            tmp_assattr_name_7 = Py_None;
            CHECK_OBJECT(par_self);
            tmp_assattr_target_7 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_7, const_str_plain_sorting_enabled, tmp_assattr_name_7);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 323;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_15:;
    }
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_called_instance_15;
        PyObject *tmp_source_name_47;
        PyObject *tmp_call_result_12;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_47 = par_self;
        tmp_called_instance_15 = LOOKUP_ATTRIBUTE(tmp_source_name_47, const_str_plain_stack);
        if (tmp_called_instance_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 325;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 325;
        tmp_call_result_12 = CALL_METHOD_NO_ARGS(tmp_called_instance_15, const_str_plain_topIsLayout);
        Py_DECREF(tmp_called_instance_15);
        if (tmp_call_result_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 325;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_12);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_12);

            exception_lineno = 325;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_16 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_12);
        if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
            goto branch_yes_16;
        } else {
            goto branch_no_16;
        }
        branch_yes_16:;
        {
            PyObject *tmp_assign_source_13;
            PyObject *tmp_called_instance_16;
            PyObject *tmp_source_name_48;
            CHECK_OBJECT(par_self);
            tmp_source_name_48 = par_self;
            tmp_called_instance_16 = LOOKUP_ATTRIBUTE(tmp_source_name_48, const_str_plain_stack);
            if (tmp_called_instance_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 326;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 326;
            tmp_assign_source_13 = CALL_METHOD_NO_ARGS(tmp_called_instance_16, const_str_plain_peek);
            Py_DECREF(tmp_called_instance_16);
            if (tmp_assign_source_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 326;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_lay == NULL);
            var_lay = tmp_assign_source_13;
        }
        {
            PyObject *tmp_assign_source_14;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_source_name_49;
            PyObject *tmp_subscript_name_3;
            CHECK_OBJECT(par_elem);
            tmp_source_name_49 = par_elem;
            tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_49, const_str_plain_attrib);
            if (tmp_subscribed_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 327;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_3 = const_str_digest_fef1f988ce622611673dba0e4ecba271;
            tmp_assign_source_14 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_3, tmp_subscript_name_3);
            Py_DECREF(tmp_subscribed_name_3);
            if (tmp_assign_source_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 327;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_lp == NULL);
            var_lp = tmp_assign_source_14;
        }
        {
            nuitka_bool tmp_condition_result_17;
            PyObject *tmp_isinstance_inst_6;
            PyObject *tmp_isinstance_cls_6;
            PyObject *tmp_source_name_50;
            PyObject *tmp_mvar_value_13;
            CHECK_OBJECT(var_lay);
            tmp_isinstance_inst_6 = var_lay;
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

            if (unlikely(tmp_mvar_value_13 == NULL)) {
                tmp_mvar_value_13 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
            }

            if (tmp_mvar_value_13 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 329;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_50 = tmp_mvar_value_13;
            tmp_isinstance_cls_6 = LOOKUP_ATTRIBUTE(tmp_source_name_50, const_str_plain_QFormLayout);
            if (tmp_isinstance_cls_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 329;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_6, tmp_isinstance_cls_6);
            Py_DECREF(tmp_isinstance_cls_6);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 329;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_17 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_17 == NUITKA_BOOL_TRUE) {
                goto branch_yes_17;
            } else {
                goto branch_no_17;
            }
            branch_yes_17:;
            {
                PyObject *tmp_called_name_11;
                PyObject *tmp_source_name_51;
                PyObject *tmp_call_result_13;
                PyObject *tmp_args_element_name_29;
                PyObject *tmp_subscribed_name_4;
                PyObject *tmp_subscript_name_4;
                PyObject *tmp_args_element_name_30;
                PyObject *tmp_called_instance_17;
                PyObject *tmp_args_element_name_31;
                PyObject *tmp_args_element_name_32;
                CHECK_OBJECT(var_lay);
                tmp_source_name_51 = var_lay;
                tmp_called_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_51, const_str_plain_setWidget);
                if (tmp_called_name_11 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 330;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_lp);
                tmp_subscribed_name_4 = var_lp;
                tmp_subscript_name_4 = const_int_0;
                tmp_args_element_name_29 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_4, tmp_subscript_name_4, 0);
                if (tmp_args_element_name_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_11);

                    exception_lineno = 330;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_self);
                tmp_called_instance_17 = par_self;
                CHECK_OBJECT(var_lp);
                tmp_args_element_name_31 = var_lp;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 330;
                {
                    PyObject *call_args[] = {tmp_args_element_name_31};
                    tmp_args_element_name_30 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_17, const_str_plain__form_layout_role, call_args);
                }

                if (tmp_args_element_name_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_11);
                    Py_DECREF(tmp_args_element_name_29);

                    exception_lineno = 330;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_widget);
                tmp_args_element_name_32 = var_widget;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 330;
                {
                    PyObject *call_args[] = {tmp_args_element_name_29, tmp_args_element_name_30, tmp_args_element_name_32};
                    tmp_call_result_13 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_11, call_args);
                }

                Py_DECREF(tmp_called_name_11);
                Py_DECREF(tmp_args_element_name_29);
                Py_DECREF(tmp_args_element_name_30);
                if (tmp_call_result_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 330;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_13);
            }
            goto branch_end_17;
            branch_no_17:;
            {
                PyObject *tmp_dircall_arg1_1;
                PyObject *tmp_source_name_52;
                PyObject *tmp_dircall_arg2_1;
                PyObject *tmp_tuple_element_3;
                PyObject *tmp_dircall_arg3_1;
                PyObject *tmp_call_result_14;
                CHECK_OBJECT(var_lay);
                tmp_source_name_52 = var_lay;
                tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_source_name_52, const_str_plain_addWidget);
                if (tmp_dircall_arg1_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 332;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_widget);
                tmp_tuple_element_3 = var_widget;
                tmp_dircall_arg2_1 = PyTuple_New(1);
                Py_INCREF(tmp_tuple_element_3);
                PyTuple_SET_ITEM(tmp_dircall_arg2_1, 0, tmp_tuple_element_3);
                CHECK_OBJECT(var_lp);
                tmp_dircall_arg3_1 = var_lp;
                Py_INCREF(tmp_dircall_arg3_1);

                {
                    PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
                    tmp_call_result_14 = impl___internal__$$$function_6_complex_call_helper_pos_star_list(dir_call_args);
                }
                if (tmp_call_result_14 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 332;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_14);
            }
            branch_end_17:;
        }
        branch_no_16:;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_source_name_53;
        PyObject *tmp_source_name_54;
        CHECK_OBJECT(par_self);
        tmp_source_name_54 = par_self;
        tmp_source_name_53 = LOOKUP_ATTRIBUTE(tmp_source_name_54, const_str_plain_stack);
        if (tmp_source_name_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 334;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_15 = LOOKUP_ATTRIBUTE(tmp_source_name_53, const_str_plain_topwidget);
        Py_DECREF(tmp_source_name_53);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 334;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_topwidget == NULL);
        var_topwidget = tmp_assign_source_15;
    }
    {
        nuitka_bool tmp_condition_result_18;
        PyObject *tmp_isinstance_inst_7;
        PyObject *tmp_isinstance_cls_7;
        PyObject *tmp_source_name_55;
        PyObject *tmp_mvar_value_14;
        CHECK_OBJECT(var_topwidget);
        tmp_isinstance_inst_7 = var_topwidget;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_14 == NULL)) {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_14 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 336;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_55 = tmp_mvar_value_14;
        tmp_isinstance_cls_7 = LOOKUP_ATTRIBUTE(tmp_source_name_55, const_str_plain_QToolBox);
        if (tmp_isinstance_cls_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_7, tmp_isinstance_cls_7);
        Py_DECREF(tmp_isinstance_cls_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_18 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
        branch_yes_18:;
        {
            PyObject *tmp_assign_source_16;
            PyObject *tmp_called_instance_18;
            PyObject *tmp_source_name_56;
            PyObject *tmp_args_element_name_33;
            PyObject *tmp_args_element_name_34;
            CHECK_OBJECT(par_self);
            tmp_source_name_56 = par_self;
            tmp_called_instance_18 = LOOKUP_ATTRIBUTE(tmp_source_name_56, const_str_plain_wprops);
            if (tmp_called_instance_18 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 337;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_33 = par_elem;
            tmp_args_element_name_34 = const_str_plain_icon;
            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 337;
            {
                PyObject *call_args[] = {tmp_args_element_name_33, tmp_args_element_name_34};
                tmp_assign_source_16 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_18, const_str_plain_getAttribute, call_args);
            }

            Py_DECREF(tmp_called_instance_18);
            if (tmp_assign_source_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 337;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_icon == NULL);
            var_icon = tmp_assign_source_16;
        }
        {
            nuitka_bool tmp_condition_result_19;
            PyObject *tmp_compexpr_left_9;
            PyObject *tmp_compexpr_right_9;
            CHECK_OBJECT(var_icon);
            tmp_compexpr_left_9 = var_icon;
            tmp_compexpr_right_9 = Py_None;
            tmp_condition_result_19 = (tmp_compexpr_left_9 != tmp_compexpr_right_9) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_19 == NUITKA_BOOL_TRUE) {
                goto branch_yes_19;
            } else {
                goto branch_no_19;
            }
            branch_yes_19:;
            {
                PyObject *tmp_called_name_12;
                PyObject *tmp_source_name_57;
                PyObject *tmp_call_result_15;
                PyObject *tmp_args_element_name_35;
                PyObject *tmp_args_element_name_36;
                PyObject *tmp_args_element_name_37;
                PyObject *tmp_called_instance_19;
                PyObject *tmp_source_name_58;
                PyObject *tmp_args_element_name_38;
                PyObject *tmp_args_element_name_39;
                CHECK_OBJECT(var_topwidget);
                tmp_source_name_57 = var_topwidget;
                tmp_called_name_12 = LOOKUP_ATTRIBUTE(tmp_source_name_57, const_str_plain_addItem);
                if (tmp_called_name_12 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 339;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_widget);
                tmp_args_element_name_35 = var_widget;
                CHECK_OBJECT(var_icon);
                tmp_args_element_name_36 = var_icon;
                CHECK_OBJECT(par_self);
                tmp_source_name_58 = par_self;
                tmp_called_instance_19 = LOOKUP_ATTRIBUTE(tmp_source_name_58, const_str_plain_wprops);
                if (tmp_called_instance_19 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_12);

                    exception_lineno = 339;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_elem);
                tmp_args_element_name_38 = par_elem;
                tmp_args_element_name_39 = const_str_plain_label;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 339;
                {
                    PyObject *call_args[] = {tmp_args_element_name_38, tmp_args_element_name_39};
                    tmp_args_element_name_37 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_19, const_str_plain_getAttribute, call_args);
                }

                Py_DECREF(tmp_called_instance_19);
                if (tmp_args_element_name_37 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_12);

                    exception_lineno = 339;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 339;
                {
                    PyObject *call_args[] = {tmp_args_element_name_35, tmp_args_element_name_36, tmp_args_element_name_37};
                    tmp_call_result_15 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_12, call_args);
                }

                Py_DECREF(tmp_called_name_12);
                Py_DECREF(tmp_args_element_name_37);
                if (tmp_call_result_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 339;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_15);
            }
            goto branch_end_19;
            branch_no_19:;
            {
                PyObject *tmp_called_name_13;
                PyObject *tmp_source_name_59;
                PyObject *tmp_call_result_16;
                PyObject *tmp_args_element_name_40;
                PyObject *tmp_args_element_name_41;
                PyObject *tmp_called_instance_20;
                PyObject *tmp_source_name_60;
                PyObject *tmp_args_element_name_42;
                PyObject *tmp_args_element_name_43;
                CHECK_OBJECT(var_topwidget);
                tmp_source_name_59 = var_topwidget;
                tmp_called_name_13 = LOOKUP_ATTRIBUTE(tmp_source_name_59, const_str_plain_addItem);
                if (tmp_called_name_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 341;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_widget);
                tmp_args_element_name_40 = var_widget;
                CHECK_OBJECT(par_self);
                tmp_source_name_60 = par_self;
                tmp_called_instance_20 = LOOKUP_ATTRIBUTE(tmp_source_name_60, const_str_plain_wprops);
                if (tmp_called_instance_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_13);

                    exception_lineno = 341;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_elem);
                tmp_args_element_name_42 = par_elem;
                tmp_args_element_name_43 = const_str_plain_label;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 341;
                {
                    PyObject *call_args[] = {tmp_args_element_name_42, tmp_args_element_name_43};
                    tmp_args_element_name_41 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_20, const_str_plain_getAttribute, call_args);
                }

                Py_DECREF(tmp_called_instance_20);
                if (tmp_args_element_name_41 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_13);

                    exception_lineno = 341;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 341;
                {
                    PyObject *call_args[] = {tmp_args_element_name_40, tmp_args_element_name_41};
                    tmp_call_result_16 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_13, call_args);
                }

                Py_DECREF(tmp_called_name_13);
                Py_DECREF(tmp_args_element_name_41);
                if (tmp_call_result_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 341;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_16);
            }
            branch_end_19:;
        }
        {
            PyObject *tmp_assign_source_17;
            PyObject *tmp_called_instance_21;
            PyObject *tmp_source_name_61;
            PyObject *tmp_args_element_name_44;
            PyObject *tmp_args_element_name_45;
            CHECK_OBJECT(par_self);
            tmp_source_name_61 = par_self;
            tmp_called_instance_21 = LOOKUP_ATTRIBUTE(tmp_source_name_61, const_str_plain_wprops);
            if (tmp_called_instance_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 343;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_44 = par_elem;
            tmp_args_element_name_45 = const_str_plain_toolTip;
            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 343;
            {
                PyObject *call_args[] = {tmp_args_element_name_44, tmp_args_element_name_45};
                tmp_assign_source_17 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_21, const_str_plain_getAttribute, call_args);
            }

            Py_DECREF(tmp_called_instance_21);
            if (tmp_assign_source_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 343;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_tooltip == NULL);
            var_tooltip = tmp_assign_source_17;
        }
        {
            nuitka_bool tmp_condition_result_20;
            PyObject *tmp_compexpr_left_10;
            PyObject *tmp_compexpr_right_10;
            CHECK_OBJECT(var_tooltip);
            tmp_compexpr_left_10 = var_tooltip;
            tmp_compexpr_right_10 = Py_None;
            tmp_condition_result_20 = (tmp_compexpr_left_10 != tmp_compexpr_right_10) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_20 == NUITKA_BOOL_TRUE) {
                goto branch_yes_20;
            } else {
                goto branch_no_20;
            }
            branch_yes_20:;
            {
                PyObject *tmp_called_name_14;
                PyObject *tmp_source_name_62;
                PyObject *tmp_call_result_17;
                PyObject *tmp_args_element_name_46;
                PyObject *tmp_called_instance_22;
                PyObject *tmp_args_element_name_47;
                PyObject *tmp_args_element_name_48;
                CHECK_OBJECT(var_topwidget);
                tmp_source_name_62 = var_topwidget;
                tmp_called_name_14 = LOOKUP_ATTRIBUTE(tmp_source_name_62, const_str_plain_setItemToolTip);
                if (tmp_called_name_14 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 345;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_topwidget);
                tmp_called_instance_22 = var_topwidget;
                CHECK_OBJECT(var_widget);
                tmp_args_element_name_47 = var_widget;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 345;
                {
                    PyObject *call_args[] = {tmp_args_element_name_47};
                    tmp_args_element_name_46 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_22, const_str_plain_indexOf, call_args);
                }

                if (tmp_args_element_name_46 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_14);

                    exception_lineno = 345;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_tooltip);
                tmp_args_element_name_48 = var_tooltip;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 345;
                {
                    PyObject *call_args[] = {tmp_args_element_name_46, tmp_args_element_name_48};
                    tmp_call_result_17 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_14, call_args);
                }

                Py_DECREF(tmp_called_name_14);
                Py_DECREF(tmp_args_element_name_46);
                if (tmp_call_result_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 345;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_17);
            }
            branch_no_20:;
        }
        goto branch_end_18;
        branch_no_18:;
        {
            nuitka_bool tmp_condition_result_21;
            PyObject *tmp_isinstance_inst_8;
            PyObject *tmp_isinstance_cls_8;
            PyObject *tmp_source_name_63;
            PyObject *tmp_mvar_value_15;
            CHECK_OBJECT(var_topwidget);
            tmp_isinstance_inst_8 = var_topwidget;
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

            if (unlikely(tmp_mvar_value_15 == NULL)) {
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
            }

            if (tmp_mvar_value_15 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 347;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_63 = tmp_mvar_value_15;
            tmp_isinstance_cls_8 = LOOKUP_ATTRIBUTE(tmp_source_name_63, const_str_plain_QTabWidget);
            if (tmp_isinstance_cls_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 347;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_8, tmp_isinstance_cls_8);
            Py_DECREF(tmp_isinstance_cls_8);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 347;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_21 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_21 == NUITKA_BOOL_TRUE) {
                goto branch_yes_21;
            } else {
                goto branch_no_21;
            }
            branch_yes_21:;
            {
                PyObject *tmp_assign_source_18;
                PyObject *tmp_called_instance_23;
                PyObject *tmp_source_name_64;
                PyObject *tmp_args_element_name_49;
                PyObject *tmp_args_element_name_50;
                CHECK_OBJECT(par_self);
                tmp_source_name_64 = par_self;
                tmp_called_instance_23 = LOOKUP_ATTRIBUTE(tmp_source_name_64, const_str_plain_wprops);
                if (tmp_called_instance_23 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 348;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_elem);
                tmp_args_element_name_49 = par_elem;
                tmp_args_element_name_50 = const_str_plain_icon;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 348;
                {
                    PyObject *call_args[] = {tmp_args_element_name_49, tmp_args_element_name_50};
                    tmp_assign_source_18 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_23, const_str_plain_getAttribute, call_args);
                }

                Py_DECREF(tmp_called_instance_23);
                if (tmp_assign_source_18 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 348;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_icon == NULL);
                var_icon = tmp_assign_source_18;
            }
            {
                nuitka_bool tmp_condition_result_22;
                PyObject *tmp_compexpr_left_11;
                PyObject *tmp_compexpr_right_11;
                CHECK_OBJECT(var_icon);
                tmp_compexpr_left_11 = var_icon;
                tmp_compexpr_right_11 = Py_None;
                tmp_condition_result_22 = (tmp_compexpr_left_11 != tmp_compexpr_right_11) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_22 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_22;
                } else {
                    goto branch_no_22;
                }
                branch_yes_22:;
                {
                    PyObject *tmp_called_name_15;
                    PyObject *tmp_source_name_65;
                    PyObject *tmp_call_result_18;
                    PyObject *tmp_args_element_name_51;
                    PyObject *tmp_args_element_name_52;
                    PyObject *tmp_args_element_name_53;
                    PyObject *tmp_called_instance_24;
                    PyObject *tmp_source_name_66;
                    PyObject *tmp_args_element_name_54;
                    PyObject *tmp_args_element_name_55;
                    CHECK_OBJECT(var_topwidget);
                    tmp_source_name_65 = var_topwidget;
                    tmp_called_name_15 = LOOKUP_ATTRIBUTE(tmp_source_name_65, const_str_plain_addTab);
                    if (tmp_called_name_15 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 350;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT(var_widget);
                    tmp_args_element_name_51 = var_widget;
                    CHECK_OBJECT(var_icon);
                    tmp_args_element_name_52 = var_icon;
                    CHECK_OBJECT(par_self);
                    tmp_source_name_66 = par_self;
                    tmp_called_instance_24 = LOOKUP_ATTRIBUTE(tmp_source_name_66, const_str_plain_wprops);
                    if (tmp_called_instance_24 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_15);

                        exception_lineno = 350;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT(par_elem);
                    tmp_args_element_name_54 = par_elem;
                    tmp_args_element_name_55 = const_str_plain_title;
                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 350;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_54, tmp_args_element_name_55};
                        tmp_args_element_name_53 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_24, const_str_plain_getAttribute, call_args);
                    }

                    Py_DECREF(tmp_called_instance_24);
                    if (tmp_args_element_name_53 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_15);

                        exception_lineno = 350;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 350;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_51, tmp_args_element_name_52, tmp_args_element_name_53};
                        tmp_call_result_18 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_15, call_args);
                    }

                    Py_DECREF(tmp_called_name_15);
                    Py_DECREF(tmp_args_element_name_53);
                    if (tmp_call_result_18 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 350;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF(tmp_call_result_18);
                }
                goto branch_end_22;
                branch_no_22:;
                {
                    PyObject *tmp_called_name_16;
                    PyObject *tmp_source_name_67;
                    PyObject *tmp_call_result_19;
                    PyObject *tmp_args_element_name_56;
                    PyObject *tmp_args_element_name_57;
                    PyObject *tmp_called_instance_25;
                    PyObject *tmp_source_name_68;
                    PyObject *tmp_args_element_name_58;
                    PyObject *tmp_args_element_name_59;
                    CHECK_OBJECT(var_topwidget);
                    tmp_source_name_67 = var_topwidget;
                    tmp_called_name_16 = LOOKUP_ATTRIBUTE(tmp_source_name_67, const_str_plain_addTab);
                    if (tmp_called_name_16 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 352;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT(var_widget);
                    tmp_args_element_name_56 = var_widget;
                    CHECK_OBJECT(par_self);
                    tmp_source_name_68 = par_self;
                    tmp_called_instance_25 = LOOKUP_ATTRIBUTE(tmp_source_name_68, const_str_plain_wprops);
                    if (tmp_called_instance_25 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_16);

                        exception_lineno = 352;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT(par_elem);
                    tmp_args_element_name_58 = par_elem;
                    tmp_args_element_name_59 = const_str_plain_title;
                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 352;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_58, tmp_args_element_name_59};
                        tmp_args_element_name_57 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_25, const_str_plain_getAttribute, call_args);
                    }

                    Py_DECREF(tmp_called_instance_25);
                    if (tmp_args_element_name_57 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_16);

                        exception_lineno = 352;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 352;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_56, tmp_args_element_name_57};
                        tmp_call_result_19 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_16, call_args);
                    }

                    Py_DECREF(tmp_called_name_16);
                    Py_DECREF(tmp_args_element_name_57);
                    if (tmp_call_result_19 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 352;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF(tmp_call_result_19);
                }
                branch_end_22:;
            }
            {
                PyObject *tmp_assign_source_19;
                PyObject *tmp_called_instance_26;
                PyObject *tmp_source_name_69;
                PyObject *tmp_args_element_name_60;
                PyObject *tmp_args_element_name_61;
                CHECK_OBJECT(par_self);
                tmp_source_name_69 = par_self;
                tmp_called_instance_26 = LOOKUP_ATTRIBUTE(tmp_source_name_69, const_str_plain_wprops);
                if (tmp_called_instance_26 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 354;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_elem);
                tmp_args_element_name_60 = par_elem;
                tmp_args_element_name_61 = const_str_plain_toolTip;
                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 354;
                {
                    PyObject *call_args[] = {tmp_args_element_name_60, tmp_args_element_name_61};
                    tmp_assign_source_19 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_26, const_str_plain_getAttribute, call_args);
                }

                Py_DECREF(tmp_called_instance_26);
                if (tmp_assign_source_19 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 354;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_tooltip == NULL);
                var_tooltip = tmp_assign_source_19;
            }
            {
                nuitka_bool tmp_condition_result_23;
                PyObject *tmp_compexpr_left_12;
                PyObject *tmp_compexpr_right_12;
                CHECK_OBJECT(var_tooltip);
                tmp_compexpr_left_12 = var_tooltip;
                tmp_compexpr_right_12 = Py_None;
                tmp_condition_result_23 = (tmp_compexpr_left_12 != tmp_compexpr_right_12) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_23 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_23;
                } else {
                    goto branch_no_23;
                }
                branch_yes_23:;
                {
                    PyObject *tmp_called_name_17;
                    PyObject *tmp_source_name_70;
                    PyObject *tmp_call_result_20;
                    PyObject *tmp_args_element_name_62;
                    PyObject *tmp_called_instance_27;
                    PyObject *tmp_args_element_name_63;
                    PyObject *tmp_args_element_name_64;
                    CHECK_OBJECT(var_topwidget);
                    tmp_source_name_70 = var_topwidget;
                    tmp_called_name_17 = LOOKUP_ATTRIBUTE(tmp_source_name_70, const_str_plain_setTabToolTip);
                    if (tmp_called_name_17 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 356;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT(var_topwidget);
                    tmp_called_instance_27 = var_topwidget;
                    CHECK_OBJECT(var_widget);
                    tmp_args_element_name_63 = var_widget;
                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 356;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_63};
                        tmp_args_element_name_62 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_27, const_str_plain_indexOf, call_args);
                    }

                    if (tmp_args_element_name_62 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_17);

                        exception_lineno = 356;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT(var_tooltip);
                    tmp_args_element_name_64 = var_tooltip;
                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 356;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_62, tmp_args_element_name_64};
                        tmp_call_result_20 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_17, call_args);
                    }

                    Py_DECREF(tmp_called_name_17);
                    Py_DECREF(tmp_args_element_name_62);
                    if (tmp_call_result_20 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 356;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF(tmp_call_result_20);
                }
                branch_no_23:;
            }
            goto branch_end_21;
            branch_no_21:;
            {
                nuitka_bool tmp_condition_result_24;
                PyObject *tmp_isinstance_inst_9;
                PyObject *tmp_isinstance_cls_9;
                PyObject *tmp_source_name_71;
                PyObject *tmp_mvar_value_16;
                CHECK_OBJECT(var_topwidget);
                tmp_isinstance_inst_9 = var_topwidget;
                tmp_mvar_value_16 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                if (unlikely(tmp_mvar_value_16 == NULL)) {
                    tmp_mvar_value_16 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                }

                if (tmp_mvar_value_16 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 358;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_71 = tmp_mvar_value_16;
                tmp_isinstance_cls_9 = LOOKUP_ATTRIBUTE(tmp_source_name_71, const_str_plain_QWizard);
                if (tmp_isinstance_cls_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 358;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_9, tmp_isinstance_cls_9);
                Py_DECREF(tmp_isinstance_cls_9);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 358;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_24 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_24 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_24;
                } else {
                    goto branch_no_24;
                }
                branch_yes_24:;
                {
                    PyObject *tmp_called_instance_28;
                    PyObject *tmp_call_result_21;
                    PyObject *tmp_args_element_name_65;
                    CHECK_OBJECT(var_topwidget);
                    tmp_called_instance_28 = var_topwidget;
                    CHECK_OBJECT(var_widget);
                    tmp_args_element_name_65 = var_widget;
                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 359;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_65};
                        tmp_call_result_21 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_28, const_str_plain_addPage, call_args);
                    }

                    if (tmp_call_result_21 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 359;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF(tmp_call_result_21);
                }
                goto branch_end_24;
                branch_no_24:;
                {
                    nuitka_bool tmp_condition_result_25;
                    PyObject *tmp_isinstance_inst_10;
                    PyObject *tmp_isinstance_cls_10;
                    PyObject *tmp_source_name_72;
                    PyObject *tmp_mvar_value_17;
                    CHECK_OBJECT(var_topwidget);
                    tmp_isinstance_inst_10 = var_topwidget;
                    tmp_mvar_value_17 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                    if (unlikely(tmp_mvar_value_17 == NULL)) {
                        tmp_mvar_value_17 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                    }

                    if (tmp_mvar_value_17 == NULL) {

                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                        CHAIN_EXCEPTION(exception_value);

                        exception_lineno = 361;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_72 = tmp_mvar_value_17;
                    tmp_isinstance_cls_10 = LOOKUP_ATTRIBUTE(tmp_source_name_72, const_str_plain_QStackedWidget);
                    if (tmp_isinstance_cls_10 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 361;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_10, tmp_isinstance_cls_10);
                    Py_DECREF(tmp_isinstance_cls_10);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 361;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_25 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if (tmp_condition_result_25 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_25;
                    } else {
                        goto branch_no_25;
                    }
                    branch_yes_25:;
                    {
                        PyObject *tmp_called_instance_29;
                        PyObject *tmp_call_result_22;
                        PyObject *tmp_args_element_name_66;
                        CHECK_OBJECT(var_topwidget);
                        tmp_called_instance_29 = var_topwidget;
                        CHECK_OBJECT(var_widget);
                        tmp_args_element_name_66 = var_widget;
                        frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 362;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_66};
                            tmp_call_result_22 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_29, const_str_plain_addWidget, call_args);
                        }

                        if (tmp_call_result_22 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 362;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        Py_DECREF(tmp_call_result_22);
                    }
                    goto branch_end_25;
                    branch_no_25:;
                    {
                        nuitka_bool tmp_condition_result_26;
                        PyObject *tmp_isinstance_inst_11;
                        PyObject *tmp_isinstance_cls_11;
                        PyObject *tmp_tuple_element_4;
                        PyObject *tmp_source_name_73;
                        PyObject *tmp_mvar_value_18;
                        PyObject *tmp_source_name_74;
                        PyObject *tmp_mvar_value_19;
                        CHECK_OBJECT(var_topwidget);
                        tmp_isinstance_inst_11 = var_topwidget;
                        tmp_mvar_value_18 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                        if (unlikely(tmp_mvar_value_18 == NULL)) {
                            tmp_mvar_value_18 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                        }

                        if (tmp_mvar_value_18 == NULL) {

                            exception_type = PyExc_NameError;
                            Py_INCREF(exception_type);
                            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                            CHAIN_EXCEPTION(exception_value);

                            exception_lineno = 364;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_73 = tmp_mvar_value_18;
                        tmp_tuple_element_4 = LOOKUP_ATTRIBUTE(tmp_source_name_73, const_str_plain_QDockWidget);
                        if (tmp_tuple_element_4 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 364;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_isinstance_cls_11 = PyTuple_New(2);
                        PyTuple_SET_ITEM(tmp_isinstance_cls_11, 0, tmp_tuple_element_4);
                        tmp_mvar_value_19 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                        if (unlikely(tmp_mvar_value_19 == NULL)) {
                            tmp_mvar_value_19 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                        }

                        if (tmp_mvar_value_19 == NULL) {
                            Py_DECREF(tmp_isinstance_cls_11);
                            exception_type = PyExc_NameError;
                            Py_INCREF(exception_type);
                            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                            CHAIN_EXCEPTION(exception_value);

                            exception_lineno = 364;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_74 = tmp_mvar_value_19;
                        tmp_tuple_element_4 = LOOKUP_ATTRIBUTE(tmp_source_name_74, const_str_plain_QScrollArea);
                        if (tmp_tuple_element_4 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_isinstance_cls_11);

                            exception_lineno = 364;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        PyTuple_SET_ITEM(tmp_isinstance_cls_11, 1, tmp_tuple_element_4);
                        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_11, tmp_isinstance_cls_11);
                        Py_DECREF(tmp_isinstance_cls_11);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 364;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_26 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if (tmp_condition_result_26 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_26;
                        } else {
                            goto branch_no_26;
                        }
                        branch_yes_26:;
                        {
                            PyObject *tmp_called_instance_30;
                            PyObject *tmp_call_result_23;
                            PyObject *tmp_args_element_name_67;
                            CHECK_OBJECT(var_topwidget);
                            tmp_called_instance_30 = var_topwidget;
                            CHECK_OBJECT(var_widget);
                            tmp_args_element_name_67 = var_widget;
                            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 365;
                            {
                                PyObject *call_args[] = {tmp_args_element_name_67};
                                tmp_call_result_23 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_30, const_str_plain_setWidget, call_args);
                            }

                            if (tmp_call_result_23 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 365;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            Py_DECREF(tmp_call_result_23);
                        }
                        goto branch_end_26;
                        branch_no_26:;
                        {
                            nuitka_bool tmp_condition_result_27;
                            PyObject *tmp_isinstance_inst_12;
                            PyObject *tmp_isinstance_cls_12;
                            PyObject *tmp_source_name_75;
                            PyObject *tmp_mvar_value_20;
                            CHECK_OBJECT(var_topwidget);
                            tmp_isinstance_inst_12 = var_topwidget;
                            tmp_mvar_value_20 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                            if (unlikely(tmp_mvar_value_20 == NULL)) {
                                tmp_mvar_value_20 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                            }

                            if (tmp_mvar_value_20 == NULL) {

                                exception_type = PyExc_NameError;
                                Py_INCREF(exception_type);
                                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                CHAIN_EXCEPTION(exception_value);

                                exception_lineno = 367;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_source_name_75 = tmp_mvar_value_20;
                            tmp_isinstance_cls_12 = LOOKUP_ATTRIBUTE(tmp_source_name_75, const_str_plain_QMainWindow);
                            if (tmp_isinstance_cls_12 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 367;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_12, tmp_isinstance_cls_12);
                            Py_DECREF(tmp_isinstance_cls_12);
                            if (tmp_res == -1) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 367;
                                type_description_1 = "oooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_condition_result_27 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if (tmp_condition_result_27 == NUITKA_BOOL_TRUE) {
                                goto branch_yes_27;
                            } else {
                                goto branch_no_27;
                            }
                            branch_yes_27:;
                            {
                                nuitka_bool tmp_condition_result_28;
                                PyObject *tmp_compexpr_left_13;
                                PyObject *tmp_compexpr_right_13;
                                PyObject *tmp_type_arg_1;
                                PyObject *tmp_source_name_76;
                                PyObject *tmp_mvar_value_21;
                                CHECK_OBJECT(var_widget);
                                tmp_type_arg_1 = var_widget;
                                tmp_compexpr_left_13 = BUILTIN_TYPE1(tmp_type_arg_1);
                                assert(!(tmp_compexpr_left_13 == NULL));
                                tmp_mvar_value_21 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                                if (unlikely(tmp_mvar_value_21 == NULL)) {
                                    tmp_mvar_value_21 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                                }

                                if (tmp_mvar_value_21 == NULL) {
                                    Py_DECREF(tmp_compexpr_left_13);
                                    exception_type = PyExc_NameError;
                                    Py_INCREF(exception_type);
                                    exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                                    exception_tb = NULL;
                                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                    CHAIN_EXCEPTION(exception_value);

                                    exception_lineno = 368;
                                    type_description_1 = "oooooooooooooooo";
                                    goto frame_exception_exit_1;
                                }

                                tmp_source_name_76 = tmp_mvar_value_21;
                                tmp_compexpr_right_13 = LOOKUP_ATTRIBUTE(tmp_source_name_76, const_str_plain_QWidget);
                                if (tmp_compexpr_right_13 == NULL) {
                                    assert(ERROR_OCCURRED());

                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                    Py_DECREF(tmp_compexpr_left_13);

                                    exception_lineno = 368;
                                    type_description_1 = "oooooooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_13, tmp_compexpr_right_13);
                                Py_DECREF(tmp_compexpr_left_13);
                                Py_DECREF(tmp_compexpr_right_13);
                                if (tmp_res == -1) {
                                    assert(ERROR_OCCURRED());

                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                    exception_lineno = 368;
                                    type_description_1 = "oooooooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_condition_result_28 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                if (tmp_condition_result_28 == NUITKA_BOOL_TRUE) {
                                    goto branch_yes_28;
                                } else {
                                    goto branch_no_28;
                                }
                                branch_yes_28:;
                                {
                                    PyObject *tmp_called_instance_31;
                                    PyObject *tmp_call_result_24;
                                    PyObject *tmp_args_element_name_68;
                                    CHECK_OBJECT(var_topwidget);
                                    tmp_called_instance_31 = var_topwidget;
                                    CHECK_OBJECT(var_widget);
                                    tmp_args_element_name_68 = var_widget;
                                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 369;
                                    {
                                        PyObject *call_args[] = {tmp_args_element_name_68};
                                        tmp_call_result_24 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_31, const_str_plain_setCentralWidget, call_args);
                                    }

                                    if (tmp_call_result_24 == NULL) {
                                        assert(ERROR_OCCURRED());

                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                        exception_lineno = 369;
                                        type_description_1 = "oooooooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    Py_DECREF(tmp_call_result_24);
                                }
                                goto branch_end_28;
                                branch_no_28:;
                                {
                                    nuitka_bool tmp_condition_result_29;
                                    PyObject *tmp_isinstance_inst_13;
                                    PyObject *tmp_isinstance_cls_13;
                                    PyObject *tmp_source_name_77;
                                    PyObject *tmp_mvar_value_22;
                                    CHECK_OBJECT(var_widget);
                                    tmp_isinstance_inst_13 = var_widget;
                                    tmp_mvar_value_22 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                                    if (unlikely(tmp_mvar_value_22 == NULL)) {
                                        tmp_mvar_value_22 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                                    }

                                    if (tmp_mvar_value_22 == NULL) {

                                        exception_type = PyExc_NameError;
                                        Py_INCREF(exception_type);
                                        exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                                        exception_tb = NULL;
                                        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                        CHAIN_EXCEPTION(exception_value);

                                        exception_lineno = 370;
                                        type_description_1 = "oooooooooooooooo";
                                        goto frame_exception_exit_1;
                                    }

                                    tmp_source_name_77 = tmp_mvar_value_22;
                                    tmp_isinstance_cls_13 = LOOKUP_ATTRIBUTE(tmp_source_name_77, const_str_plain_QToolBar);
                                    if (tmp_isinstance_cls_13 == NULL) {
                                        assert(ERROR_OCCURRED());

                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                        exception_lineno = 370;
                                        type_description_1 = "oooooooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_13, tmp_isinstance_cls_13);
                                    Py_DECREF(tmp_isinstance_cls_13);
                                    if (tmp_res == -1) {
                                        assert(ERROR_OCCURRED());

                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                        exception_lineno = 370;
                                        type_description_1 = "oooooooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_condition_result_29 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                    if (tmp_condition_result_29 == NUITKA_BOOL_TRUE) {
                                        goto branch_yes_29;
                                    } else {
                                        goto branch_no_29;
                                    }
                                    branch_yes_29:;
                                    {
                                        PyObject *tmp_assign_source_20;
                                        PyObject *tmp_called_instance_32;
                                        PyObject *tmp_source_name_78;
                                        PyObject *tmp_args_element_name_69;
                                        PyObject *tmp_args_element_name_70;
                                        CHECK_OBJECT(par_self);
                                        tmp_source_name_78 = par_self;
                                        tmp_called_instance_32 = LOOKUP_ATTRIBUTE(tmp_source_name_78, const_str_plain_wprops);
                                        if (tmp_called_instance_32 == NULL) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 371;
                                            type_description_1 = "oooooooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        CHECK_OBJECT(par_elem);
                                        tmp_args_element_name_69 = par_elem;
                                        tmp_args_element_name_70 = const_str_plain_toolBarArea;
                                        frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 371;
                                        {
                                            PyObject *call_args[] = {tmp_args_element_name_69, tmp_args_element_name_70};
                                            tmp_assign_source_20 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_32, const_str_plain_getAttribute, call_args);
                                        }

                                        Py_DECREF(tmp_called_instance_32);
                                        if (tmp_assign_source_20 == NULL) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 371;
                                            type_description_1 = "oooooooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        assert(var_tbArea == NULL);
                                        var_tbArea = tmp_assign_source_20;
                                    }
                                    {
                                        nuitka_bool tmp_condition_result_30;
                                        PyObject *tmp_compexpr_left_14;
                                        PyObject *tmp_compexpr_right_14;
                                        CHECK_OBJECT(var_tbArea);
                                        tmp_compexpr_left_14 = var_tbArea;
                                        tmp_compexpr_right_14 = Py_None;
                                        tmp_condition_result_30 = (tmp_compexpr_left_14 == tmp_compexpr_right_14) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                        if (tmp_condition_result_30 == NUITKA_BOOL_TRUE) {
                                            goto branch_yes_30;
                                        } else {
                                            goto branch_no_30;
                                        }
                                        branch_yes_30:;
                                        {
                                            PyObject *tmp_called_instance_33;
                                            PyObject *tmp_call_result_25;
                                            PyObject *tmp_args_element_name_71;
                                            CHECK_OBJECT(var_topwidget);
                                            tmp_called_instance_33 = var_topwidget;
                                            CHECK_OBJECT(var_widget);
                                            tmp_args_element_name_71 = var_widget;
                                            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 374;
                                            {
                                                PyObject *call_args[] = {tmp_args_element_name_71};
                                                tmp_call_result_25 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_33, const_str_plain_addToolBar, call_args);
                                            }

                                            if (tmp_call_result_25 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 374;
                                                type_description_1 = "oooooooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            Py_DECREF(tmp_call_result_25);
                                        }
                                        goto branch_end_30;
                                        branch_no_30:;
                                        {
                                            PyObject *tmp_called_instance_34;
                                            PyObject *tmp_call_result_26;
                                            PyObject *tmp_args_element_name_72;
                                            PyObject *tmp_args_element_name_73;
                                            CHECK_OBJECT(var_topwidget);
                                            tmp_called_instance_34 = var_topwidget;
                                            CHECK_OBJECT(var_tbArea);
                                            tmp_args_element_name_72 = var_tbArea;
                                            CHECK_OBJECT(var_widget);
                                            tmp_args_element_name_73 = var_widget;
                                            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 376;
                                            {
                                                PyObject *call_args[] = {tmp_args_element_name_72, tmp_args_element_name_73};
                                                tmp_call_result_26 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_34, const_str_plain_addToolBar, call_args);
                                            }

                                            if (tmp_call_result_26 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 376;
                                                type_description_1 = "oooooooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            Py_DECREF(tmp_call_result_26);
                                        }
                                        branch_end_30:;
                                    }
                                    {
                                        PyObject *tmp_assign_source_21;
                                        PyObject *tmp_called_instance_35;
                                        PyObject *tmp_source_name_79;
                                        PyObject *tmp_args_element_name_74;
                                        PyObject *tmp_args_element_name_75;
                                        CHECK_OBJECT(par_self);
                                        tmp_source_name_79 = par_self;
                                        tmp_called_instance_35 = LOOKUP_ATTRIBUTE(tmp_source_name_79, const_str_plain_wprops);
                                        if (tmp_called_instance_35 == NULL) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 378;
                                            type_description_1 = "oooooooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        CHECK_OBJECT(par_elem);
                                        tmp_args_element_name_74 = par_elem;
                                        tmp_args_element_name_75 = const_str_plain_toolBarBreak;
                                        frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 378;
                                        {
                                            PyObject *call_args[] = {tmp_args_element_name_74, tmp_args_element_name_75};
                                            tmp_assign_source_21 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_35, const_str_plain_getAttribute, call_args);
                                        }

                                        Py_DECREF(tmp_called_instance_35);
                                        if (tmp_assign_source_21 == NULL) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 378;
                                            type_description_1 = "oooooooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        assert(var_tbBreak == NULL);
                                        var_tbBreak = tmp_assign_source_21;
                                    }
                                    {
                                        nuitka_bool tmp_condition_result_31;
                                        int tmp_truth_name_2;
                                        CHECK_OBJECT(var_tbBreak);
                                        tmp_truth_name_2 = CHECK_IF_TRUE(var_tbBreak);
                                        if (tmp_truth_name_2 == -1) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 380;
                                            type_description_1 = "oooooooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_condition_result_31 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                        if (tmp_condition_result_31 == NUITKA_BOOL_TRUE) {
                                            goto branch_yes_31;
                                        } else {
                                            goto branch_no_31;
                                        }
                                        branch_yes_31:;
                                        {
                                            PyObject *tmp_called_instance_36;
                                            PyObject *tmp_call_result_27;
                                            PyObject *tmp_args_element_name_76;
                                            CHECK_OBJECT(var_topwidget);
                                            tmp_called_instance_36 = var_topwidget;
                                            CHECK_OBJECT(var_widget);
                                            tmp_args_element_name_76 = var_widget;
                                            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 381;
                                            {
                                                PyObject *call_args[] = {tmp_args_element_name_76};
                                                tmp_call_result_27 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_36, const_str_plain_insertToolBarBreak, call_args);
                                            }

                                            if (tmp_call_result_27 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 381;
                                                type_description_1 = "oooooooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            Py_DECREF(tmp_call_result_27);
                                        }
                                        branch_no_31:;
                                    }
                                    goto branch_end_29;
                                    branch_no_29:;
                                    {
                                        nuitka_bool tmp_condition_result_32;
                                        PyObject *tmp_isinstance_inst_14;
                                        PyObject *tmp_isinstance_cls_14;
                                        PyObject *tmp_source_name_80;
                                        PyObject *tmp_mvar_value_23;
                                        CHECK_OBJECT(var_widget);
                                        tmp_isinstance_inst_14 = var_widget;
                                        tmp_mvar_value_23 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                                        if (unlikely(tmp_mvar_value_23 == NULL)) {
                                            tmp_mvar_value_23 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                                        }

                                        if (tmp_mvar_value_23 == NULL) {

                                            exception_type = PyExc_NameError;
                                            Py_INCREF(exception_type);
                                            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                                            exception_tb = NULL;
                                            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                            CHAIN_EXCEPTION(exception_value);

                                            exception_lineno = 383;
                                            type_description_1 = "oooooooooooooooo";
                                            goto frame_exception_exit_1;
                                        }

                                        tmp_source_name_80 = tmp_mvar_value_23;
                                        tmp_isinstance_cls_14 = LOOKUP_ATTRIBUTE(tmp_source_name_80, const_str_plain_QMenuBar);
                                        if (tmp_isinstance_cls_14 == NULL) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 383;
                                            type_description_1 = "oooooooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_14, tmp_isinstance_cls_14);
                                        Py_DECREF(tmp_isinstance_cls_14);
                                        if (tmp_res == -1) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 383;
                                            type_description_1 = "oooooooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_condition_result_32 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                        if (tmp_condition_result_32 == NUITKA_BOOL_TRUE) {
                                            goto branch_yes_32;
                                        } else {
                                            goto branch_no_32;
                                        }
                                        branch_yes_32:;
                                        {
                                            PyObject *tmp_called_instance_37;
                                            PyObject *tmp_call_result_28;
                                            PyObject *tmp_args_element_name_77;
                                            CHECK_OBJECT(var_topwidget);
                                            tmp_called_instance_37 = var_topwidget;
                                            CHECK_OBJECT(var_widget);
                                            tmp_args_element_name_77 = var_widget;
                                            frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 384;
                                            {
                                                PyObject *call_args[] = {tmp_args_element_name_77};
                                                tmp_call_result_28 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_37, const_str_plain_setMenuBar, call_args);
                                            }

                                            if (tmp_call_result_28 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 384;
                                                type_description_1 = "oooooooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            Py_DECREF(tmp_call_result_28);
                                        }
                                        goto branch_end_32;
                                        branch_no_32:;
                                        {
                                            nuitka_bool tmp_condition_result_33;
                                            PyObject *tmp_isinstance_inst_15;
                                            PyObject *tmp_isinstance_cls_15;
                                            PyObject *tmp_source_name_81;
                                            PyObject *tmp_mvar_value_24;
                                            CHECK_OBJECT(var_widget);
                                            tmp_isinstance_inst_15 = var_widget;
                                            tmp_mvar_value_24 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                                            if (unlikely(tmp_mvar_value_24 == NULL)) {
                                                tmp_mvar_value_24 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                                            }

                                            if (tmp_mvar_value_24 == NULL) {

                                                exception_type = PyExc_NameError;
                                                Py_INCREF(exception_type);
                                                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                                                exception_tb = NULL;
                                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                                CHAIN_EXCEPTION(exception_value);

                                                exception_lineno = 385;
                                                type_description_1 = "oooooooooooooooo";
                                                goto frame_exception_exit_1;
                                            }

                                            tmp_source_name_81 = tmp_mvar_value_24;
                                            tmp_isinstance_cls_15 = LOOKUP_ATTRIBUTE(tmp_source_name_81, const_str_plain_QStatusBar);
                                            if (tmp_isinstance_cls_15 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 385;
                                                type_description_1 = "oooooooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_15, tmp_isinstance_cls_15);
                                            Py_DECREF(tmp_isinstance_cls_15);
                                            if (tmp_res == -1) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 385;
                                                type_description_1 = "oooooooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_condition_result_33 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                            if (tmp_condition_result_33 == NUITKA_BOOL_TRUE) {
                                                goto branch_yes_33;
                                            } else {
                                                goto branch_no_33;
                                            }
                                            branch_yes_33:;
                                            {
                                                PyObject *tmp_called_instance_38;
                                                PyObject *tmp_call_result_29;
                                                PyObject *tmp_args_element_name_78;
                                                CHECK_OBJECT(var_topwidget);
                                                tmp_called_instance_38 = var_topwidget;
                                                CHECK_OBJECT(var_widget);
                                                tmp_args_element_name_78 = var_widget;
                                                frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 386;
                                                {
                                                    PyObject *call_args[] = {tmp_args_element_name_78};
                                                    tmp_call_result_29 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_38, const_str_plain_setStatusBar, call_args);
                                                }

                                                if (tmp_call_result_29 == NULL) {
                                                    assert(ERROR_OCCURRED());

                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                    exception_lineno = 386;
                                                    type_description_1 = "oooooooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                Py_DECREF(tmp_call_result_29);
                                            }
                                            goto branch_end_33;
                                            branch_no_33:;
                                            {
                                                nuitka_bool tmp_condition_result_34;
                                                PyObject *tmp_isinstance_inst_16;
                                                PyObject *tmp_isinstance_cls_16;
                                                PyObject *tmp_source_name_82;
                                                PyObject *tmp_mvar_value_25;
                                                CHECK_OBJECT(var_widget);
                                                tmp_isinstance_inst_16 = var_widget;
                                                tmp_mvar_value_25 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                                                if (unlikely(tmp_mvar_value_25 == NULL)) {
                                                    tmp_mvar_value_25 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                                                }

                                                if (tmp_mvar_value_25 == NULL) {

                                                    exception_type = PyExc_NameError;
                                                    Py_INCREF(exception_type);
                                                    exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                                                    exception_tb = NULL;
                                                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                                    CHAIN_EXCEPTION(exception_value);

                                                    exception_lineno = 387;
                                                    type_description_1 = "oooooooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }

                                                tmp_source_name_82 = tmp_mvar_value_25;
                                                tmp_isinstance_cls_16 = LOOKUP_ATTRIBUTE(tmp_source_name_82, const_str_plain_QDockWidget);
                                                if (tmp_isinstance_cls_16 == NULL) {
                                                    assert(ERROR_OCCURRED());

                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                    exception_lineno = 387;
                                                    type_description_1 = "oooooooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_16, tmp_isinstance_cls_16);
                                                Py_DECREF(tmp_isinstance_cls_16);
                                                if (tmp_res == -1) {
                                                    assert(ERROR_OCCURRED());

                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                    exception_lineno = 387;
                                                    type_description_1 = "oooooooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_condition_result_34 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                if (tmp_condition_result_34 == NUITKA_BOOL_TRUE) {
                                                    goto branch_yes_34;
                                                } else {
                                                    goto branch_no_34;
                                                }
                                                branch_yes_34:;
                                                {
                                                    PyObject *tmp_assign_source_22;
                                                    PyObject *tmp_called_instance_39;
                                                    PyObject *tmp_source_name_83;
                                                    PyObject *tmp_args_element_name_79;
                                                    PyObject *tmp_args_element_name_80;
                                                    CHECK_OBJECT(par_self);
                                                    tmp_source_name_83 = par_self;
                                                    tmp_called_instance_39 = LOOKUP_ATTRIBUTE(tmp_source_name_83, const_str_plain_wprops);
                                                    if (tmp_called_instance_39 == NULL) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                        exception_lineno = 388;
                                                        type_description_1 = "oooooooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    CHECK_OBJECT(par_elem);
                                                    tmp_args_element_name_79 = par_elem;
                                                    tmp_args_element_name_80 = const_str_plain_dockWidgetArea;
                                                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 388;
                                                    {
                                                        PyObject *call_args[] = {tmp_args_element_name_79, tmp_args_element_name_80};
                                                        tmp_assign_source_22 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_39, const_str_plain_getAttribute, call_args);
                                                    }

                                                    Py_DECREF(tmp_called_instance_39);
                                                    if (tmp_assign_source_22 == NULL) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                        exception_lineno = 388;
                                                        type_description_1 = "oooooooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    assert(var_dwArea == NULL);
                                                    var_dwArea = tmp_assign_source_22;
                                                }
                                                {
                                                    PyObject *tmp_called_name_18;
                                                    PyObject *tmp_source_name_84;
                                                    PyObject *tmp_call_result_30;
                                                    PyObject *tmp_args_element_name_81;
                                                    PyObject *tmp_called_instance_40;
                                                    PyObject *tmp_source_name_85;
                                                    PyObject *tmp_mvar_value_26;
                                                    PyObject *tmp_args_element_name_82;
                                                    PyObject *tmp_args_element_name_83;
                                                    CHECK_OBJECT(var_topwidget);
                                                    tmp_source_name_84 = var_topwidget;
                                                    tmp_called_name_18 = LOOKUP_ATTRIBUTE(tmp_source_name_84, const_str_plain_addDockWidget);
                                                    if (tmp_called_name_18 == NULL) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                        exception_lineno = 389;
                                                        type_description_1 = "oooooooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_mvar_value_26 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtCore);

                                                    if (unlikely(tmp_mvar_value_26 == NULL)) {
                                                        tmp_mvar_value_26 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtCore);
                                                    }

                                                    if (tmp_mvar_value_26 == NULL) {
                                                        Py_DECREF(tmp_called_name_18);
                                                        exception_type = PyExc_NameError;
                                                        Py_INCREF(exception_type);
                                                        exception_value = UNSTREAM_STRING(&constant_bin[ 1468 ], 28, 0);
                                                        exception_tb = NULL;
                                                        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                                        CHAIN_EXCEPTION(exception_value);

                                                        exception_lineno = 389;
                                                        type_description_1 = "oooooooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }

                                                    tmp_source_name_85 = tmp_mvar_value_26;
                                                    tmp_called_instance_40 = LOOKUP_ATTRIBUTE(tmp_source_name_85, const_str_plain_Qt);
                                                    if (tmp_called_instance_40 == NULL) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                                        Py_DECREF(tmp_called_name_18);

                                                        exception_lineno = 389;
                                                        type_description_1 = "oooooooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    CHECK_OBJECT(var_dwArea);
                                                    tmp_args_element_name_82 = var_dwArea;
                                                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 389;
                                                    {
                                                        PyObject *call_args[] = {tmp_args_element_name_82};
                                                        tmp_args_element_name_81 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_40, const_str_plain_DockWidgetArea, call_args);
                                                    }

                                                    Py_DECREF(tmp_called_instance_40);
                                                    if (tmp_args_element_name_81 == NULL) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                                        Py_DECREF(tmp_called_name_18);

                                                        exception_lineno = 389;
                                                        type_description_1 = "oooooooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    CHECK_OBJECT(var_widget);
                                                    tmp_args_element_name_83 = var_widget;
                                                    frame_2debc51c32a41ce980416edeb6da9de2->m_frame.f_lineno = 389;
                                                    {
                                                        PyObject *call_args[] = {tmp_args_element_name_81, tmp_args_element_name_83};
                                                        tmp_call_result_30 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_18, call_args);
                                                    }

                                                    Py_DECREF(tmp_called_name_18);
                                                    Py_DECREF(tmp_args_element_name_81);
                                                    if (tmp_call_result_30 == NULL) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                        exception_lineno = 389;
                                                        type_description_1 = "oooooooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    Py_DECREF(tmp_call_result_30);
                                                }
                                                branch_no_34:;
                                            }
                                            branch_end_33:;
                                        }
                                        branch_end_32:;
                                    }
                                    branch_end_29:;
                                }
                                branch_end_28:;
                            }
                            branch_no_27:;
                        }
                        branch_end_26:;
                    }
                    branch_end_25:;
                }
                branch_end_24:;
            }
            branch_end_21:;
        }
        branch_end_18:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2debc51c32a41ce980416edeb6da9de2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2debc51c32a41ce980416edeb6da9de2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2debc51c32a41ce980416edeb6da9de2, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_2debc51c32a41ce980416edeb6da9de2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2debc51c32a41ce980416edeb6da9de2, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2debc51c32a41ce980416edeb6da9de2,
        type_description_1,
        par_self,
        par_elem,
        var_widget_class,
        var_parent,
        var_widget,
        var_bg_i18n,
        var_bg_name,
        var_bg,
        var_lay,
        var_lp,
        var_topwidget,
        var_icon,
        var_tooltip,
        var_tbArea,
        var_tbBreak,
        var_dwArea
    );


    // Release cached frame.
    if (frame_2debc51c32a41ce980416edeb6da9de2 == cache_frame_2debc51c32a41ce980416edeb6da9de2) {
        Py_DECREF(frame_2debc51c32a41ce980416edeb6da9de2);
    }
    cache_frame_2debc51c32a41ce980416edeb6da9de2 = NULL;

    assertFrameObject(frame_2debc51c32a41ce980416edeb6da9de2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_15_createWidget);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_widget_class);
    Py_DECREF(var_widget_class);
    var_widget_class = NULL;

    CHECK_OBJECT((PyObject *)var_parent);
    Py_DECREF(var_parent);
    var_parent = NULL;

    CHECK_OBJECT((PyObject *)var_widget);
    Py_DECREF(var_widget);
    var_widget = NULL;

    Py_XDECREF(var_bg_i18n);
    var_bg_i18n = NULL;

    Py_XDECREF(var_bg_name);
    var_bg_name = NULL;

    Py_XDECREF(var_bg);
    var_bg = NULL;

    Py_XDECREF(var_lay);
    var_lay = NULL;

    Py_XDECREF(var_lp);
    var_lp = NULL;

    CHECK_OBJECT((PyObject *)var_topwidget);
    Py_DECREF(var_topwidget);
    var_topwidget = NULL;

    Py_XDECREF(var_icon);
    var_icon = NULL;

    Py_XDECREF(var_tooltip);
    var_tooltip = NULL;

    Py_XDECREF(var_tbArea);
    var_tbArea = NULL;

    Py_XDECREF(var_tbBreak);
    var_tbBreak = NULL;

    Py_XDECREF(var_dwArea);
    var_dwArea = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_widget_class);
    var_widget_class = NULL;

    Py_XDECREF(var_parent);
    var_parent = NULL;

    Py_XDECREF(var_widget);
    var_widget = NULL;

    Py_XDECREF(var_bg_i18n);
    var_bg_i18n = NULL;

    Py_XDECREF(var_bg_name);
    var_bg_name = NULL;

    Py_XDECREF(var_bg);
    var_bg = NULL;

    Py_XDECREF(var_lay);
    var_lay = NULL;

    Py_XDECREF(var_lp);
    var_lp = NULL;

    Py_XDECREF(var_topwidget);
    var_topwidget = NULL;

    Py_XDECREF(var_icon);
    var_icon = NULL;

    Py_XDECREF(var_tooltip);
    var_tooltip = NULL;

    Py_XDECREF(var_tbArea);
    var_tbArea = NULL;

    Py_XDECREF(var_tbBreak);
    var_tbBreak = NULL;

    Py_XDECREF(var_dwArea);
    var_dwArea = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_15_createWidget);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_16_handleHeaderView(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_header = python_pars[3];
    PyObject *var_value = NULL;
    struct Nuitka_FrameObject *frame_6a46948e6053641a0ea133769c1802ce;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_6a46948e6053641a0ea133769c1802ce = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_6a46948e6053641a0ea133769c1802ce, codeobj_6a46948e6053641a0ea133769c1802ce, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_6a46948e6053641a0ea133769c1802ce = cache_frame_6a46948e6053641a0ea133769c1802ce;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_6a46948e6053641a0ea133769c1802ce);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_6a46948e6053641a0ea133769c1802ce) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_wprops);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 393;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_getAttribute);
        Py_DECREF(tmp_source_name_1);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 393;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_1 = par_elem;
        CHECK_OBJECT(par_name);
        tmp_left_name_1 = par_name;
        tmp_right_name_1 = const_str_plain_Visible;
        tmp_args_element_name_2 = BINARY_OPERATION_ADD_OBJECT_UNICODE(tmp_left_name_1, tmp_right_name_1);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 393;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 393;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 393;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_value == NULL);
        var_value = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(var_value);
        tmp_compexpr_left_1 = var_value;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 != tmp_compexpr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_3;
            CHECK_OBJECT(par_header);
            tmp_called_instance_1 = par_header;
            CHECK_OBJECT(var_value);
            tmp_args_element_name_3 = var_value;
            frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 395;
            {
                PyObject *call_args[] = {tmp_args_element_name_3};
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_setVisible, call_args);
            }

            if (tmp_call_result_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 395;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_1);
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_4 = par_self;
        tmp_source_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_wprops);
        if (tmp_source_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 397;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_getAttribute);
        Py_DECREF(tmp_source_name_3);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 397;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_4 = par_elem;
        CHECK_OBJECT(par_name);
        tmp_left_name_2 = par_name;
        tmp_right_name_2 = const_str_plain_CascadingSectionResizes;
        tmp_args_element_name_5 = BINARY_OPERATION_ADD_OBJECT_UNICODE(tmp_left_name_2, tmp_right_name_2);
        if (tmp_args_element_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 397;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 397;
        {
            PyObject *call_args[] = {tmp_args_element_name_4, tmp_args_element_name_5};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
        }

        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_5);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 397;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            assert(old != NULL);
            var_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT(var_value);
        tmp_compexpr_left_2 = var_value;
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_2 = (tmp_compexpr_left_2 != tmp_compexpr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_6;
            CHECK_OBJECT(par_header);
            tmp_called_instance_2 = par_header;
            CHECK_OBJECT(var_value);
            tmp_args_element_name_6 = var_value;
            frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 399;
            {
                PyObject *call_args[] = {tmp_args_element_name_6};
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_setCascadingSectionResizes, call_args);
            }

            if (tmp_call_result_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 399;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_2);
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_source_name_6;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        CHECK_OBJECT(par_self);
        tmp_source_name_6 = par_self;
        tmp_source_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_wprops);
        if (tmp_source_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 401;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_getAttribute);
        Py_DECREF(tmp_source_name_5);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 401;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_7 = par_elem;
        CHECK_OBJECT(par_name);
        tmp_left_name_3 = par_name;
        tmp_right_name_3 = const_str_plain_DefaultSectionSize;
        tmp_args_element_name_8 = BINARY_OPERATION_ADD_OBJECT_UNICODE(tmp_left_name_3, tmp_right_name_3);
        if (tmp_args_element_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_3);

            exception_lineno = 401;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 401;
        {
            PyObject *call_args[] = {tmp_args_element_name_7, tmp_args_element_name_8};
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_3, call_args);
        }

        Py_DECREF(tmp_called_name_3);
        Py_DECREF(tmp_args_element_name_8);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 401;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            assert(old != NULL);
            var_value = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT(var_value);
        tmp_compexpr_left_3 = var_value;
        tmp_compexpr_right_3 = Py_None;
        tmp_condition_result_3 = (tmp_compexpr_left_3 != tmp_compexpr_right_3) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_9;
            CHECK_OBJECT(par_header);
            tmp_called_instance_3 = par_header;
            CHECK_OBJECT(var_value);
            tmp_args_element_name_9 = var_value;
            frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 403;
            {
                PyObject *call_args[] = {tmp_args_element_name_9};
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_setDefaultSectionSize, call_args);
            }

            if (tmp_call_result_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 403;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_3);
        }
        branch_no_3:;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_7;
        PyObject *tmp_source_name_8;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        CHECK_OBJECT(par_self);
        tmp_source_name_8 = par_self;
        tmp_source_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_wprops);
        if (tmp_source_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 405;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_getAttribute);
        Py_DECREF(tmp_source_name_7);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 405;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_10 = par_elem;
        CHECK_OBJECT(par_name);
        tmp_left_name_4 = par_name;
        tmp_right_name_4 = const_str_plain_HighlightSections;
        tmp_args_element_name_11 = BINARY_OPERATION_ADD_OBJECT_UNICODE(tmp_left_name_4, tmp_right_name_4);
        if (tmp_args_element_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 405;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 405;
        {
            PyObject *call_args[] = {tmp_args_element_name_10, tmp_args_element_name_11};
            tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_4, call_args);
        }

        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_args_element_name_11);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 405;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            assert(old != NULL);
            var_value = tmp_assign_source_4;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        CHECK_OBJECT(var_value);
        tmp_compexpr_left_4 = var_value;
        tmp_compexpr_right_4 = Py_None;
        tmp_condition_result_4 = (tmp_compexpr_left_4 != tmp_compexpr_right_4) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_4;
            PyObject *tmp_args_element_name_12;
            CHECK_OBJECT(par_header);
            tmp_called_instance_4 = par_header;
            CHECK_OBJECT(var_value);
            tmp_args_element_name_12 = var_value;
            frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 407;
            {
                PyObject *call_args[] = {tmp_args_element_name_12};
                tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_setHighlightSections, call_args);
            }

            if (tmp_call_result_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 407;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_4);
        }
        branch_no_4:;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_name_5;
        PyObject *tmp_source_name_9;
        PyObject *tmp_source_name_10;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_args_element_name_14;
        PyObject *tmp_left_name_5;
        PyObject *tmp_right_name_5;
        CHECK_OBJECT(par_self);
        tmp_source_name_10 = par_self;
        tmp_source_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_wprops);
        if (tmp_source_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 409;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_getAttribute);
        Py_DECREF(tmp_source_name_9);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 409;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_13 = par_elem;
        CHECK_OBJECT(par_name);
        tmp_left_name_5 = par_name;
        tmp_right_name_5 = const_str_plain_MinimumSectionSize;
        tmp_args_element_name_14 = BINARY_OPERATION_ADD_OBJECT_UNICODE(tmp_left_name_5, tmp_right_name_5);
        if (tmp_args_element_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_5);

            exception_lineno = 409;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 409;
        {
            PyObject *call_args[] = {tmp_args_element_name_13, tmp_args_element_name_14};
            tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_5, call_args);
        }

        Py_DECREF(tmp_called_name_5);
        Py_DECREF(tmp_args_element_name_14);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 409;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            assert(old != NULL);
            var_value = tmp_assign_source_5;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        CHECK_OBJECT(var_value);
        tmp_compexpr_left_5 = var_value;
        tmp_compexpr_right_5 = Py_None;
        tmp_condition_result_5 = (tmp_compexpr_left_5 != tmp_compexpr_right_5) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_instance_5;
            PyObject *tmp_call_result_5;
            PyObject *tmp_args_element_name_15;
            CHECK_OBJECT(par_header);
            tmp_called_instance_5 = par_header;
            CHECK_OBJECT(var_value);
            tmp_args_element_name_15 = var_value;
            frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 411;
            {
                PyObject *call_args[] = {tmp_args_element_name_15};
                tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_setMinimumSectionSize, call_args);
            }

            if (tmp_call_result_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 411;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_5);
        }
        branch_no_5:;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_11;
        PyObject *tmp_source_name_12;
        PyObject *tmp_args_element_name_16;
        PyObject *tmp_args_element_name_17;
        PyObject *tmp_left_name_6;
        PyObject *tmp_right_name_6;
        CHECK_OBJECT(par_self);
        tmp_source_name_12 = par_self;
        tmp_source_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_wprops);
        if (tmp_source_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 413;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_getAttribute);
        Py_DECREF(tmp_source_name_11);
        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 413;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_16 = par_elem;
        CHECK_OBJECT(par_name);
        tmp_left_name_6 = par_name;
        tmp_right_name_6 = const_str_plain_ShowSortIndicator;
        tmp_args_element_name_17 = BINARY_OPERATION_ADD_OBJECT_UNICODE(tmp_left_name_6, tmp_right_name_6);
        if (tmp_args_element_name_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_6);

            exception_lineno = 413;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 413;
        {
            PyObject *call_args[] = {tmp_args_element_name_16, tmp_args_element_name_17};
            tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_6, call_args);
        }

        Py_DECREF(tmp_called_name_6);
        Py_DECREF(tmp_args_element_name_17);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 413;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            assert(old != NULL);
            var_value = tmp_assign_source_6;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        CHECK_OBJECT(var_value);
        tmp_compexpr_left_6 = var_value;
        tmp_compexpr_right_6 = Py_None;
        tmp_condition_result_6 = (tmp_compexpr_left_6 != tmp_compexpr_right_6) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_called_instance_6;
            PyObject *tmp_call_result_6;
            PyObject *tmp_args_element_name_18;
            CHECK_OBJECT(par_header);
            tmp_called_instance_6 = par_header;
            CHECK_OBJECT(var_value);
            tmp_args_element_name_18 = var_value;
            frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 415;
            {
                PyObject *call_args[] = {tmp_args_element_name_18};
                tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_setSortIndicatorShown, call_args);
            }

            if (tmp_call_result_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 415;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_6);
        }
        branch_no_6:;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_name_7;
        PyObject *tmp_source_name_13;
        PyObject *tmp_source_name_14;
        PyObject *tmp_args_element_name_19;
        PyObject *tmp_args_element_name_20;
        PyObject *tmp_left_name_7;
        PyObject *tmp_right_name_7;
        CHECK_OBJECT(par_self);
        tmp_source_name_14 = par_self;
        tmp_source_name_13 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_wprops);
        if (tmp_source_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 417;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_getAttribute);
        Py_DECREF(tmp_source_name_13);
        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 417;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_19 = par_elem;
        CHECK_OBJECT(par_name);
        tmp_left_name_7 = par_name;
        tmp_right_name_7 = const_str_plain_StretchLastSection;
        tmp_args_element_name_20 = BINARY_OPERATION_ADD_OBJECT_UNICODE(tmp_left_name_7, tmp_right_name_7);
        if (tmp_args_element_name_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_7);

            exception_lineno = 417;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 417;
        {
            PyObject *call_args[] = {tmp_args_element_name_19, tmp_args_element_name_20};
            tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_7, call_args);
        }

        Py_DECREF(tmp_called_name_7);
        Py_DECREF(tmp_args_element_name_20);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 417;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            assert(old != NULL);
            var_value = tmp_assign_source_7;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        CHECK_OBJECT(var_value);
        tmp_compexpr_left_7 = var_value;
        tmp_compexpr_right_7 = Py_None;
        tmp_condition_result_7 = (tmp_compexpr_left_7 != tmp_compexpr_right_7) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_called_instance_7;
            PyObject *tmp_call_result_7;
            PyObject *tmp_args_element_name_21;
            CHECK_OBJECT(par_header);
            tmp_called_instance_7 = par_header;
            CHECK_OBJECT(var_value);
            tmp_args_element_name_21 = var_value;
            frame_6a46948e6053641a0ea133769c1802ce->m_frame.f_lineno = 419;
            {
                PyObject *call_args[] = {tmp_args_element_name_21};
                tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_setStretchLastSection, call_args);
            }

            if (tmp_call_result_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 419;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_7);
        }
        branch_no_7:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6a46948e6053641a0ea133769c1802ce);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6a46948e6053641a0ea133769c1802ce);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6a46948e6053641a0ea133769c1802ce, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_6a46948e6053641a0ea133769c1802ce->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6a46948e6053641a0ea133769c1802ce, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6a46948e6053641a0ea133769c1802ce,
        type_description_1,
        par_self,
        par_elem,
        par_name,
        par_header,
        var_value
    );


    // Release cached frame.
    if (frame_6a46948e6053641a0ea133769c1802ce == cache_frame_6a46948e6053641a0ea133769c1802ce) {
        Py_DECREF(frame_6a46948e6053641a0ea133769c1802ce);
    }
    cache_frame_6a46948e6053641a0ea133769c1802ce = NULL;

    assertFrameObject(frame_6a46948e6053641a0ea133769c1802ce);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_16_handleHeaderView);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_value);
    Py_DECREF(var_value);
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_value);
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_16_handleHeaderView);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_header);
    Py_DECREF(par_header);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_header);
    Py_DECREF(par_header);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_17_createSpacer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_width = NULL;
    PyObject *var_height = NULL;
    PyObject *var_size_args = NULL;
    PyObject *var_sizeType = NULL;
    PyObject *var_policy = NULL;
    PyObject *var_spacer = NULL;
    PyObject *var_lay = NULL;
    PyObject *var_lp = NULL;
    struct Nuitka_FrameObject *frame_50cfdedaac028bc492c5aef6d5586946;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_50cfdedaac028bc492c5aef6d5586946 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_50cfdedaac028bc492c5aef6d5586946, codeobj_50cfdedaac028bc492c5aef6d5586946, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_50cfdedaac028bc492c5aef6d5586946 = cache_frame_50cfdedaac028bc492c5aef6d5586946;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_50cfdedaac028bc492c5aef6d5586946);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_50cfdedaac028bc492c5aef6d5586946) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_elem);
        tmp_called_instance_1 = par_elem;
        frame_50cfdedaac028bc492c5aef6d5586946->m_frame.f_lineno = 422;
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_findtext, &PyTuple_GET_ITEM(const_tuple_str_digest_2f355444d3ad388bf7643fe371ee6112_tuple, 0));

        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_width == NULL);
        var_width = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(par_elem);
        tmp_called_instance_2 = par_elem;
        frame_50cfdedaac028bc492c5aef6d5586946->m_frame.f_lineno = 423;
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_findtext, &PyTuple_GET_ITEM(const_tuple_str_digest_10ebdb17bdc88158bceb0eeee092f4a7_tuple, 0));

        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 423;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_height == NULL);
        var_height = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT(var_width);
        tmp_compexpr_left_1 = var_width;
        tmp_compexpr_right_1 = Py_None;
        tmp_or_left_value_1 = (tmp_compexpr_left_1 == tmp_compexpr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(var_height);
        tmp_compexpr_left_2 = var_height;
        tmp_compexpr_right_2 = Py_None;
        tmp_or_right_value_1 = (tmp_compexpr_left_2 == tmp_compexpr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_1 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = const_tuple_empty;
            assert(var_size_args == NULL);
            Py_INCREF(tmp_assign_source_3);
            var_size_args = tmp_assign_source_3;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_int_arg_1;
            PyObject *tmp_int_arg_2;
            CHECK_OBJECT(var_width);
            tmp_int_arg_1 = var_width;
            tmp_tuple_element_1 = PyNumber_Int(tmp_int_arg_1);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 428;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_4 = PyTuple_New(2);
            PyTuple_SET_ITEM(tmp_assign_source_4, 0, tmp_tuple_element_1);
            CHECK_OBJECT(var_height);
            tmp_int_arg_2 = var_height;
            tmp_tuple_element_1 = PyNumber_Int(tmp_int_arg_2);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_assign_source_4);

                exception_lineno = 428;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM(tmp_assign_source_4, 1, tmp_tuple_element_1);
            assert(var_size_args == NULL);
            var_size_args = tmp_assign_source_4;
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_wprops);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_getProperty);
        Py_DECREF(tmp_source_name_1);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_1 = par_elem;
        tmp_args_element_name_2 = const_str_plain_sizeType;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_1 == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 431;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_1;
        tmp_source_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_QSizePolicy);
        if (tmp_source_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 431;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_Expanding);
        Py_DECREF(tmp_source_name_3);
        if (tmp_args_element_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 431;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        frame_50cfdedaac028bc492c5aef6d5586946->m_frame.f_lineno = 430;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3};
            tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_3);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_sizeType == NULL);
        var_sizeType = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_source_name_5;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 433;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_2;
        tmp_source_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_QSizePolicy);
        if (tmp_source_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 433;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_Minimum);
        Py_DECREF(tmp_source_name_5);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 433;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_6 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_assign_source_6, 0, tmp_tuple_element_2);
        CHECK_OBJECT(var_sizeType);
        tmp_tuple_element_2 = var_sizeType;
        Py_INCREF(tmp_tuple_element_2);
        PyTuple_SET_ITEM(tmp_assign_source_6, 1, tmp_tuple_element_2);
        assert(var_policy == NULL);
        var_policy = tmp_assign_source_6;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_7;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_source_name_8;
        PyObject *tmp_source_name_9;
        PyObject *tmp_mvar_value_3;
        CHECK_OBJECT(par_self);
        tmp_source_name_7 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_wprops);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 435;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_4 = par_elem;
        tmp_args_element_name_5 = const_str_plain_orientation;
        frame_50cfdedaac028bc492c5aef6d5586946->m_frame.f_lineno = 435;
        {
            PyObject *call_args[] = {tmp_args_element_name_4, tmp_args_element_name_5};
            tmp_compexpr_left_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_3, const_str_plain_getProperty, call_args);
        }

        Py_DECREF(tmp_called_instance_3);
        if (tmp_compexpr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 435;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtCore);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtCore);
        }

        if (tmp_mvar_value_3 == NULL) {
            Py_DECREF(tmp_compexpr_left_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 1468 ], 28, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 435;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_9 = tmp_mvar_value_3;
        tmp_source_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_Qt);
        if (tmp_source_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_3);

            exception_lineno = 435;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_Horizontal);
        Py_DECREF(tmp_source_name_8);
        if (tmp_compexpr_right_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_3);

            exception_lineno = 435;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_left_3);
        Py_DECREF(tmp_compexpr_right_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 435;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT(var_policy);
            tmp_subscribed_name_1 = var_policy;
            tmp_subscript_name_1 = const_int_pos_1;
            tmp_tuple_element_3 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, 1);
            if (tmp_tuple_element_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 436;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_7 = PyTuple_New(2);
            PyTuple_SET_ITEM(tmp_assign_source_7, 0, tmp_tuple_element_3);
            CHECK_OBJECT(var_policy);
            tmp_subscribed_name_2 = var_policy;
            tmp_subscript_name_2 = const_int_0;
            tmp_tuple_element_3 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, 0);
            if (tmp_tuple_element_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_assign_source_7);

                exception_lineno = 436;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM(tmp_assign_source_7, 1, tmp_tuple_element_3);
            {
                PyObject *old = var_policy;
                assert(old != NULL);
                var_policy = tmp_assign_source_7;
                Py_DECREF(old);
            }

        }
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_10;
        PyObject *tmp_source_name_11;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_kw_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_11 = par_self;
        tmp_source_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_factory);
        if (tmp_source_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 438;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_createQObject);
        Py_DECREF(tmp_source_name_10);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 438;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_4 = const_str_plain_QSpacerItem;
        tmp_args_name_1 = PyTuple_New(3);
        Py_INCREF(tmp_tuple_element_4);
        PyTuple_SET_ITEM(tmp_args_name_1, 0, tmp_tuple_element_4);
        CHECK_OBJECT(par_self);
        tmp_called_instance_4 = par_self;
        frame_50cfdedaac028bc492c5aef6d5586946->m_frame.f_lineno = 439;
        tmp_tuple_element_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_uniqueName, &PyTuple_GET_ITEM(const_tuple_str_plain_spacerItem_tuple, 0));

        if (tmp_tuple_element_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_name_1);

            exception_lineno = 439;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_args_name_1, 1, tmp_tuple_element_4);
        CHECK_OBJECT(var_size_args);
        tmp_left_name_1 = var_size_args;
        CHECK_OBJECT(var_policy);
        tmp_right_name_1 = var_policy;
        tmp_tuple_element_4 = BINARY_OPERATION_ADD_TUPLE_TUPLE(tmp_left_name_1, tmp_right_name_1);
        assert(!(tmp_tuple_element_4 == NULL));
        PyTuple_SET_ITEM(tmp_args_name_1, 2, tmp_tuple_element_4);
        tmp_kw_name_1 = PyDict_Copy(const_dict_51eb06cf18b562904cb641f9f5ce3334);
        frame_50cfdedaac028bc492c5aef6d5586946->m_frame.f_lineno = 438;
        tmp_assign_source_8 = CALL_FUNCTION(tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 438;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_spacer == NULL);
        var_spacer = tmp_assign_source_8;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_source_name_12;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_12 = par_self;
        tmp_called_instance_5 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_stack);
        if (tmp_called_instance_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 442;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        frame_50cfdedaac028bc492c5aef6d5586946->m_frame.f_lineno = 442;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, const_str_plain_topIsLayout);
        Py_DECREF(tmp_called_instance_5);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 442;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 442;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_1);
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_source_name_13;
            CHECK_OBJECT(par_self);
            tmp_source_name_13 = par_self;
            tmp_called_instance_6 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_stack);
            if (tmp_called_instance_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 443;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            frame_50cfdedaac028bc492c5aef6d5586946->m_frame.f_lineno = 443;
            tmp_assign_source_9 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, const_str_plain_peek);
            Py_DECREF(tmp_called_instance_6);
            if (tmp_assign_source_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 443;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_lay == NULL);
            var_lay = tmp_assign_source_9;
        }
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_source_name_14;
            PyObject *tmp_subscript_name_3;
            CHECK_OBJECT(par_elem);
            tmp_source_name_14 = par_elem;
            tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_attrib);
            if (tmp_subscribed_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 444;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_3 = const_str_digest_fef1f988ce622611673dba0e4ecba271;
            tmp_assign_source_10 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_3, tmp_subscript_name_3);
            Py_DECREF(tmp_subscribed_name_3);
            if (tmp_assign_source_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 444;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_lp == NULL);
            var_lp = tmp_assign_source_10;
        }
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_isinstance_inst_1;
            PyObject *tmp_isinstance_cls_1;
            PyObject *tmp_source_name_15;
            PyObject *tmp_mvar_value_4;
            CHECK_OBJECT(var_lay);
            tmp_isinstance_inst_1 = var_lay;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

            if (unlikely(tmp_mvar_value_4 == NULL)) {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
            }

            if (tmp_mvar_value_4 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 446;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_15 = tmp_mvar_value_4;
            tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_QFormLayout);
            if (tmp_isinstance_cls_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 446;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
            Py_DECREF(tmp_isinstance_cls_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 446;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_name_3;
                PyObject *tmp_source_name_16;
                PyObject *tmp_call_result_2;
                PyObject *tmp_args_element_name_6;
                PyObject *tmp_subscribed_name_4;
                PyObject *tmp_subscript_name_4;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_called_instance_7;
                PyObject *tmp_args_element_name_8;
                PyObject *tmp_args_element_name_9;
                CHECK_OBJECT(var_lay);
                tmp_source_name_16 = var_lay;
                tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_setItem);
                if (tmp_called_name_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 447;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_lp);
                tmp_subscribed_name_4 = var_lp;
                tmp_subscript_name_4 = const_int_0;
                tmp_args_element_name_6 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_4, tmp_subscript_name_4, 0);
                if (tmp_args_element_name_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_3);

                    exception_lineno = 447;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_self);
                tmp_called_instance_7 = par_self;
                CHECK_OBJECT(var_lp);
                tmp_args_element_name_8 = var_lp;
                frame_50cfdedaac028bc492c5aef6d5586946->m_frame.f_lineno = 447;
                {
                    PyObject *call_args[] = {tmp_args_element_name_8};
                    tmp_args_element_name_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain__form_layout_role, call_args);
                }

                if (tmp_args_element_name_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_3);
                    Py_DECREF(tmp_args_element_name_6);

                    exception_lineno = 447;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_spacer);
                tmp_args_element_name_9 = var_spacer;
                frame_50cfdedaac028bc492c5aef6d5586946->m_frame.f_lineno = 447;
                {
                    PyObject *call_args[] = {tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_9};
                    tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_3, call_args);
                }

                Py_DECREF(tmp_called_name_3);
                Py_DECREF(tmp_args_element_name_6);
                Py_DECREF(tmp_args_element_name_7);
                if (tmp_call_result_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 447;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_2);
            }
            goto branch_end_4;
            branch_no_4:;
            {
                PyObject *tmp_dircall_arg1_1;
                PyObject *tmp_source_name_17;
                PyObject *tmp_dircall_arg2_1;
                PyObject *tmp_tuple_element_5;
                PyObject *tmp_dircall_arg3_1;
                PyObject *tmp_call_result_3;
                CHECK_OBJECT(var_lay);
                tmp_source_name_17 = var_lay;
                tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_addItem);
                if (tmp_dircall_arg1_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 449;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_spacer);
                tmp_tuple_element_5 = var_spacer;
                tmp_dircall_arg2_1 = PyTuple_New(1);
                Py_INCREF(tmp_tuple_element_5);
                PyTuple_SET_ITEM(tmp_dircall_arg2_1, 0, tmp_tuple_element_5);
                CHECK_OBJECT(var_lp);
                tmp_dircall_arg3_1 = var_lp;
                Py_INCREF(tmp_dircall_arg3_1);

                {
                    PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
                    tmp_call_result_3 = impl___internal__$$$function_6_complex_call_helper_pos_star_list(dir_call_args);
                }
                if (tmp_call_result_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 449;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_3);
            }
            branch_end_4:;
        }
        branch_no_3:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_50cfdedaac028bc492c5aef6d5586946);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_50cfdedaac028bc492c5aef6d5586946);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_50cfdedaac028bc492c5aef6d5586946, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_50cfdedaac028bc492c5aef6d5586946->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_50cfdedaac028bc492c5aef6d5586946, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_50cfdedaac028bc492c5aef6d5586946,
        type_description_1,
        par_self,
        par_elem,
        var_width,
        var_height,
        var_size_args,
        var_sizeType,
        var_policy,
        var_spacer,
        var_lay,
        var_lp
    );


    // Release cached frame.
    if (frame_50cfdedaac028bc492c5aef6d5586946 == cache_frame_50cfdedaac028bc492c5aef6d5586946) {
        Py_DECREF(frame_50cfdedaac028bc492c5aef6d5586946);
    }
    cache_frame_50cfdedaac028bc492c5aef6d5586946 = NULL;

    assertFrameObject(frame_50cfdedaac028bc492c5aef6d5586946);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_17_createSpacer);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_width);
    Py_DECREF(var_width);
    var_width = NULL;

    CHECK_OBJECT((PyObject *)var_height);
    Py_DECREF(var_height);
    var_height = NULL;

    CHECK_OBJECT((PyObject *)var_size_args);
    Py_DECREF(var_size_args);
    var_size_args = NULL;

    CHECK_OBJECT((PyObject *)var_sizeType);
    Py_DECREF(var_sizeType);
    var_sizeType = NULL;

    CHECK_OBJECT((PyObject *)var_policy);
    Py_DECREF(var_policy);
    var_policy = NULL;

    CHECK_OBJECT((PyObject *)var_spacer);
    Py_DECREF(var_spacer);
    var_spacer = NULL;

    Py_XDECREF(var_lay);
    var_lay = NULL;

    Py_XDECREF(var_lp);
    var_lp = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_width);
    var_width = NULL;

    Py_XDECREF(var_height);
    var_height = NULL;

    Py_XDECREF(var_size_args);
    var_size_args = NULL;

    Py_XDECREF(var_sizeType);
    var_sizeType = NULL;

    Py_XDECREF(var_policy);
    var_policy = NULL;

    Py_XDECREF(var_spacer);
    var_spacer = NULL;

    Py_XDECREF(var_lay);
    var_lay = NULL;

    Py_XDECREF(var_lp);
    var_lp = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_17_createSpacer);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_18_createLayout(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_margin = NULL;
    PyObject *var_left = NULL;
    PyObject *var_top = NULL;
    PyObject *var_right = NULL;
    PyObject *var_bottom = NULL;
    PyObject *var_cme = NULL;
    PyObject *var_spacing = NULL;
    PyObject *var_horiz = NULL;
    PyObject *var_vert = NULL;
    PyObject *var_classname = NULL;
    PyObject *var_parent = NULL;
    PyObject *var_layout = NULL;
    PyObject *var_top_layout = NULL;
    PyObject *var_lp = NULL;
    struct Nuitka_FrameObject *frame_8734e569a964cb39939666b17f34aad7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_8734e569a964cb39939666b17f34aad7 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_8734e569a964cb39939666b17f34aad7, codeobj_8734e569a964cb39939666b17f34aad7, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_8734e569a964cb39939666b17f34aad7 = cache_frame_8734e569a964cb39939666b17f34aad7;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_8734e569a964cb39939666b17f34aad7);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_8734e569a964cb39939666b17f34aad7) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_stack);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 457;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 457;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_topIsLayout);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 457;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 457;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_assign_source_1 = const_int_neg_1;
        Py_INCREF(tmp_assign_source_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_defaults);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 457;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_str_plain_margin;
        tmp_assign_source_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 457;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        assert(var_margin == NULL);
        var_margin = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT(par_self);
        tmp_source_name_3 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_wprops);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 458;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_1 = par_elem;
        tmp_args_element_name_2 = const_str_plain_margin;
        CHECK_OBJECT(var_margin);
        tmp_args_element_name_3 = var_margin;
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 458;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3};
            tmp_assign_source_2 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_2, const_str_plain_getProperty, call_args);
        }

        Py_DECREF(tmp_called_instance_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 458;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_margin;
            assert(old != NULL);
            var_margin = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        CHECK_OBJECT(par_self);
        tmp_source_name_4 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_wprops);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_4 = par_elem;
        tmp_args_element_name_5 = const_str_plain_leftMargin;
        CHECK_OBJECT(var_margin);
        tmp_args_element_name_6 = var_margin;
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 459;
        {
            PyObject *call_args[] = {tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6};
            tmp_assign_source_3 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_3, const_str_plain_getProperty, call_args);
        }

        Py_DECREF(tmp_called_instance_3);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_left == NULL);
        var_left = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_args_element_name_9;
        CHECK_OBJECT(par_self);
        tmp_source_name_5 = par_self;
        tmp_called_instance_4 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_wprops);
        if (tmp_called_instance_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_7 = par_elem;
        tmp_args_element_name_8 = const_str_plain_topMargin;
        CHECK_OBJECT(var_margin);
        tmp_args_element_name_9 = var_margin;
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 460;
        {
            PyObject *call_args[] = {tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9};
            tmp_assign_source_4 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_4, const_str_plain_getProperty, call_args);
        }

        Py_DECREF(tmp_called_instance_4);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_top == NULL);
        var_top = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_source_name_6;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_args_element_name_12;
        CHECK_OBJECT(par_self);
        tmp_source_name_6 = par_self;
        tmp_called_instance_5 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_wprops);
        if (tmp_called_instance_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 461;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_10 = par_elem;
        tmp_args_element_name_11 = const_str_plain_rightMargin;
        CHECK_OBJECT(var_margin);
        tmp_args_element_name_12 = var_margin;
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 461;
        {
            PyObject *call_args[] = {tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12};
            tmp_assign_source_5 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_5, const_str_plain_getProperty, call_args);
        }

        Py_DECREF(tmp_called_instance_5);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 461;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_right == NULL);
        var_right = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_source_name_7;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_args_element_name_14;
        PyObject *tmp_args_element_name_15;
        CHECK_OBJECT(par_self);
        tmp_source_name_7 = par_self;
        tmp_called_instance_6 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_wprops);
        if (tmp_called_instance_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 462;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_13 = par_elem;
        tmp_args_element_name_14 = const_str_plain_bottomMargin;
        CHECK_OBJECT(var_margin);
        tmp_args_element_name_15 = var_margin;
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 462;
        {
            PyObject *call_args[] = {tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15};
            tmp_assign_source_6 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_6, const_str_plain_getProperty, call_args);
        }

        Py_DECREF(tmp_called_instance_6);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 462;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_bottom == NULL);
        var_bottom = tmp_assign_source_6;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_called_instance_7;
        PyObject *tmp_source_name_8;
        PyObject *tmp_call_result_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_8 = par_self;
        tmp_called_instance_7 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_stack);
        if (tmp_called_instance_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 465;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 465;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_7, const_str_plain_topIsLayoutWidget);
        Py_DECREF(tmp_called_instance_7);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 465;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_call_result_2);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_2);

            exception_lineno = 465;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_2);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            CHECK_OBJECT(var_left);
            tmp_compexpr_left_1 = var_left;
            tmp_compexpr_right_1 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 466;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_7;
                tmp_assign_source_7 = const_int_0;
                {
                    PyObject *old = var_left;
                    assert(old != NULL);
                    var_left = tmp_assign_source_7;
                    Py_INCREF(var_left);
                    Py_DECREF(old);
                }

            }
            branch_no_2:;
        }
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT(var_top);
            tmp_compexpr_left_2 = var_top;
            tmp_compexpr_right_2 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 467;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                goto branch_yes_3;
            } else {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_assign_source_8;
                tmp_assign_source_8 = const_int_0;
                {
                    PyObject *old = var_top;
                    assert(old != NULL);
                    var_top = tmp_assign_source_8;
                    Py_INCREF(var_top);
                    Py_DECREF(old);
                }

            }
            branch_no_3:;
        }
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT(var_right);
            tmp_compexpr_left_3 = var_right;
            tmp_compexpr_right_3 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 468;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_5 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_assign_source_9;
                tmp_assign_source_9 = const_int_0;
                {
                    PyObject *old = var_right;
                    assert(old != NULL);
                    var_right = tmp_assign_source_9;
                    Py_INCREF(var_right);
                    Py_DECREF(old);
                }

            }
            branch_no_4:;
        }
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT(var_bottom);
            tmp_compexpr_left_4 = var_bottom;
            tmp_compexpr_right_4 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 469;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_6 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_5;
            } else {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_assign_source_10;
                tmp_assign_source_10 = const_int_0;
                {
                    PyObject *old = var_bottom;
                    assert(old != NULL);
                    var_bottom = tmp_assign_source_10;
                    Py_INCREF(var_bottom);
                    Py_DECREF(old);
                }

            }
            branch_no_5:;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_7;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        int tmp_or_left_truth_2;
        nuitka_bool tmp_or_left_value_2;
        nuitka_bool tmp_or_right_value_2;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        int tmp_or_left_truth_3;
        nuitka_bool tmp_or_left_value_3;
        nuitka_bool tmp_or_right_value_3;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        if (var_left == NULL) {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "left");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 471;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_5 = var_left;
        tmp_compexpr_right_5 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT(tmp_compexpr_left_5, tmp_compexpr_right_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        if (var_top == NULL) {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "top");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 471;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_6 = var_top;
        tmp_compexpr_right_6 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT(tmp_compexpr_left_6, tmp_compexpr_right_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_2 = tmp_or_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_2 == 1) {
            goto or_left_2;
        } else {
            goto or_right_2;
        }
        or_right_2:;
        if (var_right == NULL) {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "right");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 471;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_7 = var_right;
        tmp_compexpr_right_7 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT(tmp_compexpr_left_7, tmp_compexpr_right_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_3 = tmp_or_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_3 == 1) {
            goto or_left_3;
        } else {
            goto or_right_3;
        }
        or_right_3:;
        if (var_bottom == NULL) {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bottom");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 471;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_8 = var_bottom;
        tmp_compexpr_right_8 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT(tmp_compexpr_left_8, tmp_compexpr_right_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_right_value_2 = tmp_or_right_value_3;
        goto or_end_3;
        or_left_3:;
        tmp_or_right_value_2 = tmp_or_left_value_3;
        or_end_3:;
        tmp_or_right_value_1 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        tmp_or_right_value_1 = tmp_or_left_value_2;
        or_end_2:;
        tmp_condition_result_7 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_7 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_assign_source_11;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_kw_name_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_SubElement);

            if (unlikely(tmp_mvar_value_1 == NULL)) {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_SubElement);
            }

            if (tmp_mvar_value_1 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3458 ], 32, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 473;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            CHECK_OBJECT(par_elem);
            tmp_tuple_element_1 = par_elem;
            tmp_args_name_1 = PyTuple_New(2);
            Py_INCREF(tmp_tuple_element_1);
            PyTuple_SET_ITEM(tmp_args_name_1, 0, tmp_tuple_element_1);
            tmp_tuple_element_1 = const_str_plain_property;
            Py_INCREF(tmp_tuple_element_1);
            PyTuple_SET_ITEM(tmp_args_name_1, 1, tmp_tuple_element_1);
            tmp_kw_name_1 = PyDict_Copy(const_dict_d7b7cb1704cf1609d1297de4bce6075f);
            frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 473;
            tmp_assign_source_11 = CALL_FUNCTION(tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1);
            Py_DECREF(tmp_args_name_1);
            Py_DECREF(tmp_kw_name_1);
            if (tmp_assign_source_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 473;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_cme == NULL);
            var_cme = tmp_assign_source_11;
        }
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_unicode_arg_1;
            PyObject *tmp_assattr_target_1;
            PyObject *tmp_called_name_2;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_16;
            PyObject *tmp_args_element_name_17;
            if (var_left == NULL) {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF(exception_type);
                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "left");
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 474;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_unicode_arg_1 = var_left;
            tmp_assattr_name_1 = PyObject_Unicode(tmp_unicode_arg_1);
            if (tmp_assattr_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 474;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_SubElement);

            if (unlikely(tmp_mvar_value_2 == NULL)) {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_SubElement);
            }

            if (tmp_mvar_value_2 == NULL) {
                Py_DECREF(tmp_assattr_name_1);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3458 ], 32, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 474;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_2 = tmp_mvar_value_2;
            CHECK_OBJECT(var_cme);
            tmp_args_element_name_16 = var_cme;
            tmp_args_element_name_17 = const_str_plain_number;
            frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 474;
            {
                PyObject *call_args[] = {tmp_args_element_name_16, tmp_args_element_name_17};
                tmp_assattr_target_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
            }

            if (tmp_assattr_target_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_assattr_name_1);

                exception_lineno = 474;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_text, tmp_assattr_name_1);
            Py_DECREF(tmp_assattr_name_1);
            Py_DECREF(tmp_assattr_target_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 474;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_unicode_arg_2;
            PyObject *tmp_assattr_target_2;
            PyObject *tmp_called_name_3;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_args_element_name_18;
            PyObject *tmp_args_element_name_19;
            if (var_top == NULL) {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF(exception_type);
                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "top");
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 475;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_unicode_arg_2 = var_top;
            tmp_assattr_name_2 = PyObject_Unicode(tmp_unicode_arg_2);
            if (tmp_assattr_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 475;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_SubElement);

            if (unlikely(tmp_mvar_value_3 == NULL)) {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_SubElement);
            }

            if (tmp_mvar_value_3 == NULL) {
                Py_DECREF(tmp_assattr_name_2);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3458 ], 32, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 475;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_3 = tmp_mvar_value_3;
            CHECK_OBJECT(var_cme);
            tmp_args_element_name_18 = var_cme;
            tmp_args_element_name_19 = const_str_plain_number;
            frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 475;
            {
                PyObject *call_args[] = {tmp_args_element_name_18, tmp_args_element_name_19};
                tmp_assattr_target_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_3, call_args);
            }

            if (tmp_assattr_target_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_assattr_name_2);

                exception_lineno = 475;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_text, tmp_assattr_name_2);
            Py_DECREF(tmp_assattr_name_2);
            Py_DECREF(tmp_assattr_target_2);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 475;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_3;
            PyObject *tmp_unicode_arg_3;
            PyObject *tmp_assattr_target_3;
            PyObject *tmp_called_name_4;
            PyObject *tmp_mvar_value_4;
            PyObject *tmp_args_element_name_20;
            PyObject *tmp_args_element_name_21;
            if (var_right == NULL) {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF(exception_type);
                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "right");
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 476;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_unicode_arg_3 = var_right;
            tmp_assattr_name_3 = PyObject_Unicode(tmp_unicode_arg_3);
            if (tmp_assattr_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 476;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_SubElement);

            if (unlikely(tmp_mvar_value_4 == NULL)) {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_SubElement);
            }

            if (tmp_mvar_value_4 == NULL) {
                Py_DECREF(tmp_assattr_name_3);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3458 ], 32, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 476;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_4 = tmp_mvar_value_4;
            CHECK_OBJECT(var_cme);
            tmp_args_element_name_20 = var_cme;
            tmp_args_element_name_21 = const_str_plain_number;
            frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 476;
            {
                PyObject *call_args[] = {tmp_args_element_name_20, tmp_args_element_name_21};
                tmp_assattr_target_3 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_4, call_args);
            }

            if (tmp_assattr_target_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_assattr_name_3);

                exception_lineno = 476;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_text, tmp_assattr_name_3);
            Py_DECREF(tmp_assattr_name_3);
            Py_DECREF(tmp_assattr_target_3);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 476;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_4;
            PyObject *tmp_unicode_arg_4;
            PyObject *tmp_assattr_target_4;
            PyObject *tmp_called_name_5;
            PyObject *tmp_mvar_value_5;
            PyObject *tmp_args_element_name_22;
            PyObject *tmp_args_element_name_23;
            if (var_bottom == NULL) {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF(exception_type);
                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "bottom");
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 477;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_unicode_arg_4 = var_bottom;
            tmp_assattr_name_4 = PyObject_Unicode(tmp_unicode_arg_4);
            if (tmp_assattr_name_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 477;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_SubElement);

            if (unlikely(tmp_mvar_value_5 == NULL)) {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_SubElement);
            }

            if (tmp_mvar_value_5 == NULL) {
                Py_DECREF(tmp_assattr_name_4);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3458 ], 32, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 477;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_5 = tmp_mvar_value_5;
            CHECK_OBJECT(var_cme);
            tmp_args_element_name_22 = var_cme;
            tmp_args_element_name_23 = const_str_plain_number;
            frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 477;
            {
                PyObject *call_args[] = {tmp_args_element_name_22, tmp_args_element_name_23};
                tmp_assattr_target_4 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_5, call_args);
            }

            if (tmp_assattr_target_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_assattr_name_4);

                exception_lineno = 477;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, const_str_plain_text, tmp_assattr_name_4);
            Py_DECREF(tmp_assattr_name_4);
            Py_DECREF(tmp_assattr_target_4);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 477;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_6:;
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_9;
        PyObject *tmp_source_name_10;
        PyObject *tmp_args_element_name_24;
        PyObject *tmp_args_element_name_25;
        PyObject *tmp_args_element_name_26;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_11;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_10 = par_self;
        tmp_source_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_wprops);
        if (tmp_source_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 484;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_getProperty);
        Py_DECREF(tmp_source_name_9);
        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 484;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_24 = par_elem;
        tmp_args_element_name_25 = const_str_plain_spacing;
        CHECK_OBJECT(par_self);
        tmp_source_name_11 = par_self;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_defaults);
        if (tmp_subscribed_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_6);

            exception_lineno = 485;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_str_plain_spacing;
        tmp_args_element_name_26 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_2, tmp_subscript_name_2);
        Py_DECREF(tmp_subscribed_name_2);
        if (tmp_args_element_name_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_6);

            exception_lineno = 485;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 484;
        {
            PyObject *call_args[] = {tmp_args_element_name_24, tmp_args_element_name_25, tmp_args_element_name_26};
            tmp_assign_source_12 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_6, call_args);
        }

        Py_DECREF(tmp_called_name_6);
        Py_DECREF(tmp_args_element_name_26);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 484;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_spacing == NULL);
        var_spacing = tmp_assign_source_12;
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_called_instance_8;
        PyObject *tmp_source_name_12;
        PyObject *tmp_args_element_name_27;
        PyObject *tmp_args_element_name_28;
        PyObject *tmp_args_element_name_29;
        CHECK_OBJECT(par_self);
        tmp_source_name_12 = par_self;
        tmp_called_instance_8 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_wprops);
        if (tmp_called_instance_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_27 = par_elem;
        tmp_args_element_name_28 = const_str_plain_horizontalSpacing;
        CHECK_OBJECT(var_spacing);
        tmp_args_element_name_29 = var_spacing;
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 486;
        {
            PyObject *call_args[] = {tmp_args_element_name_27, tmp_args_element_name_28, tmp_args_element_name_29};
            tmp_assign_source_13 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_8, const_str_plain_getProperty, call_args);
        }

        Py_DECREF(tmp_called_instance_8);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_horiz == NULL);
        var_horiz = tmp_assign_source_13;
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_called_instance_9;
        PyObject *tmp_source_name_13;
        PyObject *tmp_args_element_name_30;
        PyObject *tmp_args_element_name_31;
        PyObject *tmp_args_element_name_32;
        CHECK_OBJECT(par_self);
        tmp_source_name_13 = par_self;
        tmp_called_instance_9 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_wprops);
        if (tmp_called_instance_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_30 = par_elem;
        tmp_args_element_name_31 = const_str_plain_verticalSpacing;
        CHECK_OBJECT(var_spacing);
        tmp_args_element_name_32 = var_spacing;
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 487;
        {
            PyObject *call_args[] = {tmp_args_element_name_30, tmp_args_element_name_31, tmp_args_element_name_32};
            tmp_assign_source_14 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_9, const_str_plain_getProperty, call_args);
        }

        Py_DECREF(tmp_called_instance_9);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_vert == NULL);
        var_vert = tmp_assign_source_14;
    }
    {
        nuitka_bool tmp_condition_result_8;
        int tmp_or_left_truth_4;
        nuitka_bool tmp_or_left_value_4;
        nuitka_bool tmp_or_right_value_4;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        CHECK_OBJECT(var_horiz);
        tmp_compexpr_left_9 = var_horiz;
        tmp_compexpr_right_9 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT(tmp_compexpr_left_9, tmp_compexpr_right_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 489;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_4 = tmp_or_left_value_4 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_4 == 1) {
            goto or_left_4;
        } else {
            goto or_right_4;
        }
        or_right_4:;
        CHECK_OBJECT(var_vert);
        tmp_compexpr_left_10 = var_vert;
        tmp_compexpr_right_10 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT(tmp_compexpr_left_10, tmp_compexpr_right_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 489;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_8 = tmp_or_right_value_4;
        goto or_end_4;
        or_left_4:;
        tmp_condition_result_8 = tmp_or_left_value_4;
        or_end_4:;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_assign_source_15;
            PyObject *tmp_called_name_7;
            PyObject *tmp_mvar_value_6;
            PyObject *tmp_args_name_2;
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_kw_name_2;
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_SubElement);

            if (unlikely(tmp_mvar_value_6 == NULL)) {
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_SubElement);
            }

            if (tmp_mvar_value_6 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3458 ], 32, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 491;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_7 = tmp_mvar_value_6;
            CHECK_OBJECT(par_elem);
            tmp_tuple_element_2 = par_elem;
            tmp_args_name_2 = PyTuple_New(2);
            Py_INCREF(tmp_tuple_element_2);
            PyTuple_SET_ITEM(tmp_args_name_2, 0, tmp_tuple_element_2);
            tmp_tuple_element_2 = const_str_plain_property;
            Py_INCREF(tmp_tuple_element_2);
            PyTuple_SET_ITEM(tmp_args_name_2, 1, tmp_tuple_element_2);
            tmp_kw_name_2 = PyDict_Copy(const_dict_e993c1f0ede312f17d11add870c0ef8c);
            frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 491;
            tmp_assign_source_15 = CALL_FUNCTION(tmp_called_name_7, tmp_args_name_2, tmp_kw_name_2);
            Py_DECREF(tmp_args_name_2);
            Py_DECREF(tmp_kw_name_2);
            if (tmp_assign_source_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 491;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_cme;
                var_cme = tmp_assign_source_15;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assattr_name_5;
            PyObject *tmp_unicode_arg_5;
            PyObject *tmp_assattr_target_5;
            PyObject *tmp_called_name_8;
            PyObject *tmp_mvar_value_7;
            PyObject *tmp_args_element_name_33;
            PyObject *tmp_args_element_name_34;
            CHECK_OBJECT(var_horiz);
            tmp_unicode_arg_5 = var_horiz;
            tmp_assattr_name_5 = PyObject_Unicode(tmp_unicode_arg_5);
            if (tmp_assattr_name_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 492;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_SubElement);

            if (unlikely(tmp_mvar_value_7 == NULL)) {
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_SubElement);
            }

            if (tmp_mvar_value_7 == NULL) {
                Py_DECREF(tmp_assattr_name_5);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3458 ], 32, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 492;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_8 = tmp_mvar_value_7;
            CHECK_OBJECT(var_cme);
            tmp_args_element_name_33 = var_cme;
            tmp_args_element_name_34 = const_str_plain_number;
            frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 492;
            {
                PyObject *call_args[] = {tmp_args_element_name_33, tmp_args_element_name_34};
                tmp_assattr_target_5 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_8, call_args);
            }

            if (tmp_assattr_target_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_assattr_name_5);

                exception_lineno = 492;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, const_str_plain_text, tmp_assattr_name_5);
            Py_DECREF(tmp_assattr_name_5);
            Py_DECREF(tmp_assattr_target_5);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 492;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_6;
            PyObject *tmp_unicode_arg_6;
            PyObject *tmp_assattr_target_6;
            PyObject *tmp_called_name_9;
            PyObject *tmp_mvar_value_8;
            PyObject *tmp_args_element_name_35;
            PyObject *tmp_args_element_name_36;
            CHECK_OBJECT(var_vert);
            tmp_unicode_arg_6 = var_vert;
            tmp_assattr_name_6 = PyObject_Unicode(tmp_unicode_arg_6);
            if (tmp_assattr_name_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 493;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_SubElement);

            if (unlikely(tmp_mvar_value_8 == NULL)) {
                tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_SubElement);
            }

            if (tmp_mvar_value_8 == NULL) {
                Py_DECREF(tmp_assattr_name_6);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3458 ], 32, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 493;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_9 = tmp_mvar_value_8;
            CHECK_OBJECT(var_cme);
            tmp_args_element_name_35 = var_cme;
            tmp_args_element_name_36 = const_str_plain_number;
            frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 493;
            {
                PyObject *call_args[] = {tmp_args_element_name_35, tmp_args_element_name_36};
                tmp_assattr_target_6 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_9, call_args);
            }

            if (tmp_assattr_target_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_assattr_name_6);

                exception_lineno = 493;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, const_str_plain_text, tmp_assattr_name_6);
            Py_DECREF(tmp_assattr_name_6);
            Py_DECREF(tmp_assattr_target_6);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 493;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_7:;
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_14;
        PyObject *tmp_subscript_name_3;
        CHECK_OBJECT(par_elem);
        tmp_source_name_14 = par_elem;
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_attrib);
        if (tmp_subscribed_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 495;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_3 = const_str_plain_class;
        tmp_assign_source_16 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_3, tmp_subscript_name_3);
        Py_DECREF(tmp_subscribed_name_3);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 495;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_classname == NULL);
        var_classname = tmp_assign_source_16;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_called_instance_10;
        PyObject *tmp_source_name_15;
        PyObject *tmp_call_result_3;
        int tmp_truth_name_3;
        CHECK_OBJECT(par_self);
        tmp_source_name_15 = par_self;
        tmp_called_instance_10 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_stack);
        if (tmp_called_instance_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 496;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 496;
        tmp_call_result_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_10, const_str_plain_topIsLayout);
        Py_DECREF(tmp_called_instance_10);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 496;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_call_result_3);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_3);

            exception_lineno = 496;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_3);
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_assign_source_17;
            tmp_assign_source_17 = Py_None;
            assert(var_parent == NULL);
            Py_INCREF(tmp_assign_source_17);
            var_parent = tmp_assign_source_17;
        }
        goto branch_end_8;
        branch_no_8:;
        {
            PyObject *tmp_assign_source_18;
            PyObject *tmp_source_name_16;
            PyObject *tmp_source_name_17;
            CHECK_OBJECT(par_self);
            tmp_source_name_17 = par_self;
            tmp_source_name_16 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_stack);
            if (tmp_source_name_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 499;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_18 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_topwidget);
            Py_DECREF(tmp_source_name_16);
            if (tmp_assign_source_18 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 499;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_parent == NULL);
            var_parent = tmp_assign_source_18;
        }
        branch_end_8:;
    }
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        PyObject *tmp_source_name_18;
        tmp_compexpr_left_11 = const_str_plain_name;
        CHECK_OBJECT(par_elem);
        tmp_source_name_18 = par_elem;
        tmp_compexpr_right_11 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_attrib);
        if (tmp_compexpr_right_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_compexpr_right_11, tmp_compexpr_left_11);
        Py_DECREF(tmp_compexpr_right_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_10 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_called_instance_11;
            PyObject *tmp_subscribed_name_4;
            PyObject *tmp_subscript_name_4;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_source_name_19;
            PyObject *tmp_ass_subscript_1;
            CHECK_OBJECT(var_classname);
            tmp_subscribed_name_4 = var_classname;
            tmp_subscript_name_4 = const_slice_int_pos_1_none_none;
            tmp_called_instance_11 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_4, tmp_subscript_name_4);
            if (tmp_called_instance_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 501;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 501;
            tmp_ass_subvalue_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_11, const_str_plain_lower);
            Py_DECREF(tmp_called_instance_11);
            if (tmp_ass_subvalue_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 501;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_elem);
            tmp_source_name_19 = par_elem;
            tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_attrib);
            if (tmp_ass_subscribed_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_1);

                exception_lineno = 501;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_ass_subscript_1 = const_str_plain_name;
            tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
            Py_DECREF(tmp_ass_subscribed_1);
            Py_DECREF(tmp_ass_subvalue_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 501;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_9:;
    }
    {
        PyObject *tmp_called_name_10;
        PyObject *tmp_source_name_20;
        PyObject *tmp_source_name_21;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_37;
        PyObject *tmp_called_instance_12;
        PyObject *tmp_args_element_name_38;
        PyObject *tmp_args_element_name_39;
        PyObject *tmp_args_element_name_40;
        CHECK_OBJECT(par_self);
        tmp_source_name_21 = par_self;
        tmp_source_name_20 = LOOKUP_ATTRIBUTE(tmp_source_name_21, const_str_plain_stack);
        if (tmp_source_name_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 502;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_push);
        Py_DECREF(tmp_source_name_20);
        if (tmp_called_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 502;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_called_instance_12 = par_self;
        CHECK_OBJECT(var_classname);
        tmp_args_element_name_38 = var_classname;
        CHECK_OBJECT(var_parent);
        tmp_args_element_name_39 = var_parent;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_40 = par_elem;
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 502;
        {
            PyObject *call_args[] = {tmp_args_element_name_38, tmp_args_element_name_39, tmp_args_element_name_40};
            tmp_args_element_name_37 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_12, const_str_plain_setupObject, call_args);
        }

        if (tmp_args_element_name_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_10);

            exception_lineno = 502;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 502;
        tmp_call_result_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_10, tmp_args_element_name_37);
        Py_DECREF(tmp_called_name_10);
        Py_DECREF(tmp_args_element_name_37);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 502;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_instance_13;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_41;
        CHECK_OBJECT(par_self);
        tmp_called_instance_13 = par_self;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_41 = par_elem;
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 503;
        {
            PyObject *call_args[] = {tmp_args_element_name_41};
            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_13, const_str_plain_traverseWidgetTree, call_args);
        }

        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_called_instance_14;
        PyObject *tmp_source_name_22;
        CHECK_OBJECT(par_self);
        tmp_source_name_22 = par_self;
        tmp_called_instance_14 = LOOKUP_ATTRIBUTE(tmp_source_name_22, const_str_plain_stack);
        if (tmp_called_instance_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 505;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 505;
        tmp_assign_source_19 = CALL_METHOD_NO_ARGS(tmp_called_instance_14, const_str_plain_popLayout);
        Py_DECREF(tmp_called_instance_14);
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 505;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_layout == NULL);
        var_layout = tmp_assign_source_19;
    }
    {
        PyObject *tmp_called_instance_15;
        PyObject *tmp_call_result_6;
        PyObject *tmp_args_element_name_42;
        PyObject *tmp_args_element_name_43;
        CHECK_OBJECT(par_self);
        tmp_called_instance_15 = par_self;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_42 = par_elem;
        CHECK_OBJECT(var_layout);
        tmp_args_element_name_43 = var_layout;
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 506;
        {
            PyObject *call_args[] = {tmp_args_element_name_42, tmp_args_element_name_43};
            tmp_call_result_6 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_15, const_str_plain_configureLayout, call_args);
        }

        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 506;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_called_instance_16;
        PyObject *tmp_source_name_23;
        PyObject *tmp_call_result_7;
        int tmp_truth_name_4;
        CHECK_OBJECT(par_self);
        tmp_source_name_23 = par_self;
        tmp_called_instance_16 = LOOKUP_ATTRIBUTE(tmp_source_name_23, const_str_plain_stack);
        if (tmp_called_instance_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 508;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 508;
        tmp_call_result_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_16, const_str_plain_topIsLayout);
        Py_DECREF(tmp_called_instance_16);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 508;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_call_result_7);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_7);

            exception_lineno = 508;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_11 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_7);
        if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_assign_source_20;
            PyObject *tmp_called_instance_17;
            PyObject *tmp_source_name_24;
            CHECK_OBJECT(par_self);
            tmp_source_name_24 = par_self;
            tmp_called_instance_17 = LOOKUP_ATTRIBUTE(tmp_source_name_24, const_str_plain_stack);
            if (tmp_called_instance_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 509;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 509;
            tmp_assign_source_20 = CALL_METHOD_NO_ARGS(tmp_called_instance_17, const_str_plain_peek);
            Py_DECREF(tmp_called_instance_17);
            if (tmp_assign_source_20 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 509;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_top_layout == NULL);
            var_top_layout = tmp_assign_source_20;
        }
        {
            PyObject *tmp_assign_source_21;
            PyObject *tmp_subscribed_name_5;
            PyObject *tmp_source_name_25;
            PyObject *tmp_subscript_name_5;
            CHECK_OBJECT(par_elem);
            tmp_source_name_25 = par_elem;
            tmp_subscribed_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_25, const_str_plain_attrib);
            if (tmp_subscribed_name_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 510;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_5 = const_str_digest_fef1f988ce622611673dba0e4ecba271;
            tmp_assign_source_21 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_5, tmp_subscript_name_5);
            Py_DECREF(tmp_subscribed_name_5);
            if (tmp_assign_source_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 510;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_lp == NULL);
            var_lp = tmp_assign_source_21;
        }
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_isinstance_inst_1;
            PyObject *tmp_isinstance_cls_1;
            PyObject *tmp_source_name_26;
            PyObject *tmp_mvar_value_9;
            CHECK_OBJECT(var_top_layout);
            tmp_isinstance_inst_1 = var_top_layout;
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

            if (unlikely(tmp_mvar_value_9 == NULL)) {
                tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
            }

            if (tmp_mvar_value_9 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 512;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_26 = tmp_mvar_value_9;
            tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_source_name_26, const_str_plain_QFormLayout);
            if (tmp_isinstance_cls_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 512;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
            Py_DECREF(tmp_isinstance_cls_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 512;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_12 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                goto branch_yes_11;
            } else {
                goto branch_no_11;
            }
            branch_yes_11:;
            {
                PyObject *tmp_called_name_11;
                PyObject *tmp_source_name_27;
                PyObject *tmp_call_result_8;
                PyObject *tmp_args_element_name_44;
                PyObject *tmp_subscribed_name_6;
                PyObject *tmp_subscript_name_6;
                PyObject *tmp_args_element_name_45;
                PyObject *tmp_called_instance_18;
                PyObject *tmp_args_element_name_46;
                PyObject *tmp_args_element_name_47;
                CHECK_OBJECT(var_top_layout);
                tmp_source_name_27 = var_top_layout;
                tmp_called_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_27, const_str_plain_setLayout);
                if (tmp_called_name_11 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 513;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_lp);
                tmp_subscribed_name_6 = var_lp;
                tmp_subscript_name_6 = const_int_0;
                tmp_args_element_name_44 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_6, tmp_subscript_name_6, 0);
                if (tmp_args_element_name_44 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_11);

                    exception_lineno = 513;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_self);
                tmp_called_instance_18 = par_self;
                CHECK_OBJECT(var_lp);
                tmp_args_element_name_46 = var_lp;
                frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 513;
                {
                    PyObject *call_args[] = {tmp_args_element_name_46};
                    tmp_args_element_name_45 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_18, const_str_plain__form_layout_role, call_args);
                }

                if (tmp_args_element_name_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_11);
                    Py_DECREF(tmp_args_element_name_44);

                    exception_lineno = 513;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_layout);
                tmp_args_element_name_47 = var_layout;
                frame_8734e569a964cb39939666b17f34aad7->m_frame.f_lineno = 513;
                {
                    PyObject *call_args[] = {tmp_args_element_name_44, tmp_args_element_name_45, tmp_args_element_name_47};
                    tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_11, call_args);
                }

                Py_DECREF(tmp_called_name_11);
                Py_DECREF(tmp_args_element_name_44);
                Py_DECREF(tmp_args_element_name_45);
                if (tmp_call_result_8 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 513;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_8);
            }
            goto branch_end_11;
            branch_no_11:;
            {
                PyObject *tmp_dircall_arg1_1;
                PyObject *tmp_source_name_28;
                PyObject *tmp_dircall_arg2_1;
                PyObject *tmp_tuple_element_3;
                PyObject *tmp_dircall_arg3_1;
                PyObject *tmp_call_result_9;
                CHECK_OBJECT(var_top_layout);
                tmp_source_name_28 = var_top_layout;
                tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_source_name_28, const_str_plain_addLayout);
                if (tmp_dircall_arg1_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 515;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_layout);
                tmp_tuple_element_3 = var_layout;
                tmp_dircall_arg2_1 = PyTuple_New(1);
                Py_INCREF(tmp_tuple_element_3);
                PyTuple_SET_ITEM(tmp_dircall_arg2_1, 0, tmp_tuple_element_3);
                CHECK_OBJECT(var_lp);
                tmp_dircall_arg3_1 = var_lp;
                Py_INCREF(tmp_dircall_arg3_1);

                {
                    PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
                    tmp_call_result_9 = impl___internal__$$$function_6_complex_call_helper_pos_star_list(dir_call_args);
                }
                if (tmp_call_result_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 515;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_9);
            }
            branch_end_11:;
        }
        branch_no_10:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8734e569a964cb39939666b17f34aad7);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8734e569a964cb39939666b17f34aad7);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8734e569a964cb39939666b17f34aad7, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_8734e569a964cb39939666b17f34aad7->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8734e569a964cb39939666b17f34aad7, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8734e569a964cb39939666b17f34aad7,
        type_description_1,
        par_self,
        par_elem,
        var_margin,
        var_left,
        var_top,
        var_right,
        var_bottom,
        var_cme,
        var_spacing,
        var_horiz,
        var_vert,
        var_classname,
        var_parent,
        var_layout,
        var_top_layout,
        var_lp
    );


    // Release cached frame.
    if (frame_8734e569a964cb39939666b17f34aad7 == cache_frame_8734e569a964cb39939666b17f34aad7) {
        Py_DECREF(frame_8734e569a964cb39939666b17f34aad7);
    }
    cache_frame_8734e569a964cb39939666b17f34aad7 = NULL;

    assertFrameObject(frame_8734e569a964cb39939666b17f34aad7);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_18_createLayout);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_margin);
    Py_DECREF(var_margin);
    var_margin = NULL;

    Py_XDECREF(var_left);
    var_left = NULL;

    Py_XDECREF(var_top);
    var_top = NULL;

    Py_XDECREF(var_right);
    var_right = NULL;

    Py_XDECREF(var_bottom);
    var_bottom = NULL;

    Py_XDECREF(var_cme);
    var_cme = NULL;

    CHECK_OBJECT((PyObject *)var_spacing);
    Py_DECREF(var_spacing);
    var_spacing = NULL;

    CHECK_OBJECT((PyObject *)var_horiz);
    Py_DECREF(var_horiz);
    var_horiz = NULL;

    CHECK_OBJECT((PyObject *)var_vert);
    Py_DECREF(var_vert);
    var_vert = NULL;

    CHECK_OBJECT((PyObject *)var_classname);
    Py_DECREF(var_classname);
    var_classname = NULL;

    CHECK_OBJECT((PyObject *)var_parent);
    Py_DECREF(var_parent);
    var_parent = NULL;

    CHECK_OBJECT((PyObject *)var_layout);
    Py_DECREF(var_layout);
    var_layout = NULL;

    Py_XDECREF(var_top_layout);
    var_top_layout = NULL;

    Py_XDECREF(var_lp);
    var_lp = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_margin);
    var_margin = NULL;

    Py_XDECREF(var_left);
    var_left = NULL;

    Py_XDECREF(var_top);
    var_top = NULL;

    Py_XDECREF(var_right);
    var_right = NULL;

    Py_XDECREF(var_bottom);
    var_bottom = NULL;

    Py_XDECREF(var_cme);
    var_cme = NULL;

    Py_XDECREF(var_spacing);
    var_spacing = NULL;

    Py_XDECREF(var_horiz);
    var_horiz = NULL;

    Py_XDECREF(var_vert);
    var_vert = NULL;

    Py_XDECREF(var_classname);
    var_classname = NULL;

    Py_XDECREF(var_parent);
    var_parent = NULL;

    Py_XDECREF(var_layout);
    var_layout = NULL;

    Py_XDECREF(var_top_layout);
    var_top_layout = NULL;

    Py_XDECREF(var_lp);
    var_lp = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_18_createLayout);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_19_configureLayout(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *par_layout = python_pars[2];
    struct Nuitka_FrameObject *frame_9f61805490c624f2b75db56aa25711bf;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_9f61805490c624f2b75db56aa25711bf = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_9f61805490c624f2b75db56aa25711bf, codeobj_9f61805490c624f2b75db56aa25711bf, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_9f61805490c624f2b75db56aa25711bf = cache_frame_9f61805490c624f2b75db56aa25711bf;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9f61805490c624f2b75db56aa25711bf);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9f61805490c624f2b75db56aa25711bf) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT(par_layout);
        tmp_isinstance_inst_1 = par_layout;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 518;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_QGridLayout);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 518;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 518;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT(par_self);
            tmp_source_name_2 = par_self;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_setArray);
            if (tmp_called_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 519;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_1 = par_elem;
            tmp_args_element_name_2 = const_str_plain_columnminimumwidth;
            CHECK_OBJECT(par_layout);
            tmp_source_name_3 = par_layout;
            tmp_args_element_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_setColumnMinimumWidth);
            if (tmp_args_element_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_1);

                exception_lineno = 520;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_9f61805490c624f2b75db56aa25711bf->m_frame.f_lineno = 519;
            {
                PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3};
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_1, call_args);
            }

            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_3);
            if (tmp_call_result_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 519;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_1);
        }
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_4;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_source_name_5;
            CHECK_OBJECT(par_self);
            tmp_source_name_4 = par_self;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_setArray);
            if (tmp_called_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 521;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_4 = par_elem;
            tmp_args_element_name_5 = const_str_plain_rowminimumheight;
            CHECK_OBJECT(par_layout);
            tmp_source_name_5 = par_layout;
            tmp_args_element_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_setRowMinimumHeight);
            if (tmp_args_element_name_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_2);

                exception_lineno = 522;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_9f61805490c624f2b75db56aa25711bf->m_frame.f_lineno = 521;
            {
                PyObject *call_args[] = {tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6};
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_2, call_args);
            }

            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_6);
            if (tmp_call_result_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 521;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_2);
        }
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_6;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_args_element_name_8;
            PyObject *tmp_args_element_name_9;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT(par_self);
            tmp_source_name_6 = par_self;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_setArray);
            if (tmp_called_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 523;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_7 = par_elem;
            tmp_args_element_name_8 = const_str_plain_columnstretch;
            CHECK_OBJECT(par_layout);
            tmp_source_name_7 = par_layout;
            tmp_args_element_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_setColumnStretch);
            if (tmp_args_element_name_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_3);

                exception_lineno = 523;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_9f61805490c624f2b75db56aa25711bf->m_frame.f_lineno = 523;
            {
                PyObject *call_args[] = {tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9};
                tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_3, call_args);
            }

            Py_DECREF(tmp_called_name_3);
            Py_DECREF(tmp_args_element_name_9);
            if (tmp_call_result_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 523;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_3);
        }
        {
            PyObject *tmp_called_name_4;
            PyObject *tmp_source_name_8;
            PyObject *tmp_call_result_4;
            PyObject *tmp_args_element_name_10;
            PyObject *tmp_args_element_name_11;
            PyObject *tmp_args_element_name_12;
            PyObject *tmp_source_name_9;
            CHECK_OBJECT(par_self);
            tmp_source_name_8 = par_self;
            tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_setArray);
            if (tmp_called_name_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_10 = par_elem;
            tmp_args_element_name_11 = const_str_plain_rowstretch;
            CHECK_OBJECT(par_layout);
            tmp_source_name_9 = par_layout;
            tmp_args_element_name_12 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_setRowStretch);
            if (tmp_args_element_name_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_4);

                exception_lineno = 524;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_9f61805490c624f2b75db56aa25711bf->m_frame.f_lineno = 524;
            {
                PyObject *call_args[] = {tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12};
                tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_4, call_args);
            }

            Py_DECREF(tmp_called_name_4);
            Py_DECREF(tmp_args_element_name_12);
            if (tmp_call_result_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_4);
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_isinstance_inst_2;
            PyObject *tmp_isinstance_cls_2;
            PyObject *tmp_source_name_10;
            PyObject *tmp_mvar_value_2;
            CHECK_OBJECT(par_layout);
            tmp_isinstance_inst_2 = par_layout;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

            if (unlikely(tmp_mvar_value_2 == NULL)) {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
            }

            if (tmp_mvar_value_2 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 526;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_10 = tmp_mvar_value_2;
            tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_QBoxLayout);
            if (tmp_isinstance_cls_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 526;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
            Py_DECREF(tmp_isinstance_cls_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 526;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_name_5;
                PyObject *tmp_source_name_11;
                PyObject *tmp_call_result_5;
                PyObject *tmp_args_element_name_13;
                PyObject *tmp_args_element_name_14;
                PyObject *tmp_args_element_name_15;
                PyObject *tmp_source_name_12;
                CHECK_OBJECT(par_self);
                tmp_source_name_11 = par_self;
                tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_setArray);
                if (tmp_called_name_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 527;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_elem);
                tmp_args_element_name_13 = par_elem;
                tmp_args_element_name_14 = const_str_plain_stretch;
                CHECK_OBJECT(par_layout);
                tmp_source_name_12 = par_layout;
                tmp_args_element_name_15 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_setStretch);
                if (tmp_args_element_name_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_5);

                    exception_lineno = 527;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                frame_9f61805490c624f2b75db56aa25711bf->m_frame.f_lineno = 527;
                {
                    PyObject *call_args[] = {tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15};
                    tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_5, call_args);
                }

                Py_DECREF(tmp_called_name_5);
                Py_DECREF(tmp_args_element_name_15);
                if (tmp_call_result_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 527;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_5);
            }
            branch_no_2:;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9f61805490c624f2b75db56aa25711bf);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9f61805490c624f2b75db56aa25711bf);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9f61805490c624f2b75db56aa25711bf, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_9f61805490c624f2b75db56aa25711bf->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9f61805490c624f2b75db56aa25711bf, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9f61805490c624f2b75db56aa25711bf,
        type_description_1,
        par_self,
        par_elem,
        par_layout
    );


    // Release cached frame.
    if (frame_9f61805490c624f2b75db56aa25711bf == cache_frame_9f61805490c624f2b75db56aa25711bf) {
        Py_DECREF(frame_9f61805490c624f2b75db56aa25711bf);
    }
    cache_frame_9f61805490c624f2b75db56aa25711bf = NULL;

    assertFrameObject(frame_9f61805490c624f2b75db56aa25711bf);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_19_configureLayout);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    CHECK_OBJECT(par_layout);
    Py_DECREF(par_layout);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    CHECK_OBJECT(par_layout);
    Py_DECREF(par_layout);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_20_setArray(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_setter = python_pars[3];
    PyObject *var_array = NULL;
    PyObject *var_idx = NULL;
    PyObject *var_value = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_0aeb379c67eb5b0575ee08b11d674192;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_0aeb379c67eb5b0575ee08b11d674192 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_0aeb379c67eb5b0575ee08b11d674192, codeobj_0aeb379c67eb5b0575ee08b11d674192, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_0aeb379c67eb5b0575ee08b11d674192 = cache_frame_0aeb379c67eb5b0575ee08b11d674192;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_0aeb379c67eb5b0575ee08b11d674192);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_0aeb379c67eb5b0575ee08b11d674192) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(par_elem);
        tmp_source_name_1 = par_elem;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_attrib);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 530;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_name);
        tmp_args_element_name_1 = par_name;
        frame_0aeb379c67eb5b0575ee08b11d674192->m_frame.f_lineno = 530;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_get, call_args);
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 530;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_array == NULL);
        var_array = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_array);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_array);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 531;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_called_instance_2;
            tmp_called_name_1 = (PyObject *)&PyEnum_Type;
            CHECK_OBJECT(var_array);
            tmp_called_instance_2 = var_array;
            frame_0aeb379c67eb5b0575ee08b11d674192->m_frame.f_lineno = 532;
            tmp_args_element_name_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_split, &PyTuple_GET_ITEM(const_tuple_str_chr_44_tuple, 0));

            if (tmp_args_element_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 532;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            frame_0aeb379c67eb5b0575ee08b11d674192->m_frame.f_lineno = 532;
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_2);
            Py_DECREF(tmp_args_element_name_2);
            if (tmp_iter_arg_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 532;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_2 = MAKE_ITERATOR(tmp_iter_arg_1);
            Py_DECREF(tmp_iter_arg_1);
            if (tmp_assign_source_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 532;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_for_loop_1__for_iterator == NULL);
            tmp_for_loop_1__for_iterator = tmp_assign_source_2;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_3;
            CHECK_OBJECT(tmp_for_loop_1__for_iterator);
            tmp_next_source_1 = tmp_for_loop_1__for_iterator;
            tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_3 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_1 = "ooooooo";
                    exception_lineno = 532;
                    goto try_except_handler_2;
                }
            }

            {
                PyObject *old = tmp_for_loop_1__iter_value;
                tmp_for_loop_1__iter_value = tmp_assign_source_3;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_iter_arg_2;
            CHECK_OBJECT(tmp_for_loop_1__iter_value);
            tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
            tmp_assign_source_4 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
            if (tmp_assign_source_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 532;
                type_description_1 = "ooooooo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__source_iter;
                tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_5 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
            if (tmp_assign_source_5 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_1 = "ooooooo";
                exception_lineno = 532;
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__element_1;
                tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
            if (tmp_assign_source_6 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_1 = "ooooooo";
                exception_lineno = 532;
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__element_2;
                tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

            if (likely(tmp_iterator_attempt == NULL))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL)
                {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration))
                    {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_1 = "ooooooo";
                        exception_lineno = 532;
                        goto try_except_handler_4;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format(PyExc_ValueError, "too many values to unpack");
#else
                PyErr_Format(PyExc_ValueError, "too many values to unpack (expected 2)");
#endif
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                type_description_1 = "ooooooo";
                exception_lineno = 532;
                goto try_except_handler_4;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
        Py_DECREF(tmp_tuple_unpack_1__source_iter);
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_3;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_tuple_unpack_1__element_1);
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF(tmp_tuple_unpack_1__element_2);
        tmp_tuple_unpack_1__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_2;
        // End of try:
        try_end_2:;
        CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
        Py_DECREF(tmp_tuple_unpack_1__source_iter);
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_7;
            CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
            tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;
            {
                PyObject *old = var_idx;
                var_idx = tmp_assign_source_7;
                Py_INCREF(var_idx);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_tuple_unpack_1__element_1);
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_8;
            CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
            tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;
            {
                PyObject *old = var_value;
                var_value = tmp_assign_source_8;
                Py_INCREF(var_value);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_tuple_unpack_1__element_2);
        tmp_tuple_unpack_1__element_2 = NULL;

        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_int_arg_1;
            CHECK_OBJECT(var_value);
            tmp_int_arg_1 = var_value;
            tmp_assign_source_9 = PyNumber_Int(tmp_int_arg_1);
            if (tmp_assign_source_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 533;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_value;
                assert(old != NULL);
                var_value = tmp_assign_source_9;
                Py_DECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            CHECK_OBJECT(var_value);
            tmp_compexpr_left_1 = var_value;
            tmp_compexpr_right_1 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 534;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_name_2;
                PyObject *tmp_call_result_1;
                PyObject *tmp_args_element_name_3;
                PyObject *tmp_args_element_name_4;
                CHECK_OBJECT(par_setter);
                tmp_called_name_2 = par_setter;
                CHECK_OBJECT(var_idx);
                tmp_args_element_name_3 = var_idx;
                CHECK_OBJECT(var_value);
                tmp_args_element_name_4 = var_value;
                frame_0aeb379c67eb5b0575ee08b11d674192->m_frame.f_lineno = 535;
                {
                    PyObject *call_args[] = {tmp_args_element_name_3, tmp_args_element_name_4};
                    tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
                }

                if (tmp_call_result_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 535;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF(tmp_call_result_1);
            }
            branch_no_2:;
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        goto loop_start_1;
        loop_end_1:;
        goto try_end_3;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_for_loop_1__iter_value);
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
        Py_DECREF(tmp_for_loop_1__for_iterator);
        tmp_for_loop_1__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_1;
        // End of try:
        try_end_3:;
        Py_XDECREF(tmp_for_loop_1__iter_value);
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
        Py_DECREF(tmp_for_loop_1__for_iterator);
        tmp_for_loop_1__for_iterator = NULL;

        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0aeb379c67eb5b0575ee08b11d674192);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0aeb379c67eb5b0575ee08b11d674192);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0aeb379c67eb5b0575ee08b11d674192, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_0aeb379c67eb5b0575ee08b11d674192->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0aeb379c67eb5b0575ee08b11d674192, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0aeb379c67eb5b0575ee08b11d674192,
        type_description_1,
        par_self,
        par_elem,
        par_name,
        par_setter,
        var_array,
        var_idx,
        var_value
    );


    // Release cached frame.
    if (frame_0aeb379c67eb5b0575ee08b11d674192 == cache_frame_0aeb379c67eb5b0575ee08b11d674192) {
        Py_DECREF(frame_0aeb379c67eb5b0575ee08b11d674192);
    }
    cache_frame_0aeb379c67eb5b0575ee08b11d674192 = NULL;

    assertFrameObject(frame_0aeb379c67eb5b0575ee08b11d674192);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_20_setArray);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_array);
    Py_DECREF(var_array);
    var_array = NULL;

    Py_XDECREF(var_idx);
    var_idx = NULL;

    Py_XDECREF(var_value);
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_array);
    var_array = NULL;

    Py_XDECREF(var_idx);
    var_idx = NULL;

    Py_XDECREF(var_value);
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_20_setArray);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_setter);
    Py_DECREF(par_setter);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_setter);
    Py_DECREF(par_setter);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_21_disableSorting(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_w = python_pars[1];
    struct Nuitka_FrameObject *frame_3602899ccc84138b8c0fa9694bc7a3c7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_3602899ccc84138b8c0fa9694bc7a3c7 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_3602899ccc84138b8c0fa9694bc7a3c7, codeobj_3602899ccc84138b8c0fa9694bc7a3c7, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *));
    frame_3602899ccc84138b8c0fa9694bc7a3c7 = cache_frame_3602899ccc84138b8c0fa9694bc7a3c7;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3602899ccc84138b8c0fa9694bc7a3c7);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3602899ccc84138b8c0fa9694bc7a3c7) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_item_nr);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 538;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 538;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_source_name_4;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT(par_self);
            tmp_source_name_3 = par_self;
            tmp_source_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_factory);
            if (tmp_source_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 539;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_invoke);
            Py_DECREF(tmp_source_name_2);
            if (tmp_called_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 539;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_1 = const_str_plain___sortingEnabled;
            CHECK_OBJECT(par_w);
            tmp_source_name_4 = par_w;
            tmp_args_element_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_isSortingEnabled);
            if (tmp_args_element_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_1);

                exception_lineno = 540;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_3602899ccc84138b8c0fa9694bc7a3c7->m_frame.f_lineno = 539;
            {
                PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
                tmp_assattr_name_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_1, call_args);
            }

            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_2);
            if (tmp_assattr_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 539;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_sorting_enabled, tmp_assattr_name_1);
            Py_DECREF(tmp_assattr_name_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 539;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT(par_w);
            tmp_called_instance_1 = par_w;
            frame_3602899ccc84138b8c0fa9694bc7a3c7->m_frame.f_lineno = 541;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_setSortingEnabled, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

            if (tmp_call_result_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 541;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_1);
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3602899ccc84138b8c0fa9694bc7a3c7);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3602899ccc84138b8c0fa9694bc7a3c7);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3602899ccc84138b8c0fa9694bc7a3c7, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_3602899ccc84138b8c0fa9694bc7a3c7->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3602899ccc84138b8c0fa9694bc7a3c7, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3602899ccc84138b8c0fa9694bc7a3c7,
        type_description_1,
        par_self,
        par_w
    );


    // Release cached frame.
    if (frame_3602899ccc84138b8c0fa9694bc7a3c7 == cache_frame_3602899ccc84138b8c0fa9694bc7a3c7) {
        Py_DECREF(frame_3602899ccc84138b8c0fa9694bc7a3c7);
    }
    cache_frame_3602899ccc84138b8c0fa9694bc7a3c7 = NULL;

    assertFrameObject(frame_3602899ccc84138b8c0fa9694bc7a3c7);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_21_disableSorting);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_w);
    Py_DECREF(par_w);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_w);
    Py_DECREF(par_w);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_22_handleItem(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_w = NULL;
    PyObject *var_text = NULL;
    PyObject *var_icon = NULL;
    PyObject *var_item = NULL;
    PyObject *var_parent = NULL;
    PyObject *var__ = NULL;
    PyObject *var_nr_in_root = NULL;
    PyObject *var_titm = NULL;
    PyObject *var_child = NULL;
    PyObject *var_nr_in_parent = NULL;
    PyObject *var_column = NULL;
    PyObject *var_prop = NULL;
    PyObject *var_c_prop = NULL;
    PyObject *var_c_prop_name = NULL;
    PyObject *var_row = NULL;
    PyObject *var_col = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    struct Nuitka_FrameObject *frame_f58e1cffaceb1c421c5a7093c7559ff1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    static struct Nuitka_FrameObject *cache_frame_f58e1cffaceb1c421c5a7093c7559ff1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_f58e1cffaceb1c421c5a7093c7559ff1, codeobj_f58e1cffaceb1c421c5a7093c7559ff1, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_f58e1cffaceb1c421c5a7093c7559ff1 = cache_frame_f58e1cffaceb1c421c5a7093c7559ff1;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f58e1cffaceb1c421c5a7093c7559ff1);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f58e1cffaceb1c421c5a7093c7559ff1) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_stack);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 544;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 544;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_topIsLayout);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 544;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 544;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_ass_subscript_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain__layout_position);

            if (unlikely(tmp_mvar_value_1 == NULL)) {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__layout_position);
            }

            if (tmp_mvar_value_1 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3490 ], 38, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 545;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_1 = par_elem;
            frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 545;
            tmp_ass_subvalue_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
            if (tmp_ass_subvalue_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 545;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_elem);
            tmp_subscribed_name_1 = par_elem;
            tmp_subscript_name_1 = const_int_0;
            tmp_source_name_2 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, 0);
            if (tmp_source_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_1);

                exception_lineno = 545;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_attrib);
            Py_DECREF(tmp_source_name_2);
            if (tmp_ass_subscribed_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_ass_subvalue_1);

                exception_lineno = 545;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_ass_subscript_1 = const_str_digest_fef1f988ce622611673dba0e4ecba271;
            tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
            Py_DECREF(tmp_ass_subscribed_1);
            Py_DECREF(tmp_ass_subvalue_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 545;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_2;
            CHECK_OBJECT(par_self);
            tmp_called_instance_2 = par_self;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_2 = par_elem;
            frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 546;
            {
                PyObject *call_args[] = {tmp_args_element_name_2};
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_traverseWidgetTree, call_args);
            }

            if (tmp_call_result_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 546;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_2);
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_source_name_4;
            CHECK_OBJECT(par_self);
            tmp_source_name_4 = par_self;
            tmp_source_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_stack);
            if (tmp_source_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 548;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_topwidget);
            Py_DECREF(tmp_source_name_3);
            if (tmp_assign_source_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 548;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_w == NULL);
            var_w = tmp_assign_source_1;
        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_isinstance_inst_1;
            PyObject *tmp_isinstance_cls_1;
            PyObject *tmp_source_name_5;
            PyObject *tmp_mvar_value_2;
            CHECK_OBJECT(var_w);
            tmp_isinstance_inst_1 = var_w;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

            if (unlikely(tmp_mvar_value_2 == NULL)) {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
            }

            if (tmp_mvar_value_2 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 550;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_5 = tmp_mvar_value_2;
            tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_QComboBox);
            if (tmp_isinstance_cls_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 550;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
            Py_DECREF(tmp_isinstance_cls_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 550;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_2;
                PyObject *tmp_called_instance_3;
                PyObject *tmp_source_name_6;
                PyObject *tmp_args_element_name_3;
                PyObject *tmp_args_element_name_4;
                CHECK_OBJECT(par_self);
                tmp_source_name_6 = par_self;
                tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_wprops);
                if (tmp_called_instance_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 551;
                    type_description_1 = "oooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_elem);
                tmp_args_element_name_3 = par_elem;
                tmp_args_element_name_4 = const_str_plain_text;
                frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 551;
                {
                    PyObject *call_args[] = {tmp_args_element_name_3, tmp_args_element_name_4};
                    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_3, const_str_plain_getProperty, call_args);
                }

                Py_DECREF(tmp_called_instance_3);
                if (tmp_assign_source_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 551;
                    type_description_1 = "oooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_text == NULL);
                var_text = tmp_assign_source_2;
            }
            {
                PyObject *tmp_assign_source_3;
                PyObject *tmp_called_instance_4;
                PyObject *tmp_source_name_7;
                PyObject *tmp_args_element_name_5;
                PyObject *tmp_args_element_name_6;
                CHECK_OBJECT(par_self);
                tmp_source_name_7 = par_self;
                tmp_called_instance_4 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_wprops);
                if (tmp_called_instance_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 552;
                    type_description_1 = "oooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_elem);
                tmp_args_element_name_5 = par_elem;
                tmp_args_element_name_6 = const_str_plain_icon;
                frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 552;
                {
                    PyObject *call_args[] = {tmp_args_element_name_5, tmp_args_element_name_6};
                    tmp_assign_source_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_4, const_str_plain_getProperty, call_args);
                }

                Py_DECREF(tmp_called_instance_4);
                if (tmp_assign_source_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 552;
                    type_description_1 = "oooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_icon == NULL);
                var_icon = tmp_assign_source_3;
            }
            {
                nuitka_bool tmp_condition_result_3;
                int tmp_truth_name_2;
                CHECK_OBJECT(var_icon);
                tmp_truth_name_2 = CHECK_IF_TRUE(var_icon);
                if (tmp_truth_name_2 == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 554;
                    type_description_1 = "oooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_3 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_3;
                } else {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_called_instance_5;
                    PyObject *tmp_call_result_3;
                    PyObject *tmp_args_element_name_7;
                    PyObject *tmp_args_element_name_8;
                    CHECK_OBJECT(var_w);
                    tmp_called_instance_5 = var_w;
                    CHECK_OBJECT(var_icon);
                    tmp_args_element_name_7 = var_icon;
                    tmp_args_element_name_8 = const_str_empty;
                    frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 555;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_7, tmp_args_element_name_8};
                        tmp_call_result_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_5, const_str_plain_addItem, call_args);
                    }

                    if (tmp_call_result_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 555;
                        type_description_1 = "oooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF(tmp_call_result_3);
                }
                goto branch_end_3;
                branch_no_3:;
                {
                    PyObject *tmp_called_instance_6;
                    PyObject *tmp_call_result_4;
                    CHECK_OBJECT(var_w);
                    tmp_called_instance_6 = var_w;
                    frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 557;
                    tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_addItem, &PyTuple_GET_ITEM(const_tuple_str_empty_tuple, 0));

                    if (tmp_call_result_4 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 557;
                        type_description_1 = "oooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF(tmp_call_result_4);
                }
                branch_end_3:;
            }
            {
                PyObject *tmp_called_name_2;
                PyObject *tmp_source_name_8;
                PyObject *tmp_call_result_5;
                PyObject *tmp_args_element_name_9;
                PyObject *tmp_source_name_9;
                PyObject *tmp_args_element_name_10;
                CHECK_OBJECT(var_w);
                tmp_source_name_8 = var_w;
                tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_setItemText);
                if (tmp_called_name_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 559;
                    type_description_1 = "oooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_self);
                tmp_source_name_9 = par_self;
                tmp_args_element_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_item_nr);
                if (tmp_args_element_name_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_2);

                    exception_lineno = 559;
                    type_description_1 = "oooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_text);
                tmp_args_element_name_10 = var_text;
                frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 559;
                {
                    PyObject *call_args[] = {tmp_args_element_name_9, tmp_args_element_name_10};
                    tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
                }

                Py_DECREF(tmp_called_name_2);
                Py_DECREF(tmp_args_element_name_9);
                if (tmp_call_result_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 559;
                    type_description_1 = "oooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_5);
            }
            goto branch_end_2;
            branch_no_2:;
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_isinstance_inst_2;
                PyObject *tmp_isinstance_cls_2;
                PyObject *tmp_source_name_10;
                PyObject *tmp_mvar_value_3;
                CHECK_OBJECT(var_w);
                tmp_isinstance_inst_2 = var_w;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                if (unlikely(tmp_mvar_value_3 == NULL)) {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                }

                if (tmp_mvar_value_3 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 561;
                    type_description_1 = "oooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_10 = tmp_mvar_value_3;
                tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_QListWidget);
                if (tmp_isinstance_cls_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 561;
                    type_description_1 = "oooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
                Py_DECREF(tmp_isinstance_cls_2);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 561;
                    type_description_1 = "oooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_4;
                } else {
                    goto branch_no_4;
                }
                branch_yes_4:;
                {
                    PyObject *tmp_called_instance_7;
                    PyObject *tmp_call_result_6;
                    PyObject *tmp_args_element_name_11;
                    CHECK_OBJECT(par_self);
                    tmp_called_instance_7 = par_self;
                    CHECK_OBJECT(var_w);
                    tmp_args_element_name_11 = var_w;
                    frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 562;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_11};
                        tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_disableSorting, call_args);
                    }

                    if (tmp_call_result_6 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 562;
                        type_description_1 = "oooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF(tmp_call_result_6);
                }
                {
                    PyObject *tmp_assign_source_4;
                    PyObject *tmp_called_name_3;
                    PyObject *tmp_source_name_11;
                    PyObject *tmp_args_element_name_12;
                    PyObject *tmp_args_element_name_13;
                    PyObject *tmp_args_element_name_14;
                    PyObject *tmp_source_name_12;
                    PyObject *tmp_args_element_name_15;
                    PyObject *tmp_source_name_13;
                    CHECK_OBJECT(par_self);
                    tmp_source_name_11 = par_self;
                    tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_createWidgetItem);
                    if (tmp_called_name_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 563;
                        type_description_1 = "oooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_args_element_name_12 = const_str_plain_QListWidgetItem;
                    CHECK_OBJECT(par_elem);
                    tmp_args_element_name_13 = par_elem;
                    CHECK_OBJECT(var_w);
                    tmp_source_name_12 = var_w;
                    tmp_args_element_name_14 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_item);
                    if (tmp_args_element_name_14 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_3);

                        exception_lineno = 563;
                        type_description_1 = "oooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT(par_self);
                    tmp_source_name_13 = par_self;
                    tmp_args_element_name_15 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_item_nr);
                    if (tmp_args_element_name_15 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_3);
                        Py_DECREF(tmp_args_element_name_14);

                        exception_lineno = 564;
                        type_description_1 = "oooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 563;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15};
                        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_3, call_args);
                    }

                    Py_DECREF(tmp_called_name_3);
                    Py_DECREF(tmp_args_element_name_14);
                    Py_DECREF(tmp_args_element_name_15);
                    if (tmp_assign_source_4 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 563;
                        type_description_1 = "oooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert(var_item == NULL);
                    var_item = tmp_assign_source_4;
                }
                {
                    PyObject *tmp_called_instance_8;
                    PyObject *tmp_call_result_7;
                    PyObject *tmp_args_element_name_16;
                    CHECK_OBJECT(var_w);
                    tmp_called_instance_8 = var_w;
                    CHECK_OBJECT(var_item);
                    tmp_args_element_name_16 = var_item;
                    frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 565;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_16};
                        tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_addItem, call_args);
                    }

                    if (tmp_call_result_7 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 565;
                        type_description_1 = "oooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF(tmp_call_result_7);
                }
                goto branch_end_4;
                branch_no_4:;
                {
                    nuitka_bool tmp_condition_result_5;
                    PyObject *tmp_isinstance_inst_3;
                    PyObject *tmp_isinstance_cls_3;
                    PyObject *tmp_source_name_14;
                    PyObject *tmp_mvar_value_4;
                    CHECK_OBJECT(var_w);
                    tmp_isinstance_inst_3 = var_w;
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                    if (unlikely(tmp_mvar_value_4 == NULL)) {
                        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                    }

                    if (tmp_mvar_value_4 == NULL) {

                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                        CHAIN_EXCEPTION(exception_value);

                        exception_lineno = 567;
                        type_description_1 = "oooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_14 = tmp_mvar_value_4;
                    tmp_isinstance_cls_3 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_QTreeWidget);
                    if (tmp_isinstance_cls_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 567;
                        type_description_1 = "oooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_3, tmp_isinstance_cls_3);
                    Py_DECREF(tmp_isinstance_cls_3);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 567;
                        type_description_1 = "oooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_5 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_5;
                    } else {
                        goto branch_no_5;
                    }
                    branch_yes_5:;
                    {
                        nuitka_bool tmp_condition_result_6;
                        PyObject *tmp_source_name_15;
                        PyObject *tmp_attribute_value_1;
                        int tmp_truth_name_3;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_15 = par_self;
                        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_itemstack);
                        if (tmp_attribute_value_1 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 568;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_attribute_value_1);
                        if (tmp_truth_name_3 == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_attribute_value_1);

                            exception_lineno = 568;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_6 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        Py_DECREF(tmp_attribute_value_1);
                        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_6;
                        } else {
                            goto branch_no_6;
                        }
                        branch_yes_6:;
                        // Tried code:
                        {
                            PyObject *tmp_assign_source_5;
                            PyObject *tmp_iter_arg_1;
                            PyObject *tmp_subscribed_name_2;
                            PyObject *tmp_source_name_16;
                            PyObject *tmp_subscript_name_2;
                            CHECK_OBJECT(par_self);
                            tmp_source_name_16 = par_self;
                            tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_itemstack);
                            if (tmp_subscribed_name_2 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 569;
                                type_description_1 = "oooooooooooooooooo";
                                goto try_except_handler_2;
                            }
                            tmp_subscript_name_2 = const_int_neg_1;
                            tmp_iter_arg_1 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, -1);
                            Py_DECREF(tmp_subscribed_name_2);
                            if (tmp_iter_arg_1 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 569;
                                type_description_1 = "oooooooooooooooooo";
                                goto try_except_handler_2;
                            }
                            tmp_assign_source_5 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
                            Py_DECREF(tmp_iter_arg_1);
                            if (tmp_assign_source_5 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 569;
                                type_description_1 = "oooooooooooooooooo";
                                goto try_except_handler_2;
                            }
                            assert(tmp_tuple_unpack_1__source_iter == NULL);
                            tmp_tuple_unpack_1__source_iter = tmp_assign_source_5;
                        }
                        // Tried code:
                        {
                            PyObject *tmp_assign_source_6;
                            PyObject *tmp_unpack_1;
                            CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
                            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
                            tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
                            if (tmp_assign_source_6 == NULL) {
                                if (!ERROR_OCCURRED()) {
                                    exception_type = PyExc_StopIteration;
                                    Py_INCREF(exception_type);
                                    exception_value = NULL;
                                    exception_tb = NULL;
                                } else {
                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                }


                                type_description_1 = "oooooooooooooooooo";
                                exception_lineno = 569;
                                goto try_except_handler_3;
                            }
                            assert(tmp_tuple_unpack_1__element_1 == NULL);
                            tmp_tuple_unpack_1__element_1 = tmp_assign_source_6;
                        }
                        {
                            PyObject *tmp_assign_source_7;
                            PyObject *tmp_unpack_2;
                            CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
                            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
                            tmp_assign_source_7 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
                            if (tmp_assign_source_7 == NULL) {
                                if (!ERROR_OCCURRED()) {
                                    exception_type = PyExc_StopIteration;
                                    Py_INCREF(exception_type);
                                    exception_value = NULL;
                                    exception_tb = NULL;
                                } else {
                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                }


                                type_description_1 = "oooooooooooooooooo";
                                exception_lineno = 569;
                                goto try_except_handler_3;
                            }
                            assert(tmp_tuple_unpack_1__element_2 == NULL);
                            tmp_tuple_unpack_1__element_2 = tmp_assign_source_7;
                        }
                        {
                            PyObject *tmp_iterator_name_1;
                            CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
                            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
                            // Check if iterator has left-over elements.
                            CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

                            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

                            if (likely(tmp_iterator_attempt == NULL))
                            {
                                PyObject *error = GET_ERROR_OCCURRED();

                                if (error != NULL)
                                {
                                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration))
                                    {
                                        CLEAR_ERROR_OCCURRED();
                                    } else {
                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                                        type_description_1 = "oooooooooooooooooo";
                                        exception_lineno = 569;
                                        goto try_except_handler_3;
                                    }
                                }
                            } else {
                                Py_DECREF(tmp_iterator_attempt);

                                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                                PyErr_Format(PyExc_ValueError, "too many values to unpack");
#else
                                PyErr_Format(PyExc_ValueError, "too many values to unpack (expected 2)");
#endif
                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                                type_description_1 = "oooooooooooooooooo";
                                exception_lineno = 569;
                                goto try_except_handler_3;
                            }
                        }
                        goto try_end_1;
                        // Exception handler code:
                        try_except_handler_3:;
                        exception_keeper_type_1 = exception_type;
                        exception_keeper_value_1 = exception_value;
                        exception_keeper_tb_1 = exception_tb;
                        exception_keeper_lineno_1 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
                        Py_DECREF(tmp_tuple_unpack_1__source_iter);
                        tmp_tuple_unpack_1__source_iter = NULL;

                        // Re-raise.
                        exception_type = exception_keeper_type_1;
                        exception_value = exception_keeper_value_1;
                        exception_tb = exception_keeper_tb_1;
                        exception_lineno = exception_keeper_lineno_1;

                        goto try_except_handler_2;
                        // End of try:
                        try_end_1:;
                        goto try_end_2;
                        // Exception handler code:
                        try_except_handler_2:;
                        exception_keeper_type_2 = exception_type;
                        exception_keeper_value_2 = exception_value;
                        exception_keeper_tb_2 = exception_tb;
                        exception_keeper_lineno_2 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        Py_XDECREF(tmp_tuple_unpack_1__element_1);
                        tmp_tuple_unpack_1__element_1 = NULL;

                        Py_XDECREF(tmp_tuple_unpack_1__element_2);
                        tmp_tuple_unpack_1__element_2 = NULL;

                        // Re-raise.
                        exception_type = exception_keeper_type_2;
                        exception_value = exception_keeper_value_2;
                        exception_tb = exception_keeper_tb_2;
                        exception_lineno = exception_keeper_lineno_2;

                        goto frame_exception_exit_1;
                        // End of try:
                        try_end_2:;
                        CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
                        Py_DECREF(tmp_tuple_unpack_1__source_iter);
                        tmp_tuple_unpack_1__source_iter = NULL;

                        {
                            PyObject *tmp_assign_source_8;
                            CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
                            tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
                            assert(var_parent == NULL);
                            Py_INCREF(tmp_assign_source_8);
                            var_parent = tmp_assign_source_8;
                        }
                        Py_XDECREF(tmp_tuple_unpack_1__element_1);
                        tmp_tuple_unpack_1__element_1 = NULL;

                        {
                            PyObject *tmp_assign_source_9;
                            CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
                            tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;
                            assert(var__ == NULL);
                            Py_INCREF(tmp_assign_source_9);
                            var__ = tmp_assign_source_9;
                        }
                        Py_XDECREF(tmp_tuple_unpack_1__element_2);
                        tmp_tuple_unpack_1__element_2 = NULL;

                        // Tried code:
                        {
                            PyObject *tmp_assign_source_10;
                            PyObject *tmp_iter_arg_2;
                            PyObject *tmp_subscribed_name_3;
                            PyObject *tmp_source_name_17;
                            PyObject *tmp_subscript_name_3;
                            CHECK_OBJECT(par_self);
                            tmp_source_name_17 = par_self;
                            tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_itemstack);
                            if (tmp_subscribed_name_3 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 570;
                                type_description_1 = "oooooooooooooooooo";
                                goto try_except_handler_4;
                            }
                            tmp_subscript_name_3 = const_int_0;
                            tmp_iter_arg_2 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_3, tmp_subscript_name_3, 0);
                            Py_DECREF(tmp_subscribed_name_3);
                            if (tmp_iter_arg_2 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 570;
                                type_description_1 = "oooooooooooooooooo";
                                goto try_except_handler_4;
                            }
                            tmp_assign_source_10 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
                            Py_DECREF(tmp_iter_arg_2);
                            if (tmp_assign_source_10 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 570;
                                type_description_1 = "oooooooooooooooooo";
                                goto try_except_handler_4;
                            }
                            assert(tmp_tuple_unpack_2__source_iter == NULL);
                            tmp_tuple_unpack_2__source_iter = tmp_assign_source_10;
                        }
                        // Tried code:
                        {
                            PyObject *tmp_assign_source_11;
                            PyObject *tmp_unpack_3;
                            CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
                            tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
                            tmp_assign_source_11 = UNPACK_NEXT(tmp_unpack_3, 0, 2);
                            if (tmp_assign_source_11 == NULL) {
                                if (!ERROR_OCCURRED()) {
                                    exception_type = PyExc_StopIteration;
                                    Py_INCREF(exception_type);
                                    exception_value = NULL;
                                    exception_tb = NULL;
                                } else {
                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                }


                                type_description_1 = "oooooooooooooooooo";
                                exception_lineno = 570;
                                goto try_except_handler_5;
                            }
                            assert(tmp_tuple_unpack_2__element_1 == NULL);
                            tmp_tuple_unpack_2__element_1 = tmp_assign_source_11;
                        }
                        {
                            PyObject *tmp_assign_source_12;
                            PyObject *tmp_unpack_4;
                            CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
                            tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
                            tmp_assign_source_12 = UNPACK_NEXT(tmp_unpack_4, 1, 2);
                            if (tmp_assign_source_12 == NULL) {
                                if (!ERROR_OCCURRED()) {
                                    exception_type = PyExc_StopIteration;
                                    Py_INCREF(exception_type);
                                    exception_value = NULL;
                                    exception_tb = NULL;
                                } else {
                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                }


                                type_description_1 = "oooooooooooooooooo";
                                exception_lineno = 570;
                                goto try_except_handler_5;
                            }
                            assert(tmp_tuple_unpack_2__element_2 == NULL);
                            tmp_tuple_unpack_2__element_2 = tmp_assign_source_12;
                        }
                        {
                            PyObject *tmp_iterator_name_2;
                            CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
                            tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
                            // Check if iterator has left-over elements.
                            CHECK_OBJECT(tmp_iterator_name_2); assert(HAS_ITERNEXT(tmp_iterator_name_2));

                            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_2)->tp_iternext)(tmp_iterator_name_2);

                            if (likely(tmp_iterator_attempt == NULL))
                            {
                                PyObject *error = GET_ERROR_OCCURRED();

                                if (error != NULL)
                                {
                                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration))
                                    {
                                        CLEAR_ERROR_OCCURRED();
                                    } else {
                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                                        type_description_1 = "oooooooooooooooooo";
                                        exception_lineno = 570;
                                        goto try_except_handler_5;
                                    }
                                }
                            } else {
                                Py_DECREF(tmp_iterator_attempt);

                                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                                PyErr_Format(PyExc_ValueError, "too many values to unpack");
#else
                                PyErr_Format(PyExc_ValueError, "too many values to unpack (expected 2)");
#endif
                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                                type_description_1 = "oooooooooooooooooo";
                                exception_lineno = 570;
                                goto try_except_handler_5;
                            }
                        }
                        goto try_end_3;
                        // Exception handler code:
                        try_except_handler_5:;
                        exception_keeper_type_3 = exception_type;
                        exception_keeper_value_3 = exception_value;
                        exception_keeper_tb_3 = exception_tb;
                        exception_keeper_lineno_3 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        CHECK_OBJECT((PyObject *)tmp_tuple_unpack_2__source_iter);
                        Py_DECREF(tmp_tuple_unpack_2__source_iter);
                        tmp_tuple_unpack_2__source_iter = NULL;

                        // Re-raise.
                        exception_type = exception_keeper_type_3;
                        exception_value = exception_keeper_value_3;
                        exception_tb = exception_keeper_tb_3;
                        exception_lineno = exception_keeper_lineno_3;

                        goto try_except_handler_4;
                        // End of try:
                        try_end_3:;
                        goto try_end_4;
                        // Exception handler code:
                        try_except_handler_4:;
                        exception_keeper_type_4 = exception_type;
                        exception_keeper_value_4 = exception_value;
                        exception_keeper_tb_4 = exception_tb;
                        exception_keeper_lineno_4 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        Py_XDECREF(tmp_tuple_unpack_2__element_1);
                        tmp_tuple_unpack_2__element_1 = NULL;

                        Py_XDECREF(tmp_tuple_unpack_2__element_2);
                        tmp_tuple_unpack_2__element_2 = NULL;

                        // Re-raise.
                        exception_type = exception_keeper_type_4;
                        exception_value = exception_keeper_value_4;
                        exception_tb = exception_keeper_tb_4;
                        exception_lineno = exception_keeper_lineno_4;

                        goto frame_exception_exit_1;
                        // End of try:
                        try_end_4:;
                        CHECK_OBJECT((PyObject *)tmp_tuple_unpack_2__source_iter);
                        Py_DECREF(tmp_tuple_unpack_2__source_iter);
                        tmp_tuple_unpack_2__source_iter = NULL;

                        {
                            PyObject *tmp_assign_source_13;
                            CHECK_OBJECT(tmp_tuple_unpack_2__element_1);
                            tmp_assign_source_13 = tmp_tuple_unpack_2__element_1;
                            {
                                PyObject *old = var__;
                                assert(old != NULL);
                                var__ = tmp_assign_source_13;
                                Py_INCREF(var__);
                                Py_DECREF(old);
                            }

                        }
                        Py_XDECREF(tmp_tuple_unpack_2__element_1);
                        tmp_tuple_unpack_2__element_1 = NULL;

                        {
                            PyObject *tmp_assign_source_14;
                            CHECK_OBJECT(tmp_tuple_unpack_2__element_2);
                            tmp_assign_source_14 = tmp_tuple_unpack_2__element_2;
                            assert(var_nr_in_root == NULL);
                            Py_INCREF(tmp_assign_source_14);
                            var_nr_in_root = tmp_assign_source_14;
                        }
                        Py_XDECREF(tmp_tuple_unpack_2__element_2);
                        tmp_tuple_unpack_2__element_2 = NULL;

                        goto branch_end_6;
                        branch_no_6:;
                        {
                            PyObject *tmp_assign_source_15;
                            CHECK_OBJECT(var_w);
                            tmp_assign_source_15 = var_w;
                            assert(var_parent == NULL);
                            Py_INCREF(tmp_assign_source_15);
                            var_parent = tmp_assign_source_15;
                        }
                        {
                            PyObject *tmp_assign_source_16;
                            PyObject *tmp_source_name_18;
                            CHECK_OBJECT(par_self);
                            tmp_source_name_18 = par_self;
                            tmp_assign_source_16 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_item_nr);
                            if (tmp_assign_source_16 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 573;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            assert(var_nr_in_root == NULL);
                            var_nr_in_root = tmp_assign_source_16;
                        }
                        branch_end_6:;
                    }
                    {
                        PyObject *tmp_assign_source_17;
                        PyObject *tmp_called_name_4;
                        PyObject *tmp_source_name_19;
                        PyObject *tmp_source_name_20;
                        PyObject *tmp_args_element_name_17;
                        PyObject *tmp_args_element_name_18;
                        PyObject *tmp_left_name_1;
                        PyObject *tmp_right_name_1;
                        PyObject *tmp_len_arg_1;
                        PyObject *tmp_source_name_21;
                        PyObject *tmp_args_element_name_19;
                        PyObject *tmp_tuple_element_1;
                        PyObject *tmp_args_element_name_20;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_20 = par_self;
                        tmp_source_name_19 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_factory);
                        if (tmp_source_name_19 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 575;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_createQObject);
                        Py_DECREF(tmp_source_name_19);
                        if (tmp_called_name_4 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 575;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_args_element_name_17 = const_str_plain_QTreeWidgetItem;
                        tmp_left_name_1 = const_str_digest_84fe8cce8ed440a80406c6f7fbb31b98;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_21 = par_self;
                        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_source_name_21, const_str_plain_itemstack);
                        if (tmp_len_arg_1 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_4);

                            exception_lineno = 576;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_right_name_1 = BUILTIN_LEN(tmp_len_arg_1);
                        Py_DECREF(tmp_len_arg_1);
                        if (tmp_right_name_1 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_4);

                            exception_lineno = 576;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_args_element_name_18 = BINARY_OPERATION_MOD_UNICODE_LONG(tmp_left_name_1, tmp_right_name_1);
                        Py_DECREF(tmp_right_name_1);
                        if (tmp_args_element_name_18 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_4);

                            exception_lineno = 576;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        CHECK_OBJECT(var_parent);
                        tmp_tuple_element_1 = var_parent;
                        tmp_args_element_name_19 = PyTuple_New(1);
                        Py_INCREF(tmp_tuple_element_1);
                        PyTuple_SET_ITEM(tmp_args_element_name_19, 0, tmp_tuple_element_1);
                        tmp_args_element_name_20 = Py_False;
                        frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 575;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_17, tmp_args_element_name_18, tmp_args_element_name_19, tmp_args_element_name_20};
                            tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_4, call_args);
                        }

                        Py_DECREF(tmp_called_name_4);
                        Py_DECREF(tmp_args_element_name_18);
                        Py_DECREF(tmp_args_element_name_19);
                        if (tmp_assign_source_17 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 575;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        assert(var_item == NULL);
                        var_item = tmp_assign_source_17;
                    }
                    {
                        nuitka_bool tmp_condition_result_7;
                        int tmp_and_left_truth_1;
                        nuitka_bool tmp_and_left_value_1;
                        nuitka_bool tmp_and_right_value_1;
                        PyObject *tmp_compexpr_left_1;
                        PyObject *tmp_compexpr_right_1;
                        PyObject *tmp_source_name_22;
                        PyObject *tmp_operand_name_1;
                        PyObject *tmp_source_name_23;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_22 = par_self;
                        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_source_name_22, const_str_plain_item_nr);
                        if (tmp_compexpr_left_1 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 578;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_compexpr_right_1 = const_int_0;
                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
                        Py_DECREF(tmp_compexpr_left_1);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 578;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_and_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
                        if (tmp_and_left_truth_1 == 1) {
                            goto and_right_1;
                        } else {
                            goto and_left_1;
                        }
                        and_right_1:;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_23 = par_self;
                        tmp_operand_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_23, const_str_plain_itemstack);
                        if (tmp_operand_name_1 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 578;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
                        Py_DECREF(tmp_operand_name_1);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 578;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_and_right_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        tmp_condition_result_7 = tmp_and_right_value_1;
                        goto and_end_1;
                        and_left_1:;
                        tmp_condition_result_7 = tmp_and_left_value_1;
                        and_end_1:;
                        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_7;
                        } else {
                            goto branch_no_7;
                        }
                        branch_yes_7:;
                        {
                            PyObject *tmp_assattr_name_1;
                            PyObject *tmp_called_name_5;
                            PyObject *tmp_source_name_24;
                            PyObject *tmp_source_name_25;
                            PyObject *tmp_args_element_name_21;
                            PyObject *tmp_args_element_name_22;
                            PyObject *tmp_source_name_26;
                            PyObject *tmp_assattr_target_1;
                            CHECK_OBJECT(par_self);
                            tmp_source_name_25 = par_self;
                            tmp_source_name_24 = LOOKUP_ATTRIBUTE(tmp_source_name_25, const_str_plain_factory);
                            if (tmp_source_name_24 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 579;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_24, const_str_plain_invoke);
                            Py_DECREF(tmp_source_name_24);
                            if (tmp_called_name_5 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 579;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_args_element_name_21 = const_str_plain___sortingEnabled;
                            CHECK_OBJECT(var_w);
                            tmp_source_name_26 = var_w;
                            tmp_args_element_name_22 = LOOKUP_ATTRIBUTE(tmp_source_name_26, const_str_plain_isSortingEnabled);
                            if (tmp_args_element_name_22 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                Py_DECREF(tmp_called_name_5);

                                exception_lineno = 579;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 579;
                            {
                                PyObject *call_args[] = {tmp_args_element_name_21, tmp_args_element_name_22};
                                tmp_assattr_name_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_5, call_args);
                            }

                            Py_DECREF(tmp_called_name_5);
                            Py_DECREF(tmp_args_element_name_22);
                            if (tmp_assattr_name_1 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 579;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT(par_self);
                            tmp_assattr_target_1 = par_self;
                            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_sorting_enabled, tmp_assattr_name_1);
                            Py_DECREF(tmp_assattr_name_1);
                            if (tmp_result == false) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 579;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                        }
                        {
                            PyObject *tmp_called_instance_9;
                            PyObject *tmp_call_result_8;
                            CHECK_OBJECT(var_w);
                            tmp_called_instance_9 = var_w;
                            frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 580;
                            tmp_call_result_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_setSortingEnabled, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

                            if (tmp_call_result_8 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 580;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            Py_DECREF(tmp_call_result_8);
                        }
                        branch_no_7:;
                    }
                    {
                        PyObject *tmp_called_name_6;
                        PyObject *tmp_source_name_27;
                        PyObject *tmp_source_name_28;
                        PyObject *tmp_call_result_9;
                        PyObject *tmp_args_element_name_23;
                        PyObject *tmp_tuple_element_2;
                        PyObject *tmp_source_name_29;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_28 = par_self;
                        tmp_source_name_27 = LOOKUP_ATTRIBUTE(tmp_source_name_28, const_str_plain_itemstack);
                        if (tmp_source_name_27 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 582;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_27, const_str_plain_append);
                        Py_DECREF(tmp_source_name_27);
                        if (tmp_called_name_6 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 582;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        CHECK_OBJECT(var_item);
                        tmp_tuple_element_2 = var_item;
                        tmp_args_element_name_23 = PyTuple_New(2);
                        Py_INCREF(tmp_tuple_element_2);
                        PyTuple_SET_ITEM(tmp_args_element_name_23, 0, tmp_tuple_element_2);
                        CHECK_OBJECT(par_self);
                        tmp_source_name_29 = par_self;
                        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_source_name_29, const_str_plain_item_nr);
                        if (tmp_tuple_element_2 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_6);
                            Py_DECREF(tmp_args_element_name_23);

                            exception_lineno = 582;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        PyTuple_SET_ITEM(tmp_args_element_name_23, 1, tmp_tuple_element_2);
                        frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 582;
                        tmp_call_result_9 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_6, tmp_args_element_name_23);
                        Py_DECREF(tmp_called_name_6);
                        Py_DECREF(tmp_args_element_name_23);
                        if (tmp_call_result_9 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 582;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        Py_DECREF(tmp_call_result_9);
                    }
                    {
                        PyObject *tmp_assattr_name_2;
                        PyObject *tmp_assattr_target_2;
                        tmp_assattr_name_2 = const_int_0;
                        CHECK_OBJECT(par_self);
                        tmp_assattr_target_2 = par_self;
                        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_item_nr, tmp_assattr_name_2);
                        if (tmp_result == false) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 583;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                    }
                    {
                        PyObject *tmp_assign_source_18;
                        PyObject *tmp_called_instance_10;
                        PyObject *tmp_args_element_name_24;
                        CHECK_OBJECT(var_w);
                        tmp_called_instance_10 = var_w;
                        CHECK_OBJECT(var_nr_in_root);
                        tmp_args_element_name_24 = var_nr_in_root;
                        frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 587;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_24};
                            tmp_assign_source_18 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_10, const_str_plain_topLevelItem, call_args);
                        }

                        if (tmp_assign_source_18 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 587;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        assert(var_titm == NULL);
                        var_titm = tmp_assign_source_18;
                    }
                    {
                        PyObject *tmp_assign_source_19;
                        PyObject *tmp_iter_arg_3;
                        PyObject *tmp_subscribed_name_4;
                        PyObject *tmp_source_name_30;
                        PyObject *tmp_subscript_name_4;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_30 = par_self;
                        tmp_subscribed_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_30, const_str_plain_itemstack);
                        if (tmp_subscribed_name_4 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 588;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_subscript_name_4 = const_slice_int_pos_1_none_none;
                        tmp_iter_arg_3 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_4, tmp_subscript_name_4);
                        Py_DECREF(tmp_subscribed_name_4);
                        if (tmp_iter_arg_3 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 588;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_assign_source_19 = MAKE_ITERATOR(tmp_iter_arg_3);
                        Py_DECREF(tmp_iter_arg_3);
                        if (tmp_assign_source_19 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 588;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        assert(tmp_for_loop_1__for_iterator == NULL);
                        tmp_for_loop_1__for_iterator = tmp_assign_source_19;
                    }
                    // Tried code:
                    loop_start_1:;
                    {
                        PyObject *tmp_next_source_1;
                        PyObject *tmp_assign_source_20;
                        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
                        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
                        tmp_assign_source_20 = ITERATOR_NEXT(tmp_next_source_1);
                        if (tmp_assign_source_20 == NULL) {
                            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                                goto loop_end_1;
                            } else {

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                type_description_1 = "oooooooooooooooooo";
                                exception_lineno = 588;
                                goto try_except_handler_6;
                            }
                        }

                        {
                            PyObject *old = tmp_for_loop_1__iter_value;
                            tmp_for_loop_1__iter_value = tmp_assign_source_20;
                            Py_XDECREF(old);
                        }

                    }
                    // Tried code:
                    {
                        PyObject *tmp_assign_source_21;
                        PyObject *tmp_iter_arg_4;
                        CHECK_OBJECT(tmp_for_loop_1__iter_value);
                        tmp_iter_arg_4 = tmp_for_loop_1__iter_value;
                        tmp_assign_source_21 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_4);
                        if (tmp_assign_source_21 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 588;
                            type_description_1 = "oooooooooooooooooo";
                            goto try_except_handler_7;
                        }
                        {
                            PyObject *old = tmp_tuple_unpack_3__source_iter;
                            tmp_tuple_unpack_3__source_iter = tmp_assign_source_21;
                            Py_XDECREF(old);
                        }

                    }
                    // Tried code:
                    {
                        PyObject *tmp_assign_source_22;
                        PyObject *tmp_unpack_5;
                        CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
                        tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;
                        tmp_assign_source_22 = UNPACK_NEXT(tmp_unpack_5, 0, 2);
                        if (tmp_assign_source_22 == NULL) {
                            if (!ERROR_OCCURRED()) {
                                exception_type = PyExc_StopIteration;
                                Py_INCREF(exception_type);
                                exception_value = NULL;
                                exception_tb = NULL;
                            } else {
                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            }


                            type_description_1 = "oooooooooooooooooo";
                            exception_lineno = 588;
                            goto try_except_handler_8;
                        }
                        {
                            PyObject *old = tmp_tuple_unpack_3__element_1;
                            tmp_tuple_unpack_3__element_1 = tmp_assign_source_22;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_23;
                        PyObject *tmp_unpack_6;
                        CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
                        tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;
                        tmp_assign_source_23 = UNPACK_NEXT(tmp_unpack_6, 1, 2);
                        if (tmp_assign_source_23 == NULL) {
                            if (!ERROR_OCCURRED()) {
                                exception_type = PyExc_StopIteration;
                                Py_INCREF(exception_type);
                                exception_value = NULL;
                                exception_tb = NULL;
                            } else {
                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            }


                            type_description_1 = "oooooooooooooooooo";
                            exception_lineno = 588;
                            goto try_except_handler_8;
                        }
                        {
                            PyObject *old = tmp_tuple_unpack_3__element_2;
                            tmp_tuple_unpack_3__element_2 = tmp_assign_source_23;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_iterator_name_3;
                        CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
                        tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
                        // Check if iterator has left-over elements.
                        CHECK_OBJECT(tmp_iterator_name_3); assert(HAS_ITERNEXT(tmp_iterator_name_3));

                        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_3)->tp_iternext)(tmp_iterator_name_3);

                        if (likely(tmp_iterator_attempt == NULL))
                        {
                            PyObject *error = GET_ERROR_OCCURRED();

                            if (error != NULL)
                            {
                                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration))
                                {
                                    CLEAR_ERROR_OCCURRED();
                                } else {
                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                                    type_description_1 = "oooooooooooooooooo";
                                    exception_lineno = 588;
                                    goto try_except_handler_8;
                                }
                            }
                        } else {
                            Py_DECREF(tmp_iterator_attempt);

                            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                            PyErr_Format(PyExc_ValueError, "too many values to unpack");
#else
                            PyErr_Format(PyExc_ValueError, "too many values to unpack (expected 2)");
#endif
                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                            type_description_1 = "oooooooooooooooooo";
                            exception_lineno = 588;
                            goto try_except_handler_8;
                        }
                    }
                    goto try_end_5;
                    // Exception handler code:
                    try_except_handler_8:;
                    exception_keeper_type_5 = exception_type;
                    exception_keeper_value_5 = exception_value;
                    exception_keeper_tb_5 = exception_tb;
                    exception_keeper_lineno_5 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_3__source_iter);
                    Py_DECREF(tmp_tuple_unpack_3__source_iter);
                    tmp_tuple_unpack_3__source_iter = NULL;

                    // Re-raise.
                    exception_type = exception_keeper_type_5;
                    exception_value = exception_keeper_value_5;
                    exception_tb = exception_keeper_tb_5;
                    exception_lineno = exception_keeper_lineno_5;

                    goto try_except_handler_7;
                    // End of try:
                    try_end_5:;
                    goto try_end_6;
                    // Exception handler code:
                    try_except_handler_7:;
                    exception_keeper_type_6 = exception_type;
                    exception_keeper_value_6 = exception_value;
                    exception_keeper_tb_6 = exception_tb;
                    exception_keeper_lineno_6 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    Py_XDECREF(tmp_tuple_unpack_3__element_1);
                    tmp_tuple_unpack_3__element_1 = NULL;

                    Py_XDECREF(tmp_tuple_unpack_3__element_2);
                    tmp_tuple_unpack_3__element_2 = NULL;

                    // Re-raise.
                    exception_type = exception_keeper_type_6;
                    exception_value = exception_keeper_value_6;
                    exception_tb = exception_keeper_tb_6;
                    exception_lineno = exception_keeper_lineno_6;

                    goto try_except_handler_6;
                    // End of try:
                    try_end_6:;
                    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_3__source_iter);
                    Py_DECREF(tmp_tuple_unpack_3__source_iter);
                    tmp_tuple_unpack_3__source_iter = NULL;

                    {
                        PyObject *tmp_assign_source_24;
                        CHECK_OBJECT(tmp_tuple_unpack_3__element_1);
                        tmp_assign_source_24 = tmp_tuple_unpack_3__element_1;
                        {
                            PyObject *old = var_child;
                            var_child = tmp_assign_source_24;
                            Py_INCREF(var_child);
                            Py_XDECREF(old);
                        }

                    }
                    Py_XDECREF(tmp_tuple_unpack_3__element_1);
                    tmp_tuple_unpack_3__element_1 = NULL;

                    {
                        PyObject *tmp_assign_source_25;
                        CHECK_OBJECT(tmp_tuple_unpack_3__element_2);
                        tmp_assign_source_25 = tmp_tuple_unpack_3__element_2;
                        {
                            PyObject *old = var_nr_in_parent;
                            var_nr_in_parent = tmp_assign_source_25;
                            Py_INCREF(var_nr_in_parent);
                            Py_XDECREF(old);
                        }

                    }
                    Py_XDECREF(tmp_tuple_unpack_3__element_2);
                    tmp_tuple_unpack_3__element_2 = NULL;

                    {
                        PyObject *tmp_assign_source_26;
                        PyObject *tmp_called_instance_11;
                        PyObject *tmp_args_element_name_25;
                        CHECK_OBJECT(var_titm);
                        tmp_called_instance_11 = var_titm;
                        CHECK_OBJECT(var_nr_in_parent);
                        tmp_args_element_name_25 = var_nr_in_parent;
                        frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 589;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_25};
                            tmp_assign_source_26 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_11, const_str_plain_child, call_args);
                        }

                        if (tmp_assign_source_26 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 589;
                            type_description_1 = "oooooooooooooooooo";
                            goto try_except_handler_6;
                        }
                        {
                            PyObject *old = var_titm;
                            assert(old != NULL);
                            var_titm = tmp_assign_source_26;
                            Py_DECREF(old);
                        }

                    }
                    if (CONSIDER_THREADING() == false) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 588;
                        type_description_1 = "oooooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    goto loop_start_1;
                    loop_end_1:;
                    goto try_end_7;
                    // Exception handler code:
                    try_except_handler_6:;
                    exception_keeper_type_7 = exception_type;
                    exception_keeper_value_7 = exception_value;
                    exception_keeper_tb_7 = exception_tb;
                    exception_keeper_lineno_7 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    Py_XDECREF(tmp_for_loop_1__iter_value);
                    tmp_for_loop_1__iter_value = NULL;

                    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
                    Py_DECREF(tmp_for_loop_1__for_iterator);
                    tmp_for_loop_1__for_iterator = NULL;

                    // Re-raise.
                    exception_type = exception_keeper_type_7;
                    exception_value = exception_keeper_value_7;
                    exception_tb = exception_keeper_tb_7;
                    exception_lineno = exception_keeper_lineno_7;

                    goto frame_exception_exit_1;
                    // End of try:
                    try_end_7:;
                    Py_XDECREF(tmp_for_loop_1__iter_value);
                    tmp_for_loop_1__iter_value = NULL;

                    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
                    Py_DECREF(tmp_for_loop_1__for_iterator);
                    tmp_for_loop_1__for_iterator = NULL;

                    {
                        PyObject *tmp_assign_source_27;
                        tmp_assign_source_27 = const_int_neg_1;
                        assert(var_column == NULL);
                        Py_INCREF(tmp_assign_source_27);
                        var_column = tmp_assign_source_27;
                    }
                    {
                        PyObject *tmp_assign_source_28;
                        PyObject *tmp_iter_arg_5;
                        PyObject *tmp_called_instance_12;
                        CHECK_OBJECT(par_elem);
                        tmp_called_instance_12 = par_elem;
                        frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 592;
                        tmp_iter_arg_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_12, const_str_plain_findall, &PyTuple_GET_ITEM(const_tuple_str_plain_property_tuple, 0));

                        if (tmp_iter_arg_5 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 592;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_assign_source_28 = MAKE_ITERATOR(tmp_iter_arg_5);
                        Py_DECREF(tmp_iter_arg_5);
                        if (tmp_assign_source_28 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 592;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        assert(tmp_for_loop_2__for_iterator == NULL);
                        tmp_for_loop_2__for_iterator = tmp_assign_source_28;
                    }
                    // Tried code:
                    loop_start_2:;
                    {
                        PyObject *tmp_next_source_2;
                        PyObject *tmp_assign_source_29;
                        CHECK_OBJECT(tmp_for_loop_2__for_iterator);
                        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
                        tmp_assign_source_29 = ITERATOR_NEXT(tmp_next_source_2);
                        if (tmp_assign_source_29 == NULL) {
                            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                                goto loop_end_2;
                            } else {

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                type_description_1 = "oooooooooooooooooo";
                                exception_lineno = 592;
                                goto try_except_handler_9;
                            }
                        }

                        {
                            PyObject *old = tmp_for_loop_2__iter_value;
                            tmp_for_loop_2__iter_value = tmp_assign_source_29;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_30;
                        CHECK_OBJECT(tmp_for_loop_2__iter_value);
                        tmp_assign_source_30 = tmp_for_loop_2__iter_value;
                        {
                            PyObject *old = var_prop;
                            var_prop = tmp_assign_source_30;
                            Py_INCREF(var_prop);
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_31;
                        PyObject *tmp_called_instance_13;
                        PyObject *tmp_source_name_31;
                        PyObject *tmp_args_element_name_26;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_31 = par_self;
                        tmp_called_instance_13 = LOOKUP_ATTRIBUTE(tmp_source_name_31, const_str_plain_wprops);
                        if (tmp_called_instance_13 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 593;
                            type_description_1 = "oooooooooooooooooo";
                            goto try_except_handler_9;
                        }
                        CHECK_OBJECT(var_prop);
                        tmp_args_element_name_26 = var_prop;
                        frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 593;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_26};
                            tmp_assign_source_31 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_13, const_str_plain_convert, call_args);
                        }

                        Py_DECREF(tmp_called_instance_13);
                        if (tmp_assign_source_31 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 593;
                            type_description_1 = "oooooooooooooooooo";
                            goto try_except_handler_9;
                        }
                        {
                            PyObject *old = var_c_prop;
                            var_c_prop = tmp_assign_source_31;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_32;
                        PyObject *tmp_subscribed_name_5;
                        PyObject *tmp_source_name_32;
                        PyObject *tmp_subscript_name_5;
                        CHECK_OBJECT(var_prop);
                        tmp_source_name_32 = var_prop;
                        tmp_subscribed_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_32, const_str_plain_attrib);
                        if (tmp_subscribed_name_5 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 594;
                            type_description_1 = "oooooooooooooooooo";
                            goto try_except_handler_9;
                        }
                        tmp_subscript_name_5 = const_str_plain_name;
                        tmp_assign_source_32 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_5, tmp_subscript_name_5);
                        Py_DECREF(tmp_subscribed_name_5);
                        if (tmp_assign_source_32 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 594;
                            type_description_1 = "oooooooooooooooooo";
                            goto try_except_handler_9;
                        }
                        {
                            PyObject *old = var_c_prop_name;
                            var_c_prop_name = tmp_assign_source_32;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        nuitka_bool tmp_condition_result_8;
                        PyObject *tmp_compexpr_left_2;
                        PyObject *tmp_compexpr_right_2;
                        CHECK_OBJECT(var_c_prop_name);
                        tmp_compexpr_left_2 = var_c_prop_name;
                        tmp_compexpr_right_2 = const_str_plain_text;
                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 596;
                            type_description_1 = "oooooooooooooooooo";
                            goto try_except_handler_9;
                        }
                        tmp_condition_result_8 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_8;
                        } else {
                            goto branch_no_8;
                        }
                        branch_yes_8:;
                        {
                            PyObject *tmp_assign_source_33;
                            PyObject *tmp_left_name_2;
                            PyObject *tmp_right_name_2;
                            if (var_column == NULL) {

                                exception_type = PyExc_UnboundLocalError;
                                Py_INCREF(exception_type);
                                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "column");
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                CHAIN_EXCEPTION(exception_value);

                                exception_lineno = 597;
                                type_description_1 = "oooooooooooooooooo";
                                goto try_except_handler_9;
                            }

                            tmp_left_name_2 = var_column;
                            tmp_right_name_2 = const_int_pos_1;
                            tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_name_2, tmp_right_name_2);
                            if (tmp_result == false) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 597;
                                type_description_1 = "oooooooooooooooooo";
                                goto try_except_handler_9;
                            }
                            tmp_assign_source_33 = tmp_left_name_2;
                            var_column = tmp_assign_source_33;

                        }
                        {
                            nuitka_bool tmp_condition_result_9;
                            int tmp_truth_name_4;
                            CHECK_OBJECT(var_c_prop);
                            tmp_truth_name_4 = CHECK_IF_TRUE(var_c_prop);
                            if (tmp_truth_name_4 == -1) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 598;
                                type_description_1 = "oooooooooooooooooo";
                                goto try_except_handler_9;
                            }
                            tmp_condition_result_9 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
                                goto branch_yes_9;
                            } else {
                                goto branch_no_9;
                            }
                            branch_yes_9:;
                            {
                                PyObject *tmp_called_instance_14;
                                PyObject *tmp_call_result_10;
                                PyObject *tmp_args_element_name_27;
                                PyObject *tmp_args_element_name_28;
                                CHECK_OBJECT(var_titm);
                                tmp_called_instance_14 = var_titm;
                                CHECK_OBJECT(var_column);
                                tmp_args_element_name_27 = var_column;
                                CHECK_OBJECT(var_c_prop);
                                tmp_args_element_name_28 = var_c_prop;
                                frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 599;
                                {
                                    PyObject *call_args[] = {tmp_args_element_name_27, tmp_args_element_name_28};
                                    tmp_call_result_10 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_14, const_str_plain_setText, call_args);
                                }

                                if (tmp_call_result_10 == NULL) {
                                    assert(ERROR_OCCURRED());

                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                    exception_lineno = 599;
                                    type_description_1 = "oooooooooooooooooo";
                                    goto try_except_handler_9;
                                }
                                Py_DECREF(tmp_call_result_10);
                            }
                            branch_no_9:;
                        }
                        goto branch_end_8;
                        branch_no_8:;
                        {
                            nuitka_bool tmp_condition_result_10;
                            PyObject *tmp_compexpr_left_3;
                            PyObject *tmp_compexpr_right_3;
                            CHECK_OBJECT(var_c_prop_name);
                            tmp_compexpr_left_3 = var_c_prop_name;
                            tmp_compexpr_right_3 = const_str_plain_statusTip;
                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
                            if (tmp_res == -1) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 600;
                                type_description_1 = "oooooooooooooooooo";
                                goto try_except_handler_9;
                            }
                            tmp_condition_result_10 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
                                goto branch_yes_10;
                            } else {
                                goto branch_no_10;
                            }
                            branch_yes_10:;
                            {
                                PyObject *tmp_called_name_7;
                                PyObject *tmp_source_name_33;
                                PyObject *tmp_call_result_11;
                                PyObject *tmp_args_element_name_29;
                                PyObject *tmp_args_element_name_30;
                                CHECK_OBJECT(var_item);
                                tmp_source_name_33 = var_item;
                                tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_33, const_str_plain_setStatusTip);
                                if (tmp_called_name_7 == NULL) {
                                    assert(ERROR_OCCURRED());

                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                    exception_lineno = 601;
                                    type_description_1 = "oooooooooooooooooo";
                                    goto try_except_handler_9;
                                }
                                if (var_column == NULL) {
                                    Py_DECREF(tmp_called_name_7);
                                    exception_type = PyExc_UnboundLocalError;
                                    Py_INCREF(exception_type);
                                    exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "column");
                                    exception_tb = NULL;
                                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                    CHAIN_EXCEPTION(exception_value);

                                    exception_lineno = 601;
                                    type_description_1 = "oooooooooooooooooo";
                                    goto try_except_handler_9;
                                }

                                tmp_args_element_name_29 = var_column;
                                CHECK_OBJECT(var_c_prop);
                                tmp_args_element_name_30 = var_c_prop;
                                frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 601;
                                {
                                    PyObject *call_args[] = {tmp_args_element_name_29, tmp_args_element_name_30};
                                    tmp_call_result_11 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_7, call_args);
                                }

                                Py_DECREF(tmp_called_name_7);
                                if (tmp_call_result_11 == NULL) {
                                    assert(ERROR_OCCURRED());

                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                    exception_lineno = 601;
                                    type_description_1 = "oooooooooooooooooo";
                                    goto try_except_handler_9;
                                }
                                Py_DECREF(tmp_call_result_11);
                            }
                            goto branch_end_10;
                            branch_no_10:;
                            {
                                nuitka_bool tmp_condition_result_11;
                                PyObject *tmp_compexpr_left_4;
                                PyObject *tmp_compexpr_right_4;
                                CHECK_OBJECT(var_c_prop_name);
                                tmp_compexpr_left_4 = var_c_prop_name;
                                tmp_compexpr_right_4 = const_str_plain_toolTip;
                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
                                if (tmp_res == -1) {
                                    assert(ERROR_OCCURRED());

                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                    exception_lineno = 602;
                                    type_description_1 = "oooooooooooooooooo";
                                    goto try_except_handler_9;
                                }
                                tmp_condition_result_11 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
                                    goto branch_yes_11;
                                } else {
                                    goto branch_no_11;
                                }
                                branch_yes_11:;
                                {
                                    PyObject *tmp_called_name_8;
                                    PyObject *tmp_source_name_34;
                                    PyObject *tmp_call_result_12;
                                    PyObject *tmp_args_element_name_31;
                                    PyObject *tmp_args_element_name_32;
                                    CHECK_OBJECT(var_item);
                                    tmp_source_name_34 = var_item;
                                    tmp_called_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_34, const_str_plain_setToolTip);
                                    if (tmp_called_name_8 == NULL) {
                                        assert(ERROR_OCCURRED());

                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                        exception_lineno = 603;
                                        type_description_1 = "oooooooooooooooooo";
                                        goto try_except_handler_9;
                                    }
                                    if (var_column == NULL) {
                                        Py_DECREF(tmp_called_name_8);
                                        exception_type = PyExc_UnboundLocalError;
                                        Py_INCREF(exception_type);
                                        exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "column");
                                        exception_tb = NULL;
                                        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                        CHAIN_EXCEPTION(exception_value);

                                        exception_lineno = 603;
                                        type_description_1 = "oooooooooooooooooo";
                                        goto try_except_handler_9;
                                    }

                                    tmp_args_element_name_31 = var_column;
                                    CHECK_OBJECT(var_c_prop);
                                    tmp_args_element_name_32 = var_c_prop;
                                    frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 603;
                                    {
                                        PyObject *call_args[] = {tmp_args_element_name_31, tmp_args_element_name_32};
                                        tmp_call_result_12 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_8, call_args);
                                    }

                                    Py_DECREF(tmp_called_name_8);
                                    if (tmp_call_result_12 == NULL) {
                                        assert(ERROR_OCCURRED());

                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                        exception_lineno = 603;
                                        type_description_1 = "oooooooooooooooooo";
                                        goto try_except_handler_9;
                                    }
                                    Py_DECREF(tmp_call_result_12);
                                }
                                goto branch_end_11;
                                branch_no_11:;
                                {
                                    nuitka_bool tmp_condition_result_12;
                                    PyObject *tmp_compexpr_left_5;
                                    PyObject *tmp_compexpr_right_5;
                                    CHECK_OBJECT(var_c_prop_name);
                                    tmp_compexpr_left_5 = var_c_prop_name;
                                    tmp_compexpr_right_5 = const_str_plain_whatsThis;
                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_5, tmp_compexpr_right_5);
                                    if (tmp_res == -1) {
                                        assert(ERROR_OCCURRED());

                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                        exception_lineno = 604;
                                        type_description_1 = "oooooooooooooooooo";
                                        goto try_except_handler_9;
                                    }
                                    tmp_condition_result_12 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                    if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                                        goto branch_yes_12;
                                    } else {
                                        goto branch_no_12;
                                    }
                                    branch_yes_12:;
                                    {
                                        PyObject *tmp_called_name_9;
                                        PyObject *tmp_source_name_35;
                                        PyObject *tmp_call_result_13;
                                        PyObject *tmp_args_element_name_33;
                                        PyObject *tmp_args_element_name_34;
                                        CHECK_OBJECT(var_item);
                                        tmp_source_name_35 = var_item;
                                        tmp_called_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_35, const_str_plain_setWhatsThis);
                                        if (tmp_called_name_9 == NULL) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 605;
                                            type_description_1 = "oooooooooooooooooo";
                                            goto try_except_handler_9;
                                        }
                                        if (var_column == NULL) {
                                            Py_DECREF(tmp_called_name_9);
                                            exception_type = PyExc_UnboundLocalError;
                                            Py_INCREF(exception_type);
                                            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "column");
                                            exception_tb = NULL;
                                            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                            CHAIN_EXCEPTION(exception_value);

                                            exception_lineno = 605;
                                            type_description_1 = "oooooooooooooooooo";
                                            goto try_except_handler_9;
                                        }

                                        tmp_args_element_name_33 = var_column;
                                        CHECK_OBJECT(var_c_prop);
                                        tmp_args_element_name_34 = var_c_prop;
                                        frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 605;
                                        {
                                            PyObject *call_args[] = {tmp_args_element_name_33, tmp_args_element_name_34};
                                            tmp_call_result_13 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_9, call_args);
                                        }

                                        Py_DECREF(tmp_called_name_9);
                                        if (tmp_call_result_13 == NULL) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 605;
                                            type_description_1 = "oooooooooooooooooo";
                                            goto try_except_handler_9;
                                        }
                                        Py_DECREF(tmp_call_result_13);
                                    }
                                    goto branch_end_12;
                                    branch_no_12:;
                                    {
                                        nuitka_bool tmp_condition_result_13;
                                        PyObject *tmp_compexpr_left_6;
                                        PyObject *tmp_compexpr_right_6;
                                        CHECK_OBJECT(var_c_prop_name);
                                        tmp_compexpr_left_6 = var_c_prop_name;
                                        tmp_compexpr_right_6 = const_str_plain_font;
                                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_6, tmp_compexpr_right_6);
                                        if (tmp_res == -1) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 606;
                                            type_description_1 = "oooooooooooooooooo";
                                            goto try_except_handler_9;
                                        }
                                        tmp_condition_result_13 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                        if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
                                            goto branch_yes_13;
                                        } else {
                                            goto branch_no_13;
                                        }
                                        branch_yes_13:;
                                        {
                                            PyObject *tmp_called_name_10;
                                            PyObject *tmp_source_name_36;
                                            PyObject *tmp_call_result_14;
                                            PyObject *tmp_args_element_name_35;
                                            PyObject *tmp_args_element_name_36;
                                            CHECK_OBJECT(var_item);
                                            tmp_source_name_36 = var_item;
                                            tmp_called_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_36, const_str_plain_setFont);
                                            if (tmp_called_name_10 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 607;
                                                type_description_1 = "oooooooooooooooooo";
                                                goto try_except_handler_9;
                                            }
                                            if (var_column == NULL) {
                                                Py_DECREF(tmp_called_name_10);
                                                exception_type = PyExc_UnboundLocalError;
                                                Py_INCREF(exception_type);
                                                exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "column");
                                                exception_tb = NULL;
                                                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                                CHAIN_EXCEPTION(exception_value);

                                                exception_lineno = 607;
                                                type_description_1 = "oooooooooooooooooo";
                                                goto try_except_handler_9;
                                            }

                                            tmp_args_element_name_35 = var_column;
                                            CHECK_OBJECT(var_c_prop);
                                            tmp_args_element_name_36 = var_c_prop;
                                            frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 607;
                                            {
                                                PyObject *call_args[] = {tmp_args_element_name_35, tmp_args_element_name_36};
                                                tmp_call_result_14 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_10, call_args);
                                            }

                                            Py_DECREF(tmp_called_name_10);
                                            if (tmp_call_result_14 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 607;
                                                type_description_1 = "oooooooooooooooooo";
                                                goto try_except_handler_9;
                                            }
                                            Py_DECREF(tmp_call_result_14);
                                        }
                                        goto branch_end_13;
                                        branch_no_13:;
                                        {
                                            nuitka_bool tmp_condition_result_14;
                                            PyObject *tmp_compexpr_left_7;
                                            PyObject *tmp_compexpr_right_7;
                                            CHECK_OBJECT(var_c_prop_name);
                                            tmp_compexpr_left_7 = var_c_prop_name;
                                            tmp_compexpr_right_7 = const_str_plain_icon;
                                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_7, tmp_compexpr_right_7);
                                            if (tmp_res == -1) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 608;
                                                type_description_1 = "oooooooooooooooooo";
                                                goto try_except_handler_9;
                                            }
                                            tmp_condition_result_14 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                            if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
                                                goto branch_yes_14;
                                            } else {
                                                goto branch_no_14;
                                            }
                                            branch_yes_14:;
                                            {
                                                PyObject *tmp_called_name_11;
                                                PyObject *tmp_source_name_37;
                                                PyObject *tmp_call_result_15;
                                                PyObject *tmp_args_element_name_37;
                                                PyObject *tmp_args_element_name_38;
                                                CHECK_OBJECT(var_item);
                                                tmp_source_name_37 = var_item;
                                                tmp_called_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_37, const_str_plain_setIcon);
                                                if (tmp_called_name_11 == NULL) {
                                                    assert(ERROR_OCCURRED());

                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                    exception_lineno = 609;
                                                    type_description_1 = "oooooooooooooooooo";
                                                    goto try_except_handler_9;
                                                }
                                                if (var_column == NULL) {
                                                    Py_DECREF(tmp_called_name_11);
                                                    exception_type = PyExc_UnboundLocalError;
                                                    Py_INCREF(exception_type);
                                                    exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "column");
                                                    exception_tb = NULL;
                                                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                                    CHAIN_EXCEPTION(exception_value);

                                                    exception_lineno = 609;
                                                    type_description_1 = "oooooooooooooooooo";
                                                    goto try_except_handler_9;
                                                }

                                                tmp_args_element_name_37 = var_column;
                                                CHECK_OBJECT(var_c_prop);
                                                tmp_args_element_name_38 = var_c_prop;
                                                frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 609;
                                                {
                                                    PyObject *call_args[] = {tmp_args_element_name_37, tmp_args_element_name_38};
                                                    tmp_call_result_15 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_11, call_args);
                                                }

                                                Py_DECREF(tmp_called_name_11);
                                                if (tmp_call_result_15 == NULL) {
                                                    assert(ERROR_OCCURRED());

                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                    exception_lineno = 609;
                                                    type_description_1 = "oooooooooooooooooo";
                                                    goto try_except_handler_9;
                                                }
                                                Py_DECREF(tmp_call_result_15);
                                            }
                                            goto branch_end_14;
                                            branch_no_14:;
                                            {
                                                nuitka_bool tmp_condition_result_15;
                                                PyObject *tmp_compexpr_left_8;
                                                PyObject *tmp_compexpr_right_8;
                                                CHECK_OBJECT(var_c_prop_name);
                                                tmp_compexpr_left_8 = var_c_prop_name;
                                                tmp_compexpr_right_8 = const_str_plain_background;
                                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_8, tmp_compexpr_right_8);
                                                if (tmp_res == -1) {
                                                    assert(ERROR_OCCURRED());

                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                    exception_lineno = 610;
                                                    type_description_1 = "oooooooooooooooooo";
                                                    goto try_except_handler_9;
                                                }
                                                tmp_condition_result_15 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                if (tmp_condition_result_15 == NUITKA_BOOL_TRUE) {
                                                    goto branch_yes_15;
                                                } else {
                                                    goto branch_no_15;
                                                }
                                                branch_yes_15:;
                                                {
                                                    PyObject *tmp_called_name_12;
                                                    PyObject *tmp_source_name_38;
                                                    PyObject *tmp_call_result_16;
                                                    PyObject *tmp_args_element_name_39;
                                                    PyObject *tmp_args_element_name_40;
                                                    CHECK_OBJECT(var_item);
                                                    tmp_source_name_38 = var_item;
                                                    tmp_called_name_12 = LOOKUP_ATTRIBUTE(tmp_source_name_38, const_str_plain_setBackground);
                                                    if (tmp_called_name_12 == NULL) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                        exception_lineno = 611;
                                                        type_description_1 = "oooooooooooooooooo";
                                                        goto try_except_handler_9;
                                                    }
                                                    if (var_column == NULL) {
                                                        Py_DECREF(tmp_called_name_12);
                                                        exception_type = PyExc_UnboundLocalError;
                                                        Py_INCREF(exception_type);
                                                        exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "column");
                                                        exception_tb = NULL;
                                                        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                                        CHAIN_EXCEPTION(exception_value);

                                                        exception_lineno = 611;
                                                        type_description_1 = "oooooooooooooooooo";
                                                        goto try_except_handler_9;
                                                    }

                                                    tmp_args_element_name_39 = var_column;
                                                    CHECK_OBJECT(var_c_prop);
                                                    tmp_args_element_name_40 = var_c_prop;
                                                    frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 611;
                                                    {
                                                        PyObject *call_args[] = {tmp_args_element_name_39, tmp_args_element_name_40};
                                                        tmp_call_result_16 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_12, call_args);
                                                    }

                                                    Py_DECREF(tmp_called_name_12);
                                                    if (tmp_call_result_16 == NULL) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                        exception_lineno = 611;
                                                        type_description_1 = "oooooooooooooooooo";
                                                        goto try_except_handler_9;
                                                    }
                                                    Py_DECREF(tmp_call_result_16);
                                                }
                                                goto branch_end_15;
                                                branch_no_15:;
                                                {
                                                    nuitka_bool tmp_condition_result_16;
                                                    PyObject *tmp_compexpr_left_9;
                                                    PyObject *tmp_compexpr_right_9;
                                                    CHECK_OBJECT(var_c_prop_name);
                                                    tmp_compexpr_left_9 = var_c_prop_name;
                                                    tmp_compexpr_right_9 = const_str_plain_foreground;
                                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_9, tmp_compexpr_right_9);
                                                    if (tmp_res == -1) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                        exception_lineno = 612;
                                                        type_description_1 = "oooooooooooooooooo";
                                                        goto try_except_handler_9;
                                                    }
                                                    tmp_condition_result_16 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                    if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
                                                        goto branch_yes_16;
                                                    } else {
                                                        goto branch_no_16;
                                                    }
                                                    branch_yes_16:;
                                                    {
                                                        PyObject *tmp_called_name_13;
                                                        PyObject *tmp_source_name_39;
                                                        PyObject *tmp_call_result_17;
                                                        PyObject *tmp_args_element_name_41;
                                                        PyObject *tmp_args_element_name_42;
                                                        CHECK_OBJECT(var_item);
                                                        tmp_source_name_39 = var_item;
                                                        tmp_called_name_13 = LOOKUP_ATTRIBUTE(tmp_source_name_39, const_str_plain_setForeground);
                                                        if (tmp_called_name_13 == NULL) {
                                                            assert(ERROR_OCCURRED());

                                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                            exception_lineno = 613;
                                                            type_description_1 = "oooooooooooooooooo";
                                                            goto try_except_handler_9;
                                                        }
                                                        if (var_column == NULL) {
                                                            Py_DECREF(tmp_called_name_13);
                                                            exception_type = PyExc_UnboundLocalError;
                                                            Py_INCREF(exception_type);
                                                            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "column");
                                                            exception_tb = NULL;
                                                            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                                            CHAIN_EXCEPTION(exception_value);

                                                            exception_lineno = 613;
                                                            type_description_1 = "oooooooooooooooooo";
                                                            goto try_except_handler_9;
                                                        }

                                                        tmp_args_element_name_41 = var_column;
                                                        CHECK_OBJECT(var_c_prop);
                                                        tmp_args_element_name_42 = var_c_prop;
                                                        frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 613;
                                                        {
                                                            PyObject *call_args[] = {tmp_args_element_name_41, tmp_args_element_name_42};
                                                            tmp_call_result_17 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_13, call_args);
                                                        }

                                                        Py_DECREF(tmp_called_name_13);
                                                        if (tmp_call_result_17 == NULL) {
                                                            assert(ERROR_OCCURRED());

                                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                            exception_lineno = 613;
                                                            type_description_1 = "oooooooooooooooooo";
                                                            goto try_except_handler_9;
                                                        }
                                                        Py_DECREF(tmp_call_result_17);
                                                    }
                                                    goto branch_end_16;
                                                    branch_no_16:;
                                                    {
                                                        nuitka_bool tmp_condition_result_17;
                                                        PyObject *tmp_compexpr_left_10;
                                                        PyObject *tmp_compexpr_right_10;
                                                        CHECK_OBJECT(var_c_prop_name);
                                                        tmp_compexpr_left_10 = var_c_prop_name;
                                                        tmp_compexpr_right_10 = const_str_plain_flags;
                                                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_10, tmp_compexpr_right_10);
                                                        if (tmp_res == -1) {
                                                            assert(ERROR_OCCURRED());

                                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                            exception_lineno = 614;
                                                            type_description_1 = "oooooooooooooooooo";
                                                            goto try_except_handler_9;
                                                        }
                                                        tmp_condition_result_17 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                        if (tmp_condition_result_17 == NUITKA_BOOL_TRUE) {
                                                            goto branch_yes_17;
                                                        } else {
                                                            goto branch_no_17;
                                                        }
                                                        branch_yes_17:;
                                                        {
                                                            PyObject *tmp_called_instance_15;
                                                            PyObject *tmp_call_result_18;
                                                            PyObject *tmp_args_element_name_43;
                                                            CHECK_OBJECT(var_item);
                                                            tmp_called_instance_15 = var_item;
                                                            CHECK_OBJECT(var_c_prop);
                                                            tmp_args_element_name_43 = var_c_prop;
                                                            frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 615;
                                                            {
                                                                PyObject *call_args[] = {tmp_args_element_name_43};
                                                                tmp_call_result_18 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_15, const_str_plain_setFlags, call_args);
                                                            }

                                                            if (tmp_call_result_18 == NULL) {
                                                                assert(ERROR_OCCURRED());

                                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                exception_lineno = 615;
                                                                type_description_1 = "oooooooooooooooooo";
                                                                goto try_except_handler_9;
                                                            }
                                                            Py_DECREF(tmp_call_result_18);
                                                        }
                                                        goto branch_end_17;
                                                        branch_no_17:;
                                                        {
                                                            nuitka_bool tmp_condition_result_18;
                                                            PyObject *tmp_compexpr_left_11;
                                                            PyObject *tmp_compexpr_right_11;
                                                            CHECK_OBJECT(var_c_prop_name);
                                                            tmp_compexpr_left_11 = var_c_prop_name;
                                                            tmp_compexpr_right_11 = const_str_plain_checkState;
                                                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_11, tmp_compexpr_right_11);
                                                            if (tmp_res == -1) {
                                                                assert(ERROR_OCCURRED());

                                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                exception_lineno = 616;
                                                                type_description_1 = "oooooooooooooooooo";
                                                                goto try_except_handler_9;
                                                            }
                                                            tmp_condition_result_18 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                            if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
                                                                goto branch_yes_18;
                                                            } else {
                                                                goto branch_no_18;
                                                            }
                                                            branch_yes_18:;
                                                            {
                                                                PyObject *tmp_called_name_14;
                                                                PyObject *tmp_source_name_40;
                                                                PyObject *tmp_call_result_19;
                                                                PyObject *tmp_args_element_name_44;
                                                                PyObject *tmp_args_element_name_45;
                                                                CHECK_OBJECT(var_item);
                                                                tmp_source_name_40 = var_item;
                                                                tmp_called_name_14 = LOOKUP_ATTRIBUTE(tmp_source_name_40, const_str_plain_setCheckState);
                                                                if (tmp_called_name_14 == NULL) {
                                                                    assert(ERROR_OCCURRED());

                                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                    exception_lineno = 617;
                                                                    type_description_1 = "oooooooooooooooooo";
                                                                    goto try_except_handler_9;
                                                                }
                                                                if (var_column == NULL) {
                                                                    Py_DECREF(tmp_called_name_14);
                                                                    exception_type = PyExc_UnboundLocalError;
                                                                    Py_INCREF(exception_type);
                                                                    exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "column");
                                                                    exception_tb = NULL;
                                                                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                                                                    CHAIN_EXCEPTION(exception_value);

                                                                    exception_lineno = 617;
                                                                    type_description_1 = "oooooooooooooooooo";
                                                                    goto try_except_handler_9;
                                                                }

                                                                tmp_args_element_name_44 = var_column;
                                                                CHECK_OBJECT(var_c_prop);
                                                                tmp_args_element_name_45 = var_c_prop;
                                                                frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 617;
                                                                {
                                                                    PyObject *call_args[] = {tmp_args_element_name_44, tmp_args_element_name_45};
                                                                    tmp_call_result_19 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_14, call_args);
                                                                }

                                                                Py_DECREF(tmp_called_name_14);
                                                                if (tmp_call_result_19 == NULL) {
                                                                    assert(ERROR_OCCURRED());

                                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                    exception_lineno = 617;
                                                                    type_description_1 = "oooooooooooooooooo";
                                                                    goto try_except_handler_9;
                                                                }
                                                                Py_DECREF(tmp_call_result_19);
                                                            }
                                                            branch_no_18:;
                                                        }
                                                        branch_end_17:;
                                                    }
                                                    branch_end_16:;
                                                }
                                                branch_end_15:;
                                            }
                                            branch_end_14:;
                                        }
                                        branch_end_13:;
                                    }
                                    branch_end_12:;
                                }
                                branch_end_11:;
                            }
                            branch_end_10:;
                        }
                        branch_end_8:;
                    }
                    if (CONSIDER_THREADING() == false) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 592;
                        type_description_1 = "oooooooooooooooooo";
                        goto try_except_handler_9;
                    }
                    goto loop_start_2;
                    loop_end_2:;
                    goto try_end_8;
                    // Exception handler code:
                    try_except_handler_9:;
                    exception_keeper_type_8 = exception_type;
                    exception_keeper_value_8 = exception_value;
                    exception_keeper_tb_8 = exception_tb;
                    exception_keeper_lineno_8 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    Py_XDECREF(tmp_for_loop_2__iter_value);
                    tmp_for_loop_2__iter_value = NULL;

                    CHECK_OBJECT((PyObject *)tmp_for_loop_2__for_iterator);
                    Py_DECREF(tmp_for_loop_2__for_iterator);
                    tmp_for_loop_2__for_iterator = NULL;

                    // Re-raise.
                    exception_type = exception_keeper_type_8;
                    exception_value = exception_keeper_value_8;
                    exception_tb = exception_keeper_tb_8;
                    exception_lineno = exception_keeper_lineno_8;

                    goto frame_exception_exit_1;
                    // End of try:
                    try_end_8:;
                    Py_XDECREF(tmp_for_loop_2__iter_value);
                    tmp_for_loop_2__iter_value = NULL;

                    CHECK_OBJECT((PyObject *)tmp_for_loop_2__for_iterator);
                    Py_DECREF(tmp_for_loop_2__for_iterator);
                    tmp_for_loop_2__for_iterator = NULL;

                    {
                        PyObject *tmp_called_instance_16;
                        PyObject *tmp_call_result_20;
                        PyObject *tmp_args_element_name_46;
                        CHECK_OBJECT(par_self);
                        tmp_called_instance_16 = par_self;
                        CHECK_OBJECT(par_elem);
                        tmp_args_element_name_46 = par_elem;
                        frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 619;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_46};
                            tmp_call_result_20 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_16, const_str_plain_traverseWidgetTree, call_args);
                        }

                        if (tmp_call_result_20 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 619;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        Py_DECREF(tmp_call_result_20);
                    }
                    // Tried code:
                    {
                        PyObject *tmp_assign_source_34;
                        PyObject *tmp_iter_arg_6;
                        PyObject *tmp_called_instance_17;
                        PyObject *tmp_source_name_41;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_41 = par_self;
                        tmp_called_instance_17 = LOOKUP_ATTRIBUTE(tmp_source_name_41, const_str_plain_itemstack);
                        if (tmp_called_instance_17 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 620;
                            type_description_1 = "oooooooooooooooooo";
                            goto try_except_handler_10;
                        }
                        frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 620;
                        tmp_iter_arg_6 = CALL_METHOD_NO_ARGS(tmp_called_instance_17, const_str_plain_pop);
                        Py_DECREF(tmp_called_instance_17);
                        if (tmp_iter_arg_6 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 620;
                            type_description_1 = "oooooooooooooooooo";
                            goto try_except_handler_10;
                        }
                        tmp_assign_source_34 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_6);
                        Py_DECREF(tmp_iter_arg_6);
                        if (tmp_assign_source_34 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 620;
                            type_description_1 = "oooooooooooooooooo";
                            goto try_except_handler_10;
                        }
                        assert(tmp_tuple_unpack_4__source_iter == NULL);
                        tmp_tuple_unpack_4__source_iter = tmp_assign_source_34;
                    }
                    // Tried code:
                    {
                        PyObject *tmp_assign_source_35;
                        PyObject *tmp_unpack_7;
                        CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
                        tmp_unpack_7 = tmp_tuple_unpack_4__source_iter;
                        tmp_assign_source_35 = UNPACK_NEXT(tmp_unpack_7, 0, 2);
                        if (tmp_assign_source_35 == NULL) {
                            if (!ERROR_OCCURRED()) {
                                exception_type = PyExc_StopIteration;
                                Py_INCREF(exception_type);
                                exception_value = NULL;
                                exception_tb = NULL;
                            } else {
                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            }


                            type_description_1 = "oooooooooooooooooo";
                            exception_lineno = 620;
                            goto try_except_handler_11;
                        }
                        assert(tmp_tuple_unpack_4__element_1 == NULL);
                        tmp_tuple_unpack_4__element_1 = tmp_assign_source_35;
                    }
                    {
                        PyObject *tmp_assign_source_36;
                        PyObject *tmp_unpack_8;
                        CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
                        tmp_unpack_8 = tmp_tuple_unpack_4__source_iter;
                        tmp_assign_source_36 = UNPACK_NEXT(tmp_unpack_8, 1, 2);
                        if (tmp_assign_source_36 == NULL) {
                            if (!ERROR_OCCURRED()) {
                                exception_type = PyExc_StopIteration;
                                Py_INCREF(exception_type);
                                exception_value = NULL;
                                exception_tb = NULL;
                            } else {
                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            }


                            type_description_1 = "oooooooooooooooooo";
                            exception_lineno = 620;
                            goto try_except_handler_11;
                        }
                        assert(tmp_tuple_unpack_4__element_2 == NULL);
                        tmp_tuple_unpack_4__element_2 = tmp_assign_source_36;
                    }
                    {
                        PyObject *tmp_iterator_name_4;
                        CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
                        tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter;
                        // Check if iterator has left-over elements.
                        CHECK_OBJECT(tmp_iterator_name_4); assert(HAS_ITERNEXT(tmp_iterator_name_4));

                        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_4)->tp_iternext)(tmp_iterator_name_4);

                        if (likely(tmp_iterator_attempt == NULL))
                        {
                            PyObject *error = GET_ERROR_OCCURRED();

                            if (error != NULL)
                            {
                                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration))
                                {
                                    CLEAR_ERROR_OCCURRED();
                                } else {
                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                                    type_description_1 = "oooooooooooooooooo";
                                    exception_lineno = 620;
                                    goto try_except_handler_11;
                                }
                            }
                        } else {
                            Py_DECREF(tmp_iterator_attempt);

                            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                            PyErr_Format(PyExc_ValueError, "too many values to unpack");
#else
                            PyErr_Format(PyExc_ValueError, "too many values to unpack (expected 2)");
#endif
                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                            type_description_1 = "oooooooooooooooooo";
                            exception_lineno = 620;
                            goto try_except_handler_11;
                        }
                    }
                    goto try_end_9;
                    // Exception handler code:
                    try_except_handler_11:;
                    exception_keeper_type_9 = exception_type;
                    exception_keeper_value_9 = exception_value;
                    exception_keeper_tb_9 = exception_tb;
                    exception_keeper_lineno_9 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_4__source_iter);
                    Py_DECREF(tmp_tuple_unpack_4__source_iter);
                    tmp_tuple_unpack_4__source_iter = NULL;

                    // Re-raise.
                    exception_type = exception_keeper_type_9;
                    exception_value = exception_keeper_value_9;
                    exception_tb = exception_keeper_tb_9;
                    exception_lineno = exception_keeper_lineno_9;

                    goto try_except_handler_10;
                    // End of try:
                    try_end_9:;
                    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_4__source_iter);
                    Py_DECREF(tmp_tuple_unpack_4__source_iter);
                    tmp_tuple_unpack_4__source_iter = NULL;

                    {
                        PyObject *tmp_assign_source_37;
                        CHECK_OBJECT(tmp_tuple_unpack_4__element_1);
                        tmp_assign_source_37 = tmp_tuple_unpack_4__element_1;
                        {
                            PyObject *old = var__;
                            var__ = tmp_assign_source_37;
                            Py_INCREF(var__);
                            Py_XDECREF(old);
                        }

                    }
                    Py_XDECREF(tmp_tuple_unpack_4__element_1);
                    tmp_tuple_unpack_4__element_1 = NULL;

                    {
                        PyObject *tmp_assattr_name_3;
                        PyObject *tmp_assattr_target_3;
                        CHECK_OBJECT(tmp_tuple_unpack_4__element_2);
                        tmp_assattr_name_3 = tmp_tuple_unpack_4__element_2;
                        CHECK_OBJECT(par_self);
                        tmp_assattr_target_3 = par_self;
                        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_item_nr, tmp_assattr_name_3);
                        if (tmp_result == false) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 620;
                            type_description_1 = "oooooooooooooooooo";
                            goto try_except_handler_10;
                        }
                    }
                    goto try_end_10;
                    // Exception handler code:
                    try_except_handler_10:;
                    exception_keeper_type_10 = exception_type;
                    exception_keeper_value_10 = exception_value;
                    exception_keeper_tb_10 = exception_tb;
                    exception_keeper_lineno_10 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    Py_XDECREF(tmp_tuple_unpack_4__element_1);
                    tmp_tuple_unpack_4__element_1 = NULL;

                    Py_XDECREF(tmp_tuple_unpack_4__element_2);
                    tmp_tuple_unpack_4__element_2 = NULL;

                    // Re-raise.
                    exception_type = exception_keeper_type_10;
                    exception_value = exception_keeper_value_10;
                    exception_tb = exception_keeper_tb_10;
                    exception_lineno = exception_keeper_lineno_10;

                    goto frame_exception_exit_1;
                    // End of try:
                    try_end_10:;
                    Py_XDECREF(tmp_tuple_unpack_4__element_2);
                    tmp_tuple_unpack_4__element_2 = NULL;

                    goto branch_end_5;
                    branch_no_5:;
                    {
                        nuitka_bool tmp_condition_result_19;
                        PyObject *tmp_isinstance_inst_4;
                        PyObject *tmp_isinstance_cls_4;
                        PyObject *tmp_source_name_42;
                        PyObject *tmp_mvar_value_5;
                        CHECK_OBJECT(var_w);
                        tmp_isinstance_inst_4 = var_w;
                        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                        if (unlikely(tmp_mvar_value_5 == NULL)) {
                            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                        }

                        if (tmp_mvar_value_5 == NULL) {

                            exception_type = PyExc_NameError;
                            Py_INCREF(exception_type);
                            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                            CHAIN_EXCEPTION(exception_value);

                            exception_lineno = 622;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_42 = tmp_mvar_value_5;
                        tmp_isinstance_cls_4 = LOOKUP_ATTRIBUTE(tmp_source_name_42, const_str_plain_QTableWidget);
                        if (tmp_isinstance_cls_4 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 622;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_4, tmp_isinstance_cls_4);
                        Py_DECREF(tmp_isinstance_cls_4);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 622;
                            type_description_1 = "oooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_19 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if (tmp_condition_result_19 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_19;
                        } else {
                            goto branch_no_19;
                        }
                        branch_yes_19:;
                        {
                            PyObject *tmp_assign_source_38;
                            PyObject *tmp_int_arg_1;
                            PyObject *tmp_subscribed_name_6;
                            PyObject *tmp_source_name_43;
                            PyObject *tmp_subscript_name_6;
                            CHECK_OBJECT(par_elem);
                            tmp_source_name_43 = par_elem;
                            tmp_subscribed_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_43, const_str_plain_attrib);
                            if (tmp_subscribed_name_6 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 623;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_subscript_name_6 = const_str_plain_row;
                            tmp_int_arg_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_6, tmp_subscript_name_6);
                            Py_DECREF(tmp_subscribed_name_6);
                            if (tmp_int_arg_1 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 623;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_assign_source_38 = PyNumber_Int(tmp_int_arg_1);
                            Py_DECREF(tmp_int_arg_1);
                            if (tmp_assign_source_38 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 623;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            assert(var_row == NULL);
                            var_row = tmp_assign_source_38;
                        }
                        {
                            PyObject *tmp_assign_source_39;
                            PyObject *tmp_int_arg_2;
                            PyObject *tmp_subscribed_name_7;
                            PyObject *tmp_source_name_44;
                            PyObject *tmp_subscript_name_7;
                            CHECK_OBJECT(par_elem);
                            tmp_source_name_44 = par_elem;
                            tmp_subscribed_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_44, const_str_plain_attrib);
                            if (tmp_subscribed_name_7 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 624;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_subscript_name_7 = const_str_plain_column;
                            tmp_int_arg_2 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_7, tmp_subscript_name_7);
                            Py_DECREF(tmp_subscribed_name_7);
                            if (tmp_int_arg_2 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 624;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_assign_source_39 = PyNumber_Int(tmp_int_arg_2);
                            Py_DECREF(tmp_int_arg_2);
                            if (tmp_assign_source_39 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 624;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            assert(var_col == NULL);
                            var_col = tmp_assign_source_39;
                        }
                        {
                            PyObject *tmp_called_instance_18;
                            PyObject *tmp_call_result_21;
                            PyObject *tmp_args_element_name_47;
                            CHECK_OBJECT(par_self);
                            tmp_called_instance_18 = par_self;
                            CHECK_OBJECT(var_w);
                            tmp_args_element_name_47 = var_w;
                            frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 626;
                            {
                                PyObject *call_args[] = {tmp_args_element_name_47};
                                tmp_call_result_21 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_18, const_str_plain_disableSorting, call_args);
                            }

                            if (tmp_call_result_21 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 626;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            Py_DECREF(tmp_call_result_21);
                        }
                        {
                            PyObject *tmp_assign_source_40;
                            PyObject *tmp_called_name_15;
                            PyObject *tmp_source_name_45;
                            PyObject *tmp_args_element_name_48;
                            PyObject *tmp_args_element_name_49;
                            PyObject *tmp_args_element_name_50;
                            PyObject *tmp_source_name_46;
                            PyObject *tmp_args_element_name_51;
                            PyObject *tmp_args_element_name_52;
                            CHECK_OBJECT(par_self);
                            tmp_source_name_45 = par_self;
                            tmp_called_name_15 = LOOKUP_ATTRIBUTE(tmp_source_name_45, const_str_plain_createWidgetItem);
                            if (tmp_called_name_15 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 627;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_args_element_name_48 = const_str_plain_QTableWidgetItem;
                            CHECK_OBJECT(par_elem);
                            tmp_args_element_name_49 = par_elem;
                            CHECK_OBJECT(var_w);
                            tmp_source_name_46 = var_w;
                            tmp_args_element_name_50 = LOOKUP_ATTRIBUTE(tmp_source_name_46, const_str_plain_item);
                            if (tmp_args_element_name_50 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                Py_DECREF(tmp_called_name_15);

                                exception_lineno = 627;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT(var_row);
                            tmp_args_element_name_51 = var_row;
                            CHECK_OBJECT(var_col);
                            tmp_args_element_name_52 = var_col;
                            frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 627;
                            {
                                PyObject *call_args[] = {tmp_args_element_name_48, tmp_args_element_name_49, tmp_args_element_name_50, tmp_args_element_name_51, tmp_args_element_name_52};
                                tmp_assign_source_40 = CALL_FUNCTION_WITH_ARGS5(tmp_called_name_15, call_args);
                            }

                            Py_DECREF(tmp_called_name_15);
                            Py_DECREF(tmp_args_element_name_50);
                            if (tmp_assign_source_40 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 627;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            assert(var_item == NULL);
                            var_item = tmp_assign_source_40;
                        }
                        {
                            PyObject *tmp_called_instance_19;
                            PyObject *tmp_call_result_22;
                            PyObject *tmp_args_element_name_53;
                            PyObject *tmp_args_element_name_54;
                            PyObject *tmp_args_element_name_55;
                            CHECK_OBJECT(var_w);
                            tmp_called_instance_19 = var_w;
                            CHECK_OBJECT(var_row);
                            tmp_args_element_name_53 = var_row;
                            CHECK_OBJECT(var_col);
                            tmp_args_element_name_54 = var_col;
                            CHECK_OBJECT(var_item);
                            tmp_args_element_name_55 = var_item;
                            frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame.f_lineno = 629;
                            {
                                PyObject *call_args[] = {tmp_args_element_name_53, tmp_args_element_name_54, tmp_args_element_name_55};
                                tmp_call_result_22 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_19, const_str_plain_setItem, call_args);
                            }

                            if (tmp_call_result_22 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 629;
                                type_description_1 = "oooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            Py_DECREF(tmp_call_result_22);
                        }
                        branch_no_19:;
                    }
                    branch_end_5:;
                }
                branch_end_4:;
            }
            branch_end_2:;
        }
        {
            PyObject *tmp_assign_source_41;
            PyObject *tmp_source_name_47;
            CHECK_OBJECT(par_self);
            tmp_source_name_47 = par_self;
            tmp_assign_source_41 = LOOKUP_ATTRIBUTE(tmp_source_name_47, const_str_plain_item_nr);
            if (tmp_assign_source_41 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 631;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_inplace_assign_attr_1__start == NULL);
            tmp_inplace_assign_attr_1__start = tmp_assign_source_41;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_42;
            PyObject *tmp_left_name_3;
            PyObject *tmp_right_name_3;
            CHECK_OBJECT(tmp_inplace_assign_attr_1__start);
            tmp_left_name_3 = tmp_inplace_assign_attr_1__start;
            tmp_right_name_3 = const_int_pos_1;
            tmp_assign_source_42 = BINARY_OPERATION(PyNumber_InPlaceAdd, tmp_left_name_3, tmp_right_name_3);
            if (tmp_assign_source_42 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 631;
                type_description_1 = "oooooooooooooooooo";
                goto try_except_handler_12;
            }
            assert(tmp_inplace_assign_attr_1__end == NULL);
            tmp_inplace_assign_attr_1__end = tmp_assign_source_42;
        }
        // Tried code:
        {
            PyObject *tmp_assattr_name_4;
            PyObject *tmp_assattr_target_4;
            CHECK_OBJECT(tmp_inplace_assign_attr_1__end);
            tmp_assattr_name_4 = tmp_inplace_assign_attr_1__end;
            CHECK_OBJECT(par_self);
            tmp_assattr_target_4 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, const_str_plain_item_nr, tmp_assattr_name_4);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 631;
                type_description_1 = "oooooooooooooooooo";
                goto try_except_handler_13;
            }
        }
        goto try_end_11;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_1__end);
        Py_DECREF(tmp_inplace_assign_attr_1__end);
        tmp_inplace_assign_attr_1__end = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto try_except_handler_12;
        // End of try:
        try_end_11:;
        goto try_end_12;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_1__start);
        Py_DECREF(tmp_inplace_assign_attr_1__start);
        tmp_inplace_assign_attr_1__start = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto frame_exception_exit_1;
        // End of try:
        try_end_12:;
        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_1__end);
        Py_DECREF(tmp_inplace_assign_attr_1__end);
        tmp_inplace_assign_attr_1__end = NULL;

        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_1__start);
        Py_DECREF(tmp_inplace_assign_attr_1__start);
        tmp_inplace_assign_attr_1__start = NULL;

        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f58e1cffaceb1c421c5a7093c7559ff1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f58e1cffaceb1c421c5a7093c7559ff1);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f58e1cffaceb1c421c5a7093c7559ff1, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_f58e1cffaceb1c421c5a7093c7559ff1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f58e1cffaceb1c421c5a7093c7559ff1, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f58e1cffaceb1c421c5a7093c7559ff1,
        type_description_1,
        par_self,
        par_elem,
        var_w,
        var_text,
        var_icon,
        var_item,
        var_parent,
        var__,
        var_nr_in_root,
        var_titm,
        var_child,
        var_nr_in_parent,
        var_column,
        var_prop,
        var_c_prop,
        var_c_prop_name,
        var_row,
        var_col
    );


    // Release cached frame.
    if (frame_f58e1cffaceb1c421c5a7093c7559ff1 == cache_frame_f58e1cffaceb1c421c5a7093c7559ff1) {
        Py_DECREF(frame_f58e1cffaceb1c421c5a7093c7559ff1);
    }
    cache_frame_f58e1cffaceb1c421c5a7093c7559ff1 = NULL;

    assertFrameObject(frame_f58e1cffaceb1c421c5a7093c7559ff1);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_22_handleItem);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_w);
    var_w = NULL;

    Py_XDECREF(var_text);
    var_text = NULL;

    Py_XDECREF(var_icon);
    var_icon = NULL;

    Py_XDECREF(var_item);
    var_item = NULL;

    Py_XDECREF(var_parent);
    var_parent = NULL;

    Py_XDECREF(var__);
    var__ = NULL;

    Py_XDECREF(var_nr_in_root);
    var_nr_in_root = NULL;

    Py_XDECREF(var_titm);
    var_titm = NULL;

    Py_XDECREF(var_child);
    var_child = NULL;

    Py_XDECREF(var_nr_in_parent);
    var_nr_in_parent = NULL;

    Py_XDECREF(var_column);
    var_column = NULL;

    Py_XDECREF(var_prop);
    var_prop = NULL;

    Py_XDECREF(var_c_prop);
    var_c_prop = NULL;

    Py_XDECREF(var_c_prop_name);
    var_c_prop_name = NULL;

    Py_XDECREF(var_row);
    var_row = NULL;

    Py_XDECREF(var_col);
    var_col = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_w);
    var_w = NULL;

    Py_XDECREF(var_text);
    var_text = NULL;

    Py_XDECREF(var_icon);
    var_icon = NULL;

    Py_XDECREF(var_item);
    var_item = NULL;

    Py_XDECREF(var_parent);
    var_parent = NULL;

    Py_XDECREF(var__);
    var__ = NULL;

    Py_XDECREF(var_nr_in_root);
    var_nr_in_root = NULL;

    Py_XDECREF(var_titm);
    var_titm = NULL;

    Py_XDECREF(var_child);
    var_child = NULL;

    Py_XDECREF(var_nr_in_parent);
    var_nr_in_parent = NULL;

    Py_XDECREF(var_column);
    var_column = NULL;

    Py_XDECREF(var_prop);
    var_prop = NULL;

    Py_XDECREF(var_c_prop);
    var_c_prop = NULL;

    Py_XDECREF(var_c_prop_name);
    var_c_prop_name = NULL;

    Py_XDECREF(var_row);
    var_row = NULL;

    Py_XDECREF(var_col);
    var_col = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_22_handleItem);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_23_addAction(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    struct Nuitka_FrameObject *frame_20f113b58c5f20530054cc284c15f53d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_20f113b58c5f20530054cc284c15f53d = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_20f113b58c5f20530054cc284c15f53d, codeobj_20f113b58c5f20530054cc284c15f53d, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *));
    frame_20f113b58c5f20530054cc284c15f53d = cache_frame_20f113b58c5f20530054cc284c15f53d;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_20f113b58c5f20530054cc284c15f53d);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_20f113b58c5f20530054cc284c15f53d) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_5;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_actions);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 634;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_append);
        Py_DECREF(tmp_source_name_1);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 634;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_4 = par_self;
        tmp_source_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_stack);
        if (tmp_source_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 634;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_topwidget);
        Py_DECREF(tmp_source_name_3);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 634;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_args_element_name_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_elem);
        tmp_source_name_5 = par_elem;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_attrib);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_1);

            exception_lineno = 634;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_str_plain_name;
        tmp_tuple_element_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_1);

            exception_lineno = 634;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_args_element_name_1, 1, tmp_tuple_element_1);
        frame_20f113b58c5f20530054cc284c15f53d->m_frame.f_lineno = 634;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 634;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_20f113b58c5f20530054cc284c15f53d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_20f113b58c5f20530054cc284c15f53d);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_20f113b58c5f20530054cc284c15f53d, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_20f113b58c5f20530054cc284c15f53d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_20f113b58c5f20530054cc284c15f53d, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_20f113b58c5f20530054cc284c15f53d,
        type_description_1,
        par_self,
        par_elem
    );


    // Release cached frame.
    if (frame_20f113b58c5f20530054cc284c15f53d == cache_frame_20f113b58c5f20530054cc284c15f53d) {
        Py_DECREF(frame_20f113b58c5f20530054cc284c15f53d);
    }
    cache_frame_20f113b58c5f20530054cc284c15f53d = NULL;

    assertFrameObject(frame_20f113b58c5f20530054cc284c15f53d);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_23_addAction);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_24_any_i18n(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[0];
    PyObject *var_a = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_fceaa942bd64bf26eecf6afefe924fec;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_fceaa942bd64bf26eecf6afefe924fec = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_fceaa942bd64bf26eecf6afefe924fec, codeobj_fceaa942bd64bf26eecf6afefe924fec, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *));
    frame_fceaa942bd64bf26eecf6afefe924fec = cache_frame_fceaa942bd64bf26eecf6afefe924fec;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_fceaa942bd64bf26eecf6afefe924fec);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_fceaa942bd64bf26eecf6afefe924fec) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(par_args);
        tmp_iter_arg_1 = par_args;
        tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 640;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_2 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oo";
                exception_lineno = 640;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_a;
            var_a = tmp_assign_source_3;
            Py_INCREF(var_a);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_a);
        tmp_compexpr_left_1 = var_a;
        tmp_compexpr_right_1 = Py_None;
        tmp_and_left_value_1 = (tmp_compexpr_left_1 != tmp_compexpr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_a);
        tmp_isinstance_inst_1 = var_a;
        tmp_isinstance_cls_1 = (PyObject *)&PyUnicode_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        tmp_operand_name_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        tmp_and_right_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_True;
        Py_INCREF(tmp_return_value);
        goto try_return_handler_2;
        branch_no_1:;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 640;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT((PyObject *)tmp_for_loop_1__iter_value);
    Py_DECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fceaa942bd64bf26eecf6afefe924fec);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_fceaa942bd64bf26eecf6afefe924fec);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fceaa942bd64bf26eecf6afefe924fec);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_fceaa942bd64bf26eecf6afefe924fec, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_fceaa942bd64bf26eecf6afefe924fec->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_fceaa942bd64bf26eecf6afefe924fec, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fceaa942bd64bf26eecf6afefe924fec,
        type_description_1,
        par_args,
        var_a
    );


    // Release cached frame.
    if (frame_fceaa942bd64bf26eecf6afefe924fec == cache_frame_fceaa942bd64bf26eecf6afefe924fec) {
        Py_DECREF(frame_fceaa942bd64bf26eecf6afefe924fec);
    }
    cache_frame_fceaa942bd64bf26eecf6afefe924fec = NULL;

    assertFrameObject(frame_fceaa942bd64bf26eecf6afefe924fec);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_False;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_24_any_i18n);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_a);
    var_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_a);
    var_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_24_any_i18n);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_25_createWidgetItem(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_item_type = python_pars[1];
    PyObject *par_elem = python_pars[2];
    PyObject *par_getter = python_pars[3];
    PyObject *par_getter_args = python_pars[4];
    PyObject *var_item = NULL;
    PyObject *var_props = NULL;
    PyObject *var_text = NULL;
    PyObject *var_status_tip = NULL;
    PyObject *var_tool_tip = NULL;
    PyObject *var_whats_this = NULL;
    PyObject *var_text_alignment = NULL;
    PyObject *var_font = NULL;
    PyObject *var_icon = NULL;
    PyObject *var_background = NULL;
    PyObject *var_foreground = NULL;
    PyObject *var_flags = NULL;
    PyObject *var_check_state = NULL;
    struct Nuitka_FrameObject *frame_ecc96e93ac4bafafc8f5e92ac6000e4b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_ecc96e93ac4bafafc8f5e92ac6000e4b = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_ecc96e93ac4bafafc8f5e92ac6000e4b, codeobj_ecc96e93ac4bafafc8f5e92ac6000e4b, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_ecc96e93ac4bafafc8f5e92ac6000e4b = cache_frame_ecc96e93ac4bafafc8f5e92ac6000e4b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ecc96e93ac4bafafc8f5e92ac6000e4b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ecc96e93ac4bafafc8f5e92ac6000e4b) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_factory);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_item_type);
        tmp_args_element_name_1 = par_item_type;
        tmp_args_element_name_2 = const_str_plain_item;
        tmp_args_element_name_3 = const_tuple_empty;
        tmp_args_element_name_4 = Py_False;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 649;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_1, const_str_plain_createQObject, call_args);
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_item == NULL);
        var_item = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_wprops);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 650;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_props == NULL);
        var_props = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        CHECK_OBJECT(var_props);
        tmp_called_instance_2 = var_props;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_5 = par_elem;
        tmp_args_element_name_6 = const_str_plain_text;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 655;
        {
            PyObject *call_args[] = {tmp_args_element_name_5, tmp_args_element_name_6};
            tmp_assign_source_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_2, const_str_plain_getProperty, call_args);
        }

        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 655;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_text == NULL);
        var_text = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        CHECK_OBJECT(var_props);
        tmp_called_instance_3 = var_props;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_7 = par_elem;
        tmp_args_element_name_8 = const_str_plain_statusTip;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 656;
        {
            PyObject *call_args[] = {tmp_args_element_name_7, tmp_args_element_name_8};
            tmp_assign_source_4 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_3, const_str_plain_getProperty, call_args);
        }

        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 656;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_status_tip == NULL);
        var_status_tip = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_args_element_name_10;
        CHECK_OBJECT(var_props);
        tmp_called_instance_4 = var_props;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_9 = par_elem;
        tmp_args_element_name_10 = const_str_plain_toolTip;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 657;
        {
            PyObject *call_args[] = {tmp_args_element_name_9, tmp_args_element_name_10};
            tmp_assign_source_5 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_4, const_str_plain_getProperty, call_args);
        }

        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 657;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_tool_tip == NULL);
        var_tool_tip = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_args_element_name_12;
        CHECK_OBJECT(var_props);
        tmp_called_instance_5 = var_props;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_11 = par_elem;
        tmp_args_element_name_12 = const_str_plain_whatsThis;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 658;
        {
            PyObject *call_args[] = {tmp_args_element_name_11, tmp_args_element_name_12};
            tmp_assign_source_6 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_5, const_str_plain_getProperty, call_args);
        }

        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 658;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_whats_this == NULL);
        var_whats_this = tmp_assign_source_6;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_args_element_name_14;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_args_element_name_16;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_6 = par_self;
        CHECK_OBJECT(var_text);
        tmp_args_element_name_13 = var_text;
        CHECK_OBJECT(var_status_tip);
        tmp_args_element_name_14 = var_status_tip;
        CHECK_OBJECT(var_tool_tip);
        tmp_args_element_name_15 = var_tool_tip;
        CHECK_OBJECT(var_whats_this);
        tmp_args_element_name_16 = var_whats_this;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 660;
        {
            PyObject *call_args[] = {tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15, tmp_args_element_name_16};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_6, const_str_plain_any_i18n, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 660;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 660;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_7;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_17;
            PyObject *tmp_args_element_name_18;
            PyObject *tmp_args_element_name_19;
            CHECK_OBJECT(par_self);
            tmp_source_name_3 = par_self;
            tmp_called_instance_7 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_factory);
            if (tmp_called_instance_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 661;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_17 = const_str_plain_item;
            CHECK_OBJECT(par_getter);
            tmp_args_element_name_18 = par_getter;
            CHECK_OBJECT(par_getter_args);
            tmp_args_element_name_19 = par_getter_args;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 661;
            {
                PyObject *call_args[] = {tmp_args_element_name_17, tmp_args_element_name_18, tmp_args_element_name_19};
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_7, const_str_plain_invoke, call_args);
            }

            Py_DECREF(tmp_called_instance_7);
            if (tmp_call_result_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 661;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_2);
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_text);
        tmp_truth_name_2 = CHECK_IF_TRUE(var_text);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 663;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_instance_8;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_20;
            CHECK_OBJECT(var_item);
            tmp_called_instance_8 = var_item;
            CHECK_OBJECT(var_text);
            tmp_args_element_name_20 = var_text;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 664;
            {
                PyObject *call_args[] = {tmp_args_element_name_20};
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_setText, call_args);
            }

            if (tmp_call_result_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 664;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_3);
        }
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_3;
        CHECK_OBJECT(var_status_tip);
        tmp_truth_name_3 = CHECK_IF_TRUE(var_status_tip);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 666;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_instance_9;
            PyObject *tmp_call_result_4;
            PyObject *tmp_args_element_name_21;
            CHECK_OBJECT(var_item);
            tmp_called_instance_9 = var_item;
            CHECK_OBJECT(var_status_tip);
            tmp_args_element_name_21 = var_status_tip;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 667;
            {
                PyObject *call_args[] = {tmp_args_element_name_21};
                tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_setStatusTip, call_args);
            }

            if (tmp_call_result_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 667;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_4);
        }
        branch_no_3:;
    }
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_truth_name_4;
        CHECK_OBJECT(var_tool_tip);
        tmp_truth_name_4 = CHECK_IF_TRUE(var_tool_tip);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 669;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_called_instance_10;
            PyObject *tmp_call_result_5;
            PyObject *tmp_args_element_name_22;
            CHECK_OBJECT(var_item);
            tmp_called_instance_10 = var_item;
            CHECK_OBJECT(var_tool_tip);
            tmp_args_element_name_22 = var_tool_tip;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 670;
            {
                PyObject *call_args[] = {tmp_args_element_name_22};
                tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_10, const_str_plain_setToolTip, call_args);
            }

            if (tmp_call_result_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 670;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_5);
        }
        branch_no_4:;
    }
    {
        nuitka_bool tmp_condition_result_5;
        int tmp_truth_name_5;
        CHECK_OBJECT(var_whats_this);
        tmp_truth_name_5 = CHECK_IF_TRUE(var_whats_this);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 672;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_instance_11;
            PyObject *tmp_call_result_6;
            PyObject *tmp_args_element_name_23;
            CHECK_OBJECT(var_item);
            tmp_called_instance_11 = var_item;
            CHECK_OBJECT(var_whats_this);
            tmp_args_element_name_23 = var_whats_this;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 673;
            {
                PyObject *call_args[] = {tmp_args_element_name_23};
                tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_11, const_str_plain_setWhatsThis, call_args);
            }

            if (tmp_call_result_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 673;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_6);
        }
        branch_no_5:;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_instance_12;
        PyObject *tmp_args_element_name_24;
        PyObject *tmp_args_element_name_25;
        CHECK_OBJECT(var_props);
        tmp_called_instance_12 = var_props;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_24 = par_elem;
        tmp_args_element_name_25 = const_str_plain_textAlignment;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 675;
        {
            PyObject *call_args[] = {tmp_args_element_name_24, tmp_args_element_name_25};
            tmp_assign_source_7 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_12, const_str_plain_getProperty, call_args);
        }

        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 675;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_text_alignment == NULL);
        var_text_alignment = tmp_assign_source_7;
    }
    {
        nuitka_bool tmp_condition_result_6;
        int tmp_truth_name_6;
        CHECK_OBJECT(var_text_alignment);
        tmp_truth_name_6 = CHECK_IF_TRUE(var_text_alignment);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 676;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_called_instance_13;
            PyObject *tmp_call_result_7;
            PyObject *tmp_args_element_name_26;
            CHECK_OBJECT(var_item);
            tmp_called_instance_13 = var_item;
            CHECK_OBJECT(var_text_alignment);
            tmp_args_element_name_26 = var_text_alignment;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 677;
            {
                PyObject *call_args[] = {tmp_args_element_name_26};
                tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_13, const_str_plain_setTextAlignment, call_args);
            }

            if (tmp_call_result_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 677;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_7);
        }
        branch_no_6:;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_instance_14;
        PyObject *tmp_args_element_name_27;
        PyObject *tmp_args_element_name_28;
        CHECK_OBJECT(var_props);
        tmp_called_instance_14 = var_props;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_27 = par_elem;
        tmp_args_element_name_28 = const_str_plain_font;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 679;
        {
            PyObject *call_args[] = {tmp_args_element_name_27, tmp_args_element_name_28};
            tmp_assign_source_8 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_14, const_str_plain_getProperty, call_args);
        }

        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 679;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_font == NULL);
        var_font = tmp_assign_source_8;
    }
    {
        nuitka_bool tmp_condition_result_7;
        int tmp_truth_name_7;
        CHECK_OBJECT(var_font);
        tmp_truth_name_7 = CHECK_IF_TRUE(var_font);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 680;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_called_instance_15;
            PyObject *tmp_call_result_8;
            PyObject *tmp_args_element_name_29;
            CHECK_OBJECT(var_item);
            tmp_called_instance_15 = var_item;
            CHECK_OBJECT(var_font);
            tmp_args_element_name_29 = var_font;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 681;
            {
                PyObject *call_args[] = {tmp_args_element_name_29};
                tmp_call_result_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_15, const_str_plain_setFont, call_args);
            }

            if (tmp_call_result_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 681;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_8);
        }
        branch_no_7:;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_instance_16;
        PyObject *tmp_args_element_name_30;
        PyObject *tmp_args_element_name_31;
        CHECK_OBJECT(var_props);
        tmp_called_instance_16 = var_props;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_30 = par_elem;
        tmp_args_element_name_31 = const_str_plain_icon;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 683;
        {
            PyObject *call_args[] = {tmp_args_element_name_30, tmp_args_element_name_31};
            tmp_assign_source_9 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_16, const_str_plain_getProperty, call_args);
        }

        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 683;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_icon == NULL);
        var_icon = tmp_assign_source_9;
    }
    {
        nuitka_bool tmp_condition_result_8;
        int tmp_truth_name_8;
        CHECK_OBJECT(var_icon);
        tmp_truth_name_8 = CHECK_IF_TRUE(var_icon);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 684;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = tmp_truth_name_8 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_called_instance_17;
            PyObject *tmp_call_result_9;
            PyObject *tmp_args_element_name_32;
            CHECK_OBJECT(var_item);
            tmp_called_instance_17 = var_item;
            CHECK_OBJECT(var_icon);
            tmp_args_element_name_32 = var_icon;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 685;
            {
                PyObject *call_args[] = {tmp_args_element_name_32};
                tmp_call_result_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_17, const_str_plain_setIcon, call_args);
            }

            if (tmp_call_result_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 685;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_9);
        }
        branch_no_8:;
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_instance_18;
        PyObject *tmp_args_element_name_33;
        PyObject *tmp_args_element_name_34;
        CHECK_OBJECT(var_props);
        tmp_called_instance_18 = var_props;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_33 = par_elem;
        tmp_args_element_name_34 = const_str_plain_background;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 687;
        {
            PyObject *call_args[] = {tmp_args_element_name_33, tmp_args_element_name_34};
            tmp_assign_source_10 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_18, const_str_plain_getProperty, call_args);
        }

        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 687;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_background == NULL);
        var_background = tmp_assign_source_10;
    }
    {
        nuitka_bool tmp_condition_result_9;
        int tmp_truth_name_9;
        CHECK_OBJECT(var_background);
        tmp_truth_name_9 = CHECK_IF_TRUE(var_background);
        if (tmp_truth_name_9 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 688;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = tmp_truth_name_9 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            PyObject *tmp_called_instance_19;
            PyObject *tmp_call_result_10;
            PyObject *tmp_args_element_name_35;
            CHECK_OBJECT(var_item);
            tmp_called_instance_19 = var_item;
            CHECK_OBJECT(var_background);
            tmp_args_element_name_35 = var_background;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 689;
            {
                PyObject *call_args[] = {tmp_args_element_name_35};
                tmp_call_result_10 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_19, const_str_plain_setBackground, call_args);
            }

            if (tmp_call_result_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 689;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_10);
        }
        branch_no_9:;
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_instance_20;
        PyObject *tmp_args_element_name_36;
        PyObject *tmp_args_element_name_37;
        CHECK_OBJECT(var_props);
        tmp_called_instance_20 = var_props;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_36 = par_elem;
        tmp_args_element_name_37 = const_str_plain_foreground;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 691;
        {
            PyObject *call_args[] = {tmp_args_element_name_36, tmp_args_element_name_37};
            tmp_assign_source_11 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_20, const_str_plain_getProperty, call_args);
        }

        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 691;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_foreground == NULL);
        var_foreground = tmp_assign_source_11;
    }
    {
        nuitka_bool tmp_condition_result_10;
        int tmp_truth_name_10;
        CHECK_OBJECT(var_foreground);
        tmp_truth_name_10 = CHECK_IF_TRUE(var_foreground);
        if (tmp_truth_name_10 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 692;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_10 = tmp_truth_name_10 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_called_instance_21;
            PyObject *tmp_call_result_11;
            PyObject *tmp_args_element_name_38;
            CHECK_OBJECT(var_item);
            tmp_called_instance_21 = var_item;
            CHECK_OBJECT(var_foreground);
            tmp_args_element_name_38 = var_foreground;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 693;
            {
                PyObject *call_args[] = {tmp_args_element_name_38};
                tmp_call_result_11 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_21, const_str_plain_setForeground, call_args);
            }

            if (tmp_call_result_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 693;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_11);
        }
        branch_no_10:;
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_instance_22;
        PyObject *tmp_args_element_name_39;
        PyObject *tmp_args_element_name_40;
        CHECK_OBJECT(var_props);
        tmp_called_instance_22 = var_props;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_39 = par_elem;
        tmp_args_element_name_40 = const_str_plain_flags;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 695;
        {
            PyObject *call_args[] = {tmp_args_element_name_39, tmp_args_element_name_40};
            tmp_assign_source_12 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_22, const_str_plain_getProperty, call_args);
        }

        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 695;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_flags == NULL);
        var_flags = tmp_assign_source_12;
    }
    {
        nuitka_bool tmp_condition_result_11;
        int tmp_truth_name_11;
        CHECK_OBJECT(var_flags);
        tmp_truth_name_11 = CHECK_IF_TRUE(var_flags);
        if (tmp_truth_name_11 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 696;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_11 = tmp_truth_name_11 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_called_instance_23;
            PyObject *tmp_call_result_12;
            PyObject *tmp_args_element_name_41;
            CHECK_OBJECT(var_item);
            tmp_called_instance_23 = var_item;
            CHECK_OBJECT(var_flags);
            tmp_args_element_name_41 = var_flags;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 697;
            {
                PyObject *call_args[] = {tmp_args_element_name_41};
                tmp_call_result_12 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_23, const_str_plain_setFlags, call_args);
            }

            if (tmp_call_result_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 697;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_12);
        }
        branch_no_11:;
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_called_instance_24;
        PyObject *tmp_args_element_name_42;
        PyObject *tmp_args_element_name_43;
        CHECK_OBJECT(var_props);
        tmp_called_instance_24 = var_props;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_42 = par_elem;
        tmp_args_element_name_43 = const_str_plain_checkState;
        frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 699;
        {
            PyObject *call_args[] = {tmp_args_element_name_42, tmp_args_element_name_43};
            tmp_assign_source_13 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_24, const_str_plain_getProperty, call_args);
        }

        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 699;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_check_state == NULL);
        var_check_state = tmp_assign_source_13;
    }
    {
        nuitka_bool tmp_condition_result_12;
        int tmp_truth_name_12;
        CHECK_OBJECT(var_check_state);
        tmp_truth_name_12 = CHECK_IF_TRUE(var_check_state);
        if (tmp_truth_name_12 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 700;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_12 = tmp_truth_name_12 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
            goto branch_yes_12;
        } else {
            goto branch_no_12;
        }
        branch_yes_12:;
        {
            PyObject *tmp_called_instance_25;
            PyObject *tmp_call_result_13;
            PyObject *tmp_args_element_name_44;
            CHECK_OBJECT(var_item);
            tmp_called_instance_25 = var_item;
            CHECK_OBJECT(var_check_state);
            tmp_args_element_name_44 = var_check_state;
            frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame.f_lineno = 701;
            {
                PyObject *call_args[] = {tmp_args_element_name_44};
                tmp_call_result_13 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_25, const_str_plain_setCheckState, call_args);
            }

            if (tmp_call_result_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 701;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_13);
        }
        branch_no_12:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ecc96e93ac4bafafc8f5e92ac6000e4b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ecc96e93ac4bafafc8f5e92ac6000e4b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ecc96e93ac4bafafc8f5e92ac6000e4b, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_ecc96e93ac4bafafc8f5e92ac6000e4b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ecc96e93ac4bafafc8f5e92ac6000e4b, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ecc96e93ac4bafafc8f5e92ac6000e4b,
        type_description_1,
        par_self,
        par_item_type,
        par_elem,
        par_getter,
        par_getter_args,
        var_item,
        var_props,
        var_text,
        var_status_tip,
        var_tool_tip,
        var_whats_this,
        var_text_alignment,
        var_font,
        var_icon,
        var_background,
        var_foreground,
        var_flags,
        var_check_state
    );


    // Release cached frame.
    if (frame_ecc96e93ac4bafafc8f5e92ac6000e4b == cache_frame_ecc96e93ac4bafafc8f5e92ac6000e4b) {
        Py_DECREF(frame_ecc96e93ac4bafafc8f5e92ac6000e4b);
    }
    cache_frame_ecc96e93ac4bafafc8f5e92ac6000e4b = NULL;

    assertFrameObject(frame_ecc96e93ac4bafafc8f5e92ac6000e4b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_item);
    tmp_return_value = var_item;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_25_createWidgetItem);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_item);
    Py_DECREF(var_item);
    var_item = NULL;

    CHECK_OBJECT((PyObject *)var_props);
    Py_DECREF(var_props);
    var_props = NULL;

    CHECK_OBJECT((PyObject *)var_text);
    Py_DECREF(var_text);
    var_text = NULL;

    CHECK_OBJECT((PyObject *)var_status_tip);
    Py_DECREF(var_status_tip);
    var_status_tip = NULL;

    CHECK_OBJECT((PyObject *)var_tool_tip);
    Py_DECREF(var_tool_tip);
    var_tool_tip = NULL;

    CHECK_OBJECT((PyObject *)var_whats_this);
    Py_DECREF(var_whats_this);
    var_whats_this = NULL;

    CHECK_OBJECT((PyObject *)var_text_alignment);
    Py_DECREF(var_text_alignment);
    var_text_alignment = NULL;

    CHECK_OBJECT((PyObject *)var_font);
    Py_DECREF(var_font);
    var_font = NULL;

    CHECK_OBJECT((PyObject *)var_icon);
    Py_DECREF(var_icon);
    var_icon = NULL;

    CHECK_OBJECT((PyObject *)var_background);
    Py_DECREF(var_background);
    var_background = NULL;

    CHECK_OBJECT((PyObject *)var_foreground);
    Py_DECREF(var_foreground);
    var_foreground = NULL;

    CHECK_OBJECT((PyObject *)var_flags);
    Py_DECREF(var_flags);
    var_flags = NULL;

    CHECK_OBJECT((PyObject *)var_check_state);
    Py_DECREF(var_check_state);
    var_check_state = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_item);
    var_item = NULL;

    Py_XDECREF(var_props);
    var_props = NULL;

    Py_XDECREF(var_text);
    var_text = NULL;

    Py_XDECREF(var_status_tip);
    var_status_tip = NULL;

    Py_XDECREF(var_tool_tip);
    var_tool_tip = NULL;

    Py_XDECREF(var_whats_this);
    var_whats_this = NULL;

    Py_XDECREF(var_text_alignment);
    var_text_alignment = NULL;

    Py_XDECREF(var_font);
    var_font = NULL;

    Py_XDECREF(var_icon);
    var_icon = NULL;

    Py_XDECREF(var_background);
    var_background = NULL;

    Py_XDECREF(var_foreground);
    var_foreground = NULL;

    Py_XDECREF(var_flags);
    var_flags = NULL;

    Py_XDECREF(var_check_state);
    var_check_state = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_25_createWidgetItem);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_item_type);
    Py_DECREF(par_item_type);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    CHECK_OBJECT(par_getter);
    Py_DECREF(par_getter);
    CHECK_OBJECT(par_getter_args);
    Py_DECREF(par_getter_args);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_item_type);
    Py_DECREF(par_item_type);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);
    CHECK_OBJECT(par_getter);
    Py_DECREF(par_getter);
    CHECK_OBJECT(par_getter_args);
    Py_DECREF(par_getter_args);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_26_addHeader(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_w = NULL;
    PyObject *var_props = NULL;
    PyObject *var_col = NULL;
    PyObject *var_text = NULL;
    PyObject *var_status_tip = NULL;
    PyObject *var_tool_tip = NULL;
    PyObject *var_whats_this = NULL;
    PyObject *var_text_alignment = NULL;
    PyObject *var_font = NULL;
    PyObject *var_icon = NULL;
    PyObject *var_background = NULL;
    PyObject *var_foreground = NULL;
    PyObject *var_item = NULL;
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    PyObject *tmp_inplace_assign_attr_2__end = NULL;
    PyObject *tmp_inplace_assign_attr_2__start = NULL;
    PyObject *tmp_inplace_assign_attr_3__end = NULL;
    PyObject *tmp_inplace_assign_attr_3__start = NULL;
    struct Nuitka_FrameObject *frame_caf3f416bf939473dd3b64825dfb8d47;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    static struct Nuitka_FrameObject *cache_frame_caf3f416bf939473dd3b64825dfb8d47 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_caf3f416bf939473dd3b64825dfb8d47, codeobj_caf3f416bf939473dd3b64825dfb8d47, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_caf3f416bf939473dd3b64825dfb8d47 = cache_frame_caf3f416bf939473dd3b64825dfb8d47;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_caf3f416bf939473dd3b64825dfb8d47);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_caf3f416bf939473dd3b64825dfb8d47) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_stack);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 706;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_topwidget);
        Py_DECREF(tmp_source_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 706;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_w == NULL);
        var_w = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT(var_w);
        tmp_isinstance_inst_1 = var_w;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 708;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_1;
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_QTreeWidget);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 708;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 708;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_source_name_4;
            CHECK_OBJECT(par_self);
            tmp_source_name_4 = par_self;
            tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_wprops);
            if (tmp_assign_source_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 709;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_props == NULL);
            var_props = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_source_name_5;
            CHECK_OBJECT(par_self);
            tmp_source_name_5 = par_self;
            tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_column_counter);
            if (tmp_assign_source_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 710;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_col == NULL);
            var_col = tmp_assign_source_3;
        }
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            CHECK_OBJECT(var_props);
            tmp_called_instance_1 = var_props;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_1 = par_elem;
            tmp_args_element_name_2 = const_str_plain_text;
            frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 712;
            {
                PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
                tmp_assign_source_4 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_1, const_str_plain_getProperty, call_args);
            }

            if (tmp_assign_source_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 712;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_text == NULL);
            var_text = tmp_assign_source_4;
        }
        {
            nuitka_bool tmp_condition_result_2;
            int tmp_truth_name_1;
            CHECK_OBJECT(var_text);
            tmp_truth_name_1 = CHECK_IF_TRUE(var_text);
            if (tmp_truth_name_1 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 713;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_instance_2;
                PyObject *tmp_called_instance_3;
                PyObject *tmp_call_result_1;
                PyObject *tmp_args_element_name_3;
                PyObject *tmp_args_element_name_4;
                CHECK_OBJECT(var_w);
                tmp_called_instance_3 = var_w;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 714;
                tmp_called_instance_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_headerItem);
                if (tmp_called_instance_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 714;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_col);
                tmp_args_element_name_3 = var_col;
                CHECK_OBJECT(var_text);
                tmp_args_element_name_4 = var_text;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 714;
                {
                    PyObject *call_args[] = {tmp_args_element_name_3, tmp_args_element_name_4};
                    tmp_call_result_1 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_2, const_str_plain_setText, call_args);
                }

                Py_DECREF(tmp_called_instance_2);
                if (tmp_call_result_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 714;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_1);
            }
            branch_no_2:;
        }
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_called_instance_4;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_args_element_name_6;
            CHECK_OBJECT(var_props);
            tmp_called_instance_4 = var_props;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_5 = par_elem;
            tmp_args_element_name_6 = const_str_plain_statusTip;
            frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 716;
            {
                PyObject *call_args[] = {tmp_args_element_name_5, tmp_args_element_name_6};
                tmp_assign_source_5 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_4, const_str_plain_getProperty, call_args);
            }

            if (tmp_assign_source_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 716;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_status_tip == NULL);
            var_status_tip = tmp_assign_source_5;
        }
        {
            nuitka_bool tmp_condition_result_3;
            int tmp_truth_name_2;
            CHECK_OBJECT(var_status_tip);
            tmp_truth_name_2 = CHECK_IF_TRUE(var_status_tip);
            if (tmp_truth_name_2 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 717;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                goto branch_yes_3;
            } else {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_called_instance_5;
                PyObject *tmp_called_instance_6;
                PyObject *tmp_call_result_2;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_args_element_name_8;
                CHECK_OBJECT(var_w);
                tmp_called_instance_6 = var_w;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 718;
                tmp_called_instance_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, const_str_plain_headerItem);
                if (tmp_called_instance_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 718;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_col);
                tmp_args_element_name_7 = var_col;
                CHECK_OBJECT(var_status_tip);
                tmp_args_element_name_8 = var_status_tip;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 718;
                {
                    PyObject *call_args[] = {tmp_args_element_name_7, tmp_args_element_name_8};
                    tmp_call_result_2 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_5, const_str_plain_setStatusTip, call_args);
                }

                Py_DECREF(tmp_called_instance_5);
                if (tmp_call_result_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 718;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_2);
            }
            branch_no_3:;
        }
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_called_instance_7;
            PyObject *tmp_args_element_name_9;
            PyObject *tmp_args_element_name_10;
            CHECK_OBJECT(var_props);
            tmp_called_instance_7 = var_props;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_9 = par_elem;
            tmp_args_element_name_10 = const_str_plain_toolTip;
            frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 720;
            {
                PyObject *call_args[] = {tmp_args_element_name_9, tmp_args_element_name_10};
                tmp_assign_source_6 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_7, const_str_plain_getProperty, call_args);
            }

            if (tmp_assign_source_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 720;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_tool_tip == NULL);
            var_tool_tip = tmp_assign_source_6;
        }
        {
            nuitka_bool tmp_condition_result_4;
            int tmp_truth_name_3;
            CHECK_OBJECT(var_tool_tip);
            tmp_truth_name_3 = CHECK_IF_TRUE(var_tool_tip);
            if (tmp_truth_name_3 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 721;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_instance_8;
                PyObject *tmp_called_instance_9;
                PyObject *tmp_call_result_3;
                PyObject *tmp_args_element_name_11;
                PyObject *tmp_args_element_name_12;
                CHECK_OBJECT(var_w);
                tmp_called_instance_9 = var_w;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 722;
                tmp_called_instance_8 = CALL_METHOD_NO_ARGS(tmp_called_instance_9, const_str_plain_headerItem);
                if (tmp_called_instance_8 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 722;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_col);
                tmp_args_element_name_11 = var_col;
                CHECK_OBJECT(var_tool_tip);
                tmp_args_element_name_12 = var_tool_tip;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 722;
                {
                    PyObject *call_args[] = {tmp_args_element_name_11, tmp_args_element_name_12};
                    tmp_call_result_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_8, const_str_plain_setToolTip, call_args);
                }

                Py_DECREF(tmp_called_instance_8);
                if (tmp_call_result_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 722;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_3);
            }
            branch_no_4:;
        }
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_called_instance_10;
            PyObject *tmp_args_element_name_13;
            PyObject *tmp_args_element_name_14;
            CHECK_OBJECT(var_props);
            tmp_called_instance_10 = var_props;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_13 = par_elem;
            tmp_args_element_name_14 = const_str_plain_whatsThis;
            frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 724;
            {
                PyObject *call_args[] = {tmp_args_element_name_13, tmp_args_element_name_14};
                tmp_assign_source_7 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_10, const_str_plain_getProperty, call_args);
            }

            if (tmp_assign_source_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 724;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_whats_this == NULL);
            var_whats_this = tmp_assign_source_7;
        }
        {
            nuitka_bool tmp_condition_result_5;
            int tmp_truth_name_4;
            CHECK_OBJECT(var_whats_this);
            tmp_truth_name_4 = CHECK_IF_TRUE(var_whats_this);
            if (tmp_truth_name_4 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 725;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_5 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
                goto branch_yes_5;
            } else {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_called_instance_11;
                PyObject *tmp_called_instance_12;
                PyObject *tmp_call_result_4;
                PyObject *tmp_args_element_name_15;
                PyObject *tmp_args_element_name_16;
                CHECK_OBJECT(var_w);
                tmp_called_instance_12 = var_w;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 726;
                tmp_called_instance_11 = CALL_METHOD_NO_ARGS(tmp_called_instance_12, const_str_plain_headerItem);
                if (tmp_called_instance_11 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 726;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_col);
                tmp_args_element_name_15 = var_col;
                CHECK_OBJECT(var_whats_this);
                tmp_args_element_name_16 = var_whats_this;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 726;
                {
                    PyObject *call_args[] = {tmp_args_element_name_15, tmp_args_element_name_16};
                    tmp_call_result_4 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_11, const_str_plain_setWhatsThis, call_args);
                }

                Py_DECREF(tmp_called_instance_11);
                if (tmp_call_result_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 726;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_4);
            }
            branch_no_5:;
        }
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_called_instance_13;
            PyObject *tmp_args_element_name_17;
            PyObject *tmp_args_element_name_18;
            CHECK_OBJECT(var_props);
            tmp_called_instance_13 = var_props;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_17 = par_elem;
            tmp_args_element_name_18 = const_str_plain_textAlignment;
            frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 728;
            {
                PyObject *call_args[] = {tmp_args_element_name_17, tmp_args_element_name_18};
                tmp_assign_source_8 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_13, const_str_plain_getProperty, call_args);
            }

            if (tmp_assign_source_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 728;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_text_alignment == NULL);
            var_text_alignment = tmp_assign_source_8;
        }
        {
            nuitka_bool tmp_condition_result_6;
            int tmp_truth_name_5;
            CHECK_OBJECT(var_text_alignment);
            tmp_truth_name_5 = CHECK_IF_TRUE(var_text_alignment);
            if (tmp_truth_name_5 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 729;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_6 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_6;
            } else {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_called_instance_14;
                PyObject *tmp_called_instance_15;
                PyObject *tmp_call_result_5;
                PyObject *tmp_args_element_name_19;
                PyObject *tmp_args_element_name_20;
                CHECK_OBJECT(var_w);
                tmp_called_instance_15 = var_w;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 730;
                tmp_called_instance_14 = CALL_METHOD_NO_ARGS(tmp_called_instance_15, const_str_plain_headerItem);
                if (tmp_called_instance_14 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 730;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_col);
                tmp_args_element_name_19 = var_col;
                CHECK_OBJECT(var_text_alignment);
                tmp_args_element_name_20 = var_text_alignment;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 730;
                {
                    PyObject *call_args[] = {tmp_args_element_name_19, tmp_args_element_name_20};
                    tmp_call_result_5 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_14, const_str_plain_setTextAlignment, call_args);
                }

                Py_DECREF(tmp_called_instance_14);
                if (tmp_call_result_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 730;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_5);
            }
            branch_no_6:;
        }
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_called_instance_16;
            PyObject *tmp_args_element_name_21;
            PyObject *tmp_args_element_name_22;
            CHECK_OBJECT(var_props);
            tmp_called_instance_16 = var_props;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_21 = par_elem;
            tmp_args_element_name_22 = const_str_plain_font;
            frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 732;
            {
                PyObject *call_args[] = {tmp_args_element_name_21, tmp_args_element_name_22};
                tmp_assign_source_9 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_16, const_str_plain_getProperty, call_args);
            }

            if (tmp_assign_source_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 732;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_font == NULL);
            var_font = tmp_assign_source_9;
        }
        {
            nuitka_bool tmp_condition_result_7;
            int tmp_truth_name_6;
            CHECK_OBJECT(var_font);
            tmp_truth_name_6 = CHECK_IF_TRUE(var_font);
            if (tmp_truth_name_6 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 733;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_7 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
                goto branch_yes_7;
            } else {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_called_instance_17;
                PyObject *tmp_called_instance_18;
                PyObject *tmp_call_result_6;
                PyObject *tmp_args_element_name_23;
                PyObject *tmp_args_element_name_24;
                CHECK_OBJECT(var_w);
                tmp_called_instance_18 = var_w;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 734;
                tmp_called_instance_17 = CALL_METHOD_NO_ARGS(tmp_called_instance_18, const_str_plain_headerItem);
                if (tmp_called_instance_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 734;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_col);
                tmp_args_element_name_23 = var_col;
                CHECK_OBJECT(var_font);
                tmp_args_element_name_24 = var_font;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 734;
                {
                    PyObject *call_args[] = {tmp_args_element_name_23, tmp_args_element_name_24};
                    tmp_call_result_6 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_17, const_str_plain_setFont, call_args);
                }

                Py_DECREF(tmp_called_instance_17);
                if (tmp_call_result_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 734;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_6);
            }
            branch_no_7:;
        }
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_called_instance_19;
            PyObject *tmp_args_element_name_25;
            PyObject *tmp_args_element_name_26;
            CHECK_OBJECT(var_props);
            tmp_called_instance_19 = var_props;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_25 = par_elem;
            tmp_args_element_name_26 = const_str_plain_icon;
            frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 736;
            {
                PyObject *call_args[] = {tmp_args_element_name_25, tmp_args_element_name_26};
                tmp_assign_source_10 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_19, const_str_plain_getProperty, call_args);
            }

            if (tmp_assign_source_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 736;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_icon == NULL);
            var_icon = tmp_assign_source_10;
        }
        {
            nuitka_bool tmp_condition_result_8;
            int tmp_truth_name_7;
            CHECK_OBJECT(var_icon);
            tmp_truth_name_7 = CHECK_IF_TRUE(var_icon);
            if (tmp_truth_name_7 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 737;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_8 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
                goto branch_yes_8;
            } else {
                goto branch_no_8;
            }
            branch_yes_8:;
            {
                PyObject *tmp_called_instance_20;
                PyObject *tmp_called_instance_21;
                PyObject *tmp_call_result_7;
                PyObject *tmp_args_element_name_27;
                PyObject *tmp_args_element_name_28;
                CHECK_OBJECT(var_w);
                tmp_called_instance_21 = var_w;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 738;
                tmp_called_instance_20 = CALL_METHOD_NO_ARGS(tmp_called_instance_21, const_str_plain_headerItem);
                if (tmp_called_instance_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 738;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_col);
                tmp_args_element_name_27 = var_col;
                CHECK_OBJECT(var_icon);
                tmp_args_element_name_28 = var_icon;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 738;
                {
                    PyObject *call_args[] = {tmp_args_element_name_27, tmp_args_element_name_28};
                    tmp_call_result_7 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_20, const_str_plain_setIcon, call_args);
                }

                Py_DECREF(tmp_called_instance_20);
                if (tmp_call_result_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 738;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_7);
            }
            branch_no_8:;
        }
        {
            PyObject *tmp_assign_source_11;
            PyObject *tmp_called_instance_22;
            PyObject *tmp_args_element_name_29;
            PyObject *tmp_args_element_name_30;
            CHECK_OBJECT(var_props);
            tmp_called_instance_22 = var_props;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_29 = par_elem;
            tmp_args_element_name_30 = const_str_plain_background;
            frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 740;
            {
                PyObject *call_args[] = {tmp_args_element_name_29, tmp_args_element_name_30};
                tmp_assign_source_11 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_22, const_str_plain_getProperty, call_args);
            }

            if (tmp_assign_source_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 740;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_background == NULL);
            var_background = tmp_assign_source_11;
        }
        {
            nuitka_bool tmp_condition_result_9;
            int tmp_truth_name_8;
            CHECK_OBJECT(var_background);
            tmp_truth_name_8 = CHECK_IF_TRUE(var_background);
            if (tmp_truth_name_8 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 741;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_9 = tmp_truth_name_8 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
                goto branch_yes_9;
            } else {
                goto branch_no_9;
            }
            branch_yes_9:;
            {
                PyObject *tmp_called_instance_23;
                PyObject *tmp_called_instance_24;
                PyObject *tmp_call_result_8;
                PyObject *tmp_args_element_name_31;
                PyObject *tmp_args_element_name_32;
                CHECK_OBJECT(var_w);
                tmp_called_instance_24 = var_w;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 742;
                tmp_called_instance_23 = CALL_METHOD_NO_ARGS(tmp_called_instance_24, const_str_plain_headerItem);
                if (tmp_called_instance_23 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 742;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_col);
                tmp_args_element_name_31 = var_col;
                CHECK_OBJECT(var_background);
                tmp_args_element_name_32 = var_background;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 742;
                {
                    PyObject *call_args[] = {tmp_args_element_name_31, tmp_args_element_name_32};
                    tmp_call_result_8 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_23, const_str_plain_setBackground, call_args);
                }

                Py_DECREF(tmp_called_instance_23);
                if (tmp_call_result_8 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 742;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_8);
            }
            branch_no_9:;
        }
        {
            PyObject *tmp_assign_source_12;
            PyObject *tmp_called_instance_25;
            PyObject *tmp_args_element_name_33;
            PyObject *tmp_args_element_name_34;
            CHECK_OBJECT(var_props);
            tmp_called_instance_25 = var_props;
            CHECK_OBJECT(par_elem);
            tmp_args_element_name_33 = par_elem;
            tmp_args_element_name_34 = const_str_plain_foreground;
            frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 744;
            {
                PyObject *call_args[] = {tmp_args_element_name_33, tmp_args_element_name_34};
                tmp_assign_source_12 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_25, const_str_plain_getProperty, call_args);
            }

            if (tmp_assign_source_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 744;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_foreground == NULL);
            var_foreground = tmp_assign_source_12;
        }
        {
            nuitka_bool tmp_condition_result_10;
            int tmp_truth_name_9;
            CHECK_OBJECT(var_foreground);
            tmp_truth_name_9 = CHECK_IF_TRUE(var_foreground);
            if (tmp_truth_name_9 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 745;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_10 = tmp_truth_name_9 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
                goto branch_yes_10;
            } else {
                goto branch_no_10;
            }
            branch_yes_10:;
            {
                PyObject *tmp_called_instance_26;
                PyObject *tmp_called_instance_27;
                PyObject *tmp_call_result_9;
                PyObject *tmp_args_element_name_35;
                PyObject *tmp_args_element_name_36;
                CHECK_OBJECT(var_w);
                tmp_called_instance_27 = var_w;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 746;
                tmp_called_instance_26 = CALL_METHOD_NO_ARGS(tmp_called_instance_27, const_str_plain_headerItem);
                if (tmp_called_instance_26 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 746;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_col);
                tmp_args_element_name_35 = var_col;
                CHECK_OBJECT(var_foreground);
                tmp_args_element_name_36 = var_foreground;
                frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 746;
                {
                    PyObject *call_args[] = {tmp_args_element_name_35, tmp_args_element_name_36};
                    tmp_call_result_9 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_26, const_str_plain_setForeground, call_args);
                }

                Py_DECREF(tmp_called_instance_26);
                if (tmp_call_result_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 746;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_9);
            }
            branch_no_10:;
        }
        {
            PyObject *tmp_assign_source_13;
            PyObject *tmp_source_name_6;
            CHECK_OBJECT(par_self);
            tmp_source_name_6 = par_self;
            tmp_assign_source_13 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_column_counter);
            if (tmp_assign_source_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 748;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_inplace_assign_attr_1__start == NULL);
            tmp_inplace_assign_attr_1__start = tmp_assign_source_13;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_14;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            CHECK_OBJECT(tmp_inplace_assign_attr_1__start);
            tmp_left_name_1 = tmp_inplace_assign_attr_1__start;
            tmp_right_name_1 = const_int_pos_1;
            tmp_assign_source_14 = BINARY_OPERATION(PyNumber_InPlaceAdd, tmp_left_name_1, tmp_right_name_1);
            if (tmp_assign_source_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 748;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_2;
            }
            assert(tmp_inplace_assign_attr_1__end == NULL);
            tmp_inplace_assign_attr_1__end = tmp_assign_source_14;
        }
        // Tried code:
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT(tmp_inplace_assign_attr_1__end);
            tmp_assattr_name_1 = tmp_inplace_assign_attr_1__end;
            CHECK_OBJECT(par_self);
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_column_counter, tmp_assattr_name_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 748;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_1__end);
        Py_DECREF(tmp_inplace_assign_attr_1__end);
        tmp_inplace_assign_attr_1__end = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_2;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_1__start);
        Py_DECREF(tmp_inplace_assign_attr_1__start);
        tmp_inplace_assign_attr_1__start = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto frame_exception_exit_1;
        // End of try:
        try_end_2:;
        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_1__end);
        Py_DECREF(tmp_inplace_assign_attr_1__end);
        tmp_inplace_assign_attr_1__end = NULL;

        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_1__start);
        Py_DECREF(tmp_inplace_assign_attr_1__start);
        tmp_inplace_assign_attr_1__start = NULL;

        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_11;
            PyObject *tmp_isinstance_inst_2;
            PyObject *tmp_isinstance_cls_2;
            PyObject *tmp_source_name_7;
            PyObject *tmp_mvar_value_2;
            CHECK_OBJECT(var_w);
            tmp_isinstance_inst_2 = var_w;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

            if (unlikely(tmp_mvar_value_2 == NULL)) {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
            }

            if (tmp_mvar_value_2 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 750;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_7 = tmp_mvar_value_2;
            tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_QTableWidget);
            if (tmp_isinstance_cls_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 750;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
            Py_DECREF(tmp_isinstance_cls_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 750;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_11 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
                goto branch_yes_11;
            } else {
                goto branch_no_11;
            }
            branch_yes_11:;
            {
                nuitka_bool tmp_condition_result_12;
                PyObject *tmp_compexpr_left_1;
                PyObject *tmp_compexpr_right_1;
                PyObject *tmp_len_arg_1;
                CHECK_OBJECT(par_elem);
                tmp_len_arg_1 = par_elem;
                tmp_compexpr_left_1 = BUILTIN_LEN(tmp_len_arg_1);
                if (tmp_compexpr_left_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 751;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_compexpr_right_1 = const_int_0;
                tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
                Py_DECREF(tmp_compexpr_left_1);
                assert(!(tmp_res == -1));
                tmp_condition_result_12 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_12;
                } else {
                    goto branch_no_12;
                }
                branch_yes_12:;
                {
                    nuitka_bool tmp_condition_result_13;
                    PyObject *tmp_compexpr_left_2;
                    PyObject *tmp_compexpr_right_2;
                    PyObject *tmp_source_name_8;
                    CHECK_OBJECT(par_elem);
                    tmp_source_name_8 = par_elem;
                    tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_tag);
                    if (tmp_compexpr_left_2 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 752;
                        type_description_1 = "ooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_compexpr_right_2 = const_str_plain_column;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
                    Py_DECREF(tmp_compexpr_left_2);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 752;
                        type_description_1 = "ooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_13 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_13;
                    } else {
                        goto branch_no_13;
                    }
                    branch_yes_13:;
                    {
                        PyObject *tmp_assign_source_15;
                        PyObject *tmp_called_name_1;
                        PyObject *tmp_source_name_9;
                        PyObject *tmp_args_element_name_37;
                        PyObject *tmp_args_element_name_38;
                        PyObject *tmp_args_element_name_39;
                        PyObject *tmp_source_name_10;
                        PyObject *tmp_args_element_name_40;
                        PyObject *tmp_source_name_11;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_9 = par_self;
                        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_createWidgetItem);
                        if (tmp_called_name_1 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 753;
                            type_description_1 = "ooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_args_element_name_37 = const_str_plain_QTableWidgetItem;
                        CHECK_OBJECT(par_elem);
                        tmp_args_element_name_38 = par_elem;
                        CHECK_OBJECT(var_w);
                        tmp_source_name_10 = var_w;
                        tmp_args_element_name_39 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_horizontalHeaderItem);
                        if (tmp_args_element_name_39 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_1);

                            exception_lineno = 754;
                            type_description_1 = "ooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        CHECK_OBJECT(par_self);
                        tmp_source_name_11 = par_self;
                        tmp_args_element_name_40 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_column_counter);
                        if (tmp_args_element_name_40 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_1);
                            Py_DECREF(tmp_args_element_name_39);

                            exception_lineno = 754;
                            type_description_1 = "ooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 753;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_37, tmp_args_element_name_38, tmp_args_element_name_39, tmp_args_element_name_40};
                            tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_1, call_args);
                        }

                        Py_DECREF(tmp_called_name_1);
                        Py_DECREF(tmp_args_element_name_39);
                        Py_DECREF(tmp_args_element_name_40);
                        if (tmp_assign_source_15 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 753;
                            type_description_1 = "ooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        assert(var_item == NULL);
                        var_item = tmp_assign_source_15;
                    }
                    {
                        PyObject *tmp_called_name_2;
                        PyObject *tmp_source_name_12;
                        PyObject *tmp_call_result_10;
                        PyObject *tmp_args_element_name_41;
                        PyObject *tmp_source_name_13;
                        PyObject *tmp_args_element_name_42;
                        CHECK_OBJECT(var_w);
                        tmp_source_name_12 = var_w;
                        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_setHorizontalHeaderItem);
                        if (tmp_called_name_2 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 755;
                            type_description_1 = "ooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        CHECK_OBJECT(par_self);
                        tmp_source_name_13 = par_self;
                        tmp_args_element_name_41 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_column_counter);
                        if (tmp_args_element_name_41 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_2);

                            exception_lineno = 755;
                            type_description_1 = "ooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        CHECK_OBJECT(var_item);
                        tmp_args_element_name_42 = var_item;
                        frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 755;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_41, tmp_args_element_name_42};
                            tmp_call_result_10 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
                        }

                        Py_DECREF(tmp_called_name_2);
                        Py_DECREF(tmp_args_element_name_41);
                        if (tmp_call_result_10 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 755;
                            type_description_1 = "ooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        Py_DECREF(tmp_call_result_10);
                    }
                    {
                        PyObject *tmp_assign_source_16;
                        PyObject *tmp_source_name_14;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_14 = par_self;
                        tmp_assign_source_16 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_column_counter);
                        if (tmp_assign_source_16 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 756;
                            type_description_1 = "ooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        assert(tmp_inplace_assign_attr_2__start == NULL);
                        tmp_inplace_assign_attr_2__start = tmp_assign_source_16;
                    }
                    // Tried code:
                    {
                        PyObject *tmp_assign_source_17;
                        PyObject *tmp_left_name_2;
                        PyObject *tmp_right_name_2;
                        CHECK_OBJECT(tmp_inplace_assign_attr_2__start);
                        tmp_left_name_2 = tmp_inplace_assign_attr_2__start;
                        tmp_right_name_2 = const_int_pos_1;
                        tmp_assign_source_17 = BINARY_OPERATION(PyNumber_InPlaceAdd, tmp_left_name_2, tmp_right_name_2);
                        if (tmp_assign_source_17 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 756;
                            type_description_1 = "ooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        assert(tmp_inplace_assign_attr_2__end == NULL);
                        tmp_inplace_assign_attr_2__end = tmp_assign_source_17;
                    }
                    // Tried code:
                    {
                        PyObject *tmp_assattr_name_2;
                        PyObject *tmp_assattr_target_2;
                        CHECK_OBJECT(tmp_inplace_assign_attr_2__end);
                        tmp_assattr_name_2 = tmp_inplace_assign_attr_2__end;
                        CHECK_OBJECT(par_self);
                        tmp_assattr_target_2 = par_self;
                        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_column_counter, tmp_assattr_name_2);
                        if (tmp_result == false) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 756;
                            type_description_1 = "ooooooooooooooo";
                            goto try_except_handler_5;
                        }
                    }
                    goto try_end_3;
                    // Exception handler code:
                    try_except_handler_5:;
                    exception_keeper_type_3 = exception_type;
                    exception_keeper_value_3 = exception_value;
                    exception_keeper_tb_3 = exception_tb;
                    exception_keeper_lineno_3 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_2__end);
                    Py_DECREF(tmp_inplace_assign_attr_2__end);
                    tmp_inplace_assign_attr_2__end = NULL;

                    // Re-raise.
                    exception_type = exception_keeper_type_3;
                    exception_value = exception_keeper_value_3;
                    exception_tb = exception_keeper_tb_3;
                    exception_lineno = exception_keeper_lineno_3;

                    goto try_except_handler_4;
                    // End of try:
                    try_end_3:;
                    goto try_end_4;
                    // Exception handler code:
                    try_except_handler_4:;
                    exception_keeper_type_4 = exception_type;
                    exception_keeper_value_4 = exception_value;
                    exception_keeper_tb_4 = exception_tb;
                    exception_keeper_lineno_4 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_2__start);
                    Py_DECREF(tmp_inplace_assign_attr_2__start);
                    tmp_inplace_assign_attr_2__start = NULL;

                    // Re-raise.
                    exception_type = exception_keeper_type_4;
                    exception_value = exception_keeper_value_4;
                    exception_tb = exception_keeper_tb_4;
                    exception_lineno = exception_keeper_lineno_4;

                    goto frame_exception_exit_1;
                    // End of try:
                    try_end_4:;
                    CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_2__end);
                    Py_DECREF(tmp_inplace_assign_attr_2__end);
                    tmp_inplace_assign_attr_2__end = NULL;

                    CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_2__start);
                    Py_DECREF(tmp_inplace_assign_attr_2__start);
                    tmp_inplace_assign_attr_2__start = NULL;

                    goto branch_end_13;
                    branch_no_13:;
                    {
                        nuitka_bool tmp_condition_result_14;
                        PyObject *tmp_compexpr_left_3;
                        PyObject *tmp_compexpr_right_3;
                        PyObject *tmp_source_name_15;
                        CHECK_OBJECT(par_elem);
                        tmp_source_name_15 = par_elem;
                        tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_tag);
                        if (tmp_compexpr_left_3 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 757;
                            type_description_1 = "ooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_compexpr_right_3 = const_str_plain_row;
                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
                        Py_DECREF(tmp_compexpr_left_3);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 757;
                            type_description_1 = "ooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_14 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_14;
                        } else {
                            goto branch_no_14;
                        }
                        branch_yes_14:;
                        {
                            PyObject *tmp_assign_source_18;
                            PyObject *tmp_called_name_3;
                            PyObject *tmp_source_name_16;
                            PyObject *tmp_args_element_name_43;
                            PyObject *tmp_args_element_name_44;
                            PyObject *tmp_args_element_name_45;
                            PyObject *tmp_source_name_17;
                            PyObject *tmp_args_element_name_46;
                            PyObject *tmp_source_name_18;
                            CHECK_OBJECT(par_self);
                            tmp_source_name_16 = par_self;
                            tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_createWidgetItem);
                            if (tmp_called_name_3 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 758;
                                type_description_1 = "ooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_args_element_name_43 = const_str_plain_QTableWidgetItem;
                            CHECK_OBJECT(par_elem);
                            tmp_args_element_name_44 = par_elem;
                            CHECK_OBJECT(var_w);
                            tmp_source_name_17 = var_w;
                            tmp_args_element_name_45 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_verticalHeaderItem);
                            if (tmp_args_element_name_45 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                Py_DECREF(tmp_called_name_3);

                                exception_lineno = 759;
                                type_description_1 = "ooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT(par_self);
                            tmp_source_name_18 = par_self;
                            tmp_args_element_name_46 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_row_counter);
                            if (tmp_args_element_name_46 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                Py_DECREF(tmp_called_name_3);
                                Py_DECREF(tmp_args_element_name_45);

                                exception_lineno = 759;
                                type_description_1 = "ooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 758;
                            {
                                PyObject *call_args[] = {tmp_args_element_name_43, tmp_args_element_name_44, tmp_args_element_name_45, tmp_args_element_name_46};
                                tmp_assign_source_18 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_3, call_args);
                            }

                            Py_DECREF(tmp_called_name_3);
                            Py_DECREF(tmp_args_element_name_45);
                            Py_DECREF(tmp_args_element_name_46);
                            if (tmp_assign_source_18 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 758;
                                type_description_1 = "ooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            assert(var_item == NULL);
                            var_item = tmp_assign_source_18;
                        }
                        {
                            PyObject *tmp_called_name_4;
                            PyObject *tmp_source_name_19;
                            PyObject *tmp_call_result_11;
                            PyObject *tmp_args_element_name_47;
                            PyObject *tmp_source_name_20;
                            PyObject *tmp_args_element_name_48;
                            CHECK_OBJECT(var_w);
                            tmp_source_name_19 = var_w;
                            tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_setVerticalHeaderItem);
                            if (tmp_called_name_4 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 760;
                                type_description_1 = "ooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT(par_self);
                            tmp_source_name_20 = par_self;
                            tmp_args_element_name_47 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_row_counter);
                            if (tmp_args_element_name_47 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                Py_DECREF(tmp_called_name_4);

                                exception_lineno = 760;
                                type_description_1 = "ooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT(var_item);
                            tmp_args_element_name_48 = var_item;
                            frame_caf3f416bf939473dd3b64825dfb8d47->m_frame.f_lineno = 760;
                            {
                                PyObject *call_args[] = {tmp_args_element_name_47, tmp_args_element_name_48};
                                tmp_call_result_11 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_4, call_args);
                            }

                            Py_DECREF(tmp_called_name_4);
                            Py_DECREF(tmp_args_element_name_47);
                            if (tmp_call_result_11 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 760;
                                type_description_1 = "ooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            Py_DECREF(tmp_call_result_11);
                        }
                        {
                            PyObject *tmp_assign_source_19;
                            PyObject *tmp_source_name_21;
                            CHECK_OBJECT(par_self);
                            tmp_source_name_21 = par_self;
                            tmp_assign_source_19 = LOOKUP_ATTRIBUTE(tmp_source_name_21, const_str_plain_row_counter);
                            if (tmp_assign_source_19 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 761;
                                type_description_1 = "ooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            assert(tmp_inplace_assign_attr_3__start == NULL);
                            tmp_inplace_assign_attr_3__start = tmp_assign_source_19;
                        }
                        // Tried code:
                        {
                            PyObject *tmp_assign_source_20;
                            PyObject *tmp_left_name_3;
                            PyObject *tmp_right_name_3;
                            CHECK_OBJECT(tmp_inplace_assign_attr_3__start);
                            tmp_left_name_3 = tmp_inplace_assign_attr_3__start;
                            tmp_right_name_3 = const_int_pos_1;
                            tmp_assign_source_20 = BINARY_OPERATION(PyNumber_InPlaceAdd, tmp_left_name_3, tmp_right_name_3);
                            if (tmp_assign_source_20 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 761;
                                type_description_1 = "ooooooooooooooo";
                                goto try_except_handler_6;
                            }
                            assert(tmp_inplace_assign_attr_3__end == NULL);
                            tmp_inplace_assign_attr_3__end = tmp_assign_source_20;
                        }
                        // Tried code:
                        {
                            PyObject *tmp_assattr_name_3;
                            PyObject *tmp_assattr_target_3;
                            CHECK_OBJECT(tmp_inplace_assign_attr_3__end);
                            tmp_assattr_name_3 = tmp_inplace_assign_attr_3__end;
                            CHECK_OBJECT(par_self);
                            tmp_assattr_target_3 = par_self;
                            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_row_counter, tmp_assattr_name_3);
                            if (tmp_result == false) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 761;
                                type_description_1 = "ooooooooooooooo";
                                goto try_except_handler_7;
                            }
                        }
                        goto try_end_5;
                        // Exception handler code:
                        try_except_handler_7:;
                        exception_keeper_type_5 = exception_type;
                        exception_keeper_value_5 = exception_value;
                        exception_keeper_tb_5 = exception_tb;
                        exception_keeper_lineno_5 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_3__end);
                        Py_DECREF(tmp_inplace_assign_attr_3__end);
                        tmp_inplace_assign_attr_3__end = NULL;

                        // Re-raise.
                        exception_type = exception_keeper_type_5;
                        exception_value = exception_keeper_value_5;
                        exception_tb = exception_keeper_tb_5;
                        exception_lineno = exception_keeper_lineno_5;

                        goto try_except_handler_6;
                        // End of try:
                        try_end_5:;
                        goto try_end_6;
                        // Exception handler code:
                        try_except_handler_6:;
                        exception_keeper_type_6 = exception_type;
                        exception_keeper_value_6 = exception_value;
                        exception_keeper_tb_6 = exception_tb;
                        exception_keeper_lineno_6 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_3__start);
                        Py_DECREF(tmp_inplace_assign_attr_3__start);
                        tmp_inplace_assign_attr_3__start = NULL;

                        // Re-raise.
                        exception_type = exception_keeper_type_6;
                        exception_value = exception_keeper_value_6;
                        exception_tb = exception_keeper_tb_6;
                        exception_lineno = exception_keeper_lineno_6;

                        goto frame_exception_exit_1;
                        // End of try:
                        try_end_6:;
                        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_3__end);
                        Py_DECREF(tmp_inplace_assign_attr_3__end);
                        tmp_inplace_assign_attr_3__end = NULL;

                        CHECK_OBJECT((PyObject *)tmp_inplace_assign_attr_3__start);
                        Py_DECREF(tmp_inplace_assign_attr_3__start);
                        tmp_inplace_assign_attr_3__start = NULL;

                        branch_no_14:;
                    }
                    branch_end_13:;
                }
                branch_no_12:;
            }
            branch_no_11:;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_caf3f416bf939473dd3b64825dfb8d47);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_caf3f416bf939473dd3b64825dfb8d47);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_caf3f416bf939473dd3b64825dfb8d47, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_caf3f416bf939473dd3b64825dfb8d47->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_caf3f416bf939473dd3b64825dfb8d47, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_caf3f416bf939473dd3b64825dfb8d47,
        type_description_1,
        par_self,
        par_elem,
        var_w,
        var_props,
        var_col,
        var_text,
        var_status_tip,
        var_tool_tip,
        var_whats_this,
        var_text_alignment,
        var_font,
        var_icon,
        var_background,
        var_foreground,
        var_item
    );


    // Release cached frame.
    if (frame_caf3f416bf939473dd3b64825dfb8d47 == cache_frame_caf3f416bf939473dd3b64825dfb8d47) {
        Py_DECREF(frame_caf3f416bf939473dd3b64825dfb8d47);
    }
    cache_frame_caf3f416bf939473dd3b64825dfb8d47 = NULL;

    assertFrameObject(frame_caf3f416bf939473dd3b64825dfb8d47);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_26_addHeader);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_w);
    Py_DECREF(var_w);
    var_w = NULL;

    Py_XDECREF(var_props);
    var_props = NULL;

    Py_XDECREF(var_col);
    var_col = NULL;

    Py_XDECREF(var_text);
    var_text = NULL;

    Py_XDECREF(var_status_tip);
    var_status_tip = NULL;

    Py_XDECREF(var_tool_tip);
    var_tool_tip = NULL;

    Py_XDECREF(var_whats_this);
    var_whats_this = NULL;

    Py_XDECREF(var_text_alignment);
    var_text_alignment = NULL;

    Py_XDECREF(var_font);
    var_font = NULL;

    Py_XDECREF(var_icon);
    var_icon = NULL;

    Py_XDECREF(var_background);
    var_background = NULL;

    Py_XDECREF(var_foreground);
    var_foreground = NULL;

    Py_XDECREF(var_item);
    var_item = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_w);
    var_w = NULL;

    Py_XDECREF(var_props);
    var_props = NULL;

    Py_XDECREF(var_col);
    var_col = NULL;

    Py_XDECREF(var_text);
    var_text = NULL;

    Py_XDECREF(var_status_tip);
    var_status_tip = NULL;

    Py_XDECREF(var_tool_tip);
    var_tool_tip = NULL;

    Py_XDECREF(var_whats_this);
    var_whats_this = NULL;

    Py_XDECREF(var_text_alignment);
    var_text_alignment = NULL;

    Py_XDECREF(var_font);
    var_font = NULL;

    Py_XDECREF(var_icon);
    var_icon = NULL;

    Py_XDECREF(var_background);
    var_background = NULL;

    Py_XDECREF(var_foreground);
    var_foreground = NULL;

    Py_XDECREF(var_item);
    var_item = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_26_addHeader);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_27_setZOrder(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    struct Nuitka_FrameObject *frame_f2a21b93ded1596f71bc4c83a78b7250;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_f2a21b93ded1596f71bc4c83a78b7250 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_f2a21b93ded1596f71bc4c83a78b7250, codeobj_f2a21b93ded1596f71bc4c83a78b7250, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *));
    frame_f2a21b93ded1596f71bc4c83a78b7250 = cache_frame_f2a21b93ded1596f71bc4c83a78b7250;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f2a21b93ded1596f71bc4c83a78b7250);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f2a21b93ded1596f71bc4c83a78b7250) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT(par_elem);
        tmp_source_name_1 = par_elem;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_text);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 765;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 == tmp_compexpr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_None;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
        branch_no_1:;
    }
    // Tried code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_getattr_target_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_toplevelWidget);
        if (tmp_getattr_target_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 771;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_source_name_3 = par_elem;
        tmp_getattr_attr_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_text);
        if (tmp_getattr_attr_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_getattr_target_1);

            exception_lineno = 771;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
        tmp_called_instance_1 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, NULL);
        Py_DECREF(tmp_getattr_target_1);
        Py_DECREF(tmp_getattr_attr_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 771;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
        frame_f2a21b93ded1596f71bc4c83a78b7250->m_frame.f_lineno = 771;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_raise_);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 771;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_type_1);
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_value_1);
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF(exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_f2a21b93ded1596f71bc4c83a78b7250, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_f2a21b93ded1596f71bc4c83a78b7250, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    PyException_SetTraceback(exception_keeper_value_1, (PyObject *)exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_2 = PyExc_AttributeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_2, tmp_compexpr_right_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 772;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        tmp_operand_name_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 772;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        if (unlikely(tmp_result == false)) {
            exception_lineno = 770;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_f2a21b93ded1596f71bc4c83a78b7250->m_frame) frame_f2a21b93ded1596f71bc4c83a78b7250->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oo";
        goto try_except_handler_2;
        branch_no_2:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_27_setZOrder);
    return NULL;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f2a21b93ded1596f71bc4c83a78b7250);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_f2a21b93ded1596f71bc4c83a78b7250);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f2a21b93ded1596f71bc4c83a78b7250);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f2a21b93ded1596f71bc4c83a78b7250, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_f2a21b93ded1596f71bc4c83a78b7250->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f2a21b93ded1596f71bc4c83a78b7250, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f2a21b93ded1596f71bc4c83a78b7250,
        type_description_1,
        par_self,
        par_elem
    );


    // Release cached frame.
    if (frame_f2a21b93ded1596f71bc4c83a78b7250 == cache_frame_f2a21b93ded1596f71bc4c83a78b7250) {
        Py_DECREF(frame_f2a21b93ded1596f71bc4c83a78b7250);
    }
    cache_frame_f2a21b93ded1596f71bc4c83a78b7250 = NULL;

    assertFrameObject(frame_f2a21b93ded1596f71bc4c83a78b7250);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_27_setZOrder);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_28_createAction(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    struct Nuitka_FrameObject *frame_d97a9867ff3a899ff35cb618f6f1a94f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d97a9867ff3a899ff35cb618f6f1a94f = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_d97a9867ff3a899ff35cb618f6f1a94f, codeobj_d97a9867ff3a899ff35cb618f6f1a94f, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *));
    frame_d97a9867ff3a899ff35cb618f6f1a94f = cache_frame_d97a9867ff3a899ff35cb618f6f1a94f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d97a9867ff3a899ff35cb618f6f1a94f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d97a9867ff3a899ff35cb618f6f1a94f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_setupObject);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 777;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_str_plain_QAction;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_or_left_value_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_currentActionGroup);
        if (tmp_or_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 777;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 777;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        CHECK_OBJECT(par_self);
        tmp_source_name_3 = par_self;
        tmp_or_right_value_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_toplevelWidget);
        if (tmp_or_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 777;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_args_element_name_2 = tmp_or_left_value_1;
        or_end_1:;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_3 = par_elem;
        frame_d97a9867ff3a899ff35cb618f6f1a94f->m_frame.f_lineno = 777;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 777;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d97a9867ff3a899ff35cb618f6f1a94f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d97a9867ff3a899ff35cb618f6f1a94f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d97a9867ff3a899ff35cb618f6f1a94f, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_d97a9867ff3a899ff35cb618f6f1a94f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d97a9867ff3a899ff35cb618f6f1a94f, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d97a9867ff3a899ff35cb618f6f1a94f,
        type_description_1,
        par_self,
        par_elem
    );


    // Release cached frame.
    if (frame_d97a9867ff3a899ff35cb618f6f1a94f == cache_frame_d97a9867ff3a899ff35cb618f6f1a94f) {
        Py_DECREF(frame_d97a9867ff3a899ff35cb618f6f1a94f);
    }
    cache_frame_d97a9867ff3a899ff35cb618f6f1a94f = NULL;

    assertFrameObject(frame_d97a9867ff3a899ff35cb618f6f1a94f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_28_createAction);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_29_createActionGroup(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_action_group = NULL;
    struct Nuitka_FrameObject *frame_454093e34e4bdd10dcf528eaba6cb663;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_454093e34e4bdd10dcf528eaba6cb663 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_454093e34e4bdd10dcf528eaba6cb663, codeobj_454093e34e4bdd10dcf528eaba6cb663, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_454093e34e4bdd10dcf528eaba6cb663 = cache_frame_454093e34e4bdd10dcf528eaba6cb663;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_454093e34e4bdd10dcf528eaba6cb663);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_454093e34e4bdd10dcf528eaba6cb663) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_setupObject);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 781;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_str_plain_QActionGroup;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_toplevelWidget);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 781;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_3 = par_elem;
        frame_454093e34e4bdd10dcf528eaba6cb663->m_frame.f_lineno = 781;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 781;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_action_group == NULL);
        var_action_group = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(var_action_group);
        tmp_assattr_name_1 = var_action_group;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_currentActionGroup, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 782;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_4 = par_elem;
        frame_454093e34e4bdd10dcf528eaba6cb663->m_frame.f_lineno = 783;
        {
            PyObject *call_args[] = {tmp_args_element_name_4};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_traverseWidgetTree, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 783;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_currentActionGroup, tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 784;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_454093e34e4bdd10dcf528eaba6cb663);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_454093e34e4bdd10dcf528eaba6cb663);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_454093e34e4bdd10dcf528eaba6cb663, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_454093e34e4bdd10dcf528eaba6cb663->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_454093e34e4bdd10dcf528eaba6cb663, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_454093e34e4bdd10dcf528eaba6cb663,
        type_description_1,
        par_self,
        par_elem,
        var_action_group
    );


    // Release cached frame.
    if (frame_454093e34e4bdd10dcf528eaba6cb663 == cache_frame_454093e34e4bdd10dcf528eaba6cb663) {
        Py_DECREF(frame_454093e34e4bdd10dcf528eaba6cb663);
    }
    cache_frame_454093e34e4bdd10dcf528eaba6cb663 = NULL;

    assertFrameObject(frame_454093e34e4bdd10dcf528eaba6cb663);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_29_createActionGroup);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_action_group);
    Py_DECREF(var_action_group);
    var_action_group = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_action_group);
    var_action_group = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_29_createActionGroup);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_30_traverseWidgetTree(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_child = NULL;
    PyObject *var_handler = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_05e316213848ea1025a618735175d0b2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_05e316213848ea1025a618735175d0b2 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_05e316213848ea1025a618735175d0b2, codeobj_05e316213848ea1025a618735175d0b2, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_05e316213848ea1025a618735175d0b2 = cache_frame_05e316213848ea1025a618735175d0b2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_05e316213848ea1025a618735175d0b2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_05e316213848ea1025a618735175d0b2) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(par_elem);
        tmp_iter_arg_1 = par_elem;
        tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 800;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_2 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooo";
                exception_lineno = 800;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_child;
            var_child = tmp_assign_source_3;
            Py_INCREF(var_child);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_widgetTreeItemHandlers);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 802;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT(var_child);
        tmp_source_name_2 = var_child;
        tmp_subscript_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_tag);
        if (tmp_subscript_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_subscribed_name_1);

            exception_lineno = 802;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        tmp_assign_source_4 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        Py_DECREF(tmp_subscript_name_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 802;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = var_handler;
            var_handler = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_type_1);
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_value_1);
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF(exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_05e316213848ea1025a618735175d0b2, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_05e316213848ea1025a618735175d0b2, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    PyException_SetTraceback(exception_keeper_value_1, (PyObject *)exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_KeyError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 803;
            type_description_1 = "oooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        goto try_continue_handler_4;
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        if (unlikely(tmp_result == false)) {
            exception_lineno = 801;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_05e316213848ea1025a618735175d0b2->m_frame) frame_05e316213848ea1025a618735175d0b2->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooo";
        goto try_except_handler_4;
        branch_end_1:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_30_traverseWidgetTree);
    return NULL;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // try continue handler code:
    try_continue_handler_4:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    goto loop_start_1;
    // End of try:
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT(var_handler);
        tmp_called_name_1 = var_handler;
        CHECK_OBJECT(par_self);
        tmp_args_element_name_1 = par_self;
        CHECK_OBJECT(var_child);
        tmp_args_element_name_2 = var_child;
        frame_05e316213848ea1025a618735175d0b2->m_frame.f_lineno = 806;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_1, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 806;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_1);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 800;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_05e316213848ea1025a618735175d0b2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_05e316213848ea1025a618735175d0b2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_05e316213848ea1025a618735175d0b2, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_05e316213848ea1025a618735175d0b2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_05e316213848ea1025a618735175d0b2, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_05e316213848ea1025a618735175d0b2,
        type_description_1,
        par_self,
        par_elem,
        var_child,
        var_handler
    );


    // Release cached frame.
    if (frame_05e316213848ea1025a618735175d0b2 == cache_frame_05e316213848ea1025a618735175d0b2) {
        Py_DECREF(frame_05e316213848ea1025a618735175d0b2);
    }
    cache_frame_05e316213848ea1025a618735175d0b2 = NULL;

    assertFrameObject(frame_05e316213848ea1025a618735175d0b2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_30_traverseWidgetTree);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_child);
    var_child = NULL;

    Py_XDECREF(var_handler);
    var_handler = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_child);
    var_child = NULL;

    Py_XDECREF(var_handler);
    var_handler = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_30_traverseWidgetTree);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_31_createUserInterface(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_cname = NULL;
    PyObject *var_wname = NULL;
    struct Nuitka_FrameObject *frame_12fd9871d96e205cf0be3fcfe53e9a38;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_12fd9871d96e205cf0be3fcfe53e9a38 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_12fd9871d96e205cf0be3fcfe53e9a38, codeobj_12fd9871d96e205cf0be3fcfe53e9a38, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_12fd9871d96e205cf0be3fcfe53e9a38 = cache_frame_12fd9871d96e205cf0be3fcfe53e9a38;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_12fd9871d96e205cf0be3fcfe53e9a38);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_12fd9871d96e205cf0be3fcfe53e9a38) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_elem);
        tmp_source_name_1 = par_elem;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_attrib);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 810;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_str_plain_class;
        tmp_assign_source_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 810;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_cname == NULL);
        var_cname = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT(par_elem);
        tmp_source_name_2 = par_elem;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_attrib);
        if (tmp_subscribed_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 811;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_str_plain_name;
        tmp_assign_source_2 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_2, tmp_subscript_name_2);
        Py_DECREF(tmp_subscribed_name_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 811;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_wname == NULL);
        var_wname = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        CHECK_OBJECT(var_wname);
        tmp_operand_name_1 = var_wname;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 814;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_3;
            CHECK_OBJECT(var_cname);
            tmp_assign_source_3 = var_cname;
            {
                PyObject *old = var_wname;
                assert(old != NULL);
                var_wname = tmp_assign_source_3;
                Py_INCREF(var_wname);
                Py_DECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            int tmp_truth_name_1;
            CHECK_OBJECT(var_wname);
            tmp_called_instance_1 = var_wname;
            frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 817;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_startswith, &PyTuple_GET_ITEM(const_tuple_str_plain_Q_tuple, 0));

            if (tmp_call_result_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 817;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
            if (tmp_truth_name_1 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_call_result_1);

                exception_lineno = 817;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF(tmp_call_result_1);
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_4;
                PyObject *tmp_subscribed_name_3;
                PyObject *tmp_subscript_name_3;
                CHECK_OBJECT(var_wname);
                tmp_subscribed_name_3 = var_wname;
                tmp_subscript_name_3 = const_slice_int_pos_1_none_none;
                tmp_assign_source_4 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_3, tmp_subscript_name_3);
                if (tmp_assign_source_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 818;
                    type_description_1 = "oooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_wname;
                    assert(old != NULL);
                    var_wname = tmp_assign_source_4;
                    Py_DECREF(old);
                }

            }
            branch_no_2:;
        }
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_left_name_1;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_subscribed_name_4;
            PyObject *tmp_subscript_name_4;
            PyObject *tmp_right_name_1;
            PyObject *tmp_subscribed_name_5;
            PyObject *tmp_subscript_name_5;
            CHECK_OBJECT(var_wname);
            tmp_subscribed_name_4 = var_wname;
            tmp_subscript_name_4 = const_int_0;
            tmp_called_instance_2 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_4, tmp_subscript_name_4, 0);
            if (tmp_called_instance_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 820;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 820;
            tmp_left_name_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_lower);
            Py_DECREF(tmp_called_instance_2);
            if (tmp_left_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 820;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(var_wname);
            tmp_subscribed_name_5 = var_wname;
            tmp_subscript_name_5 = const_slice_int_pos_1_none_none;
            tmp_right_name_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_5, tmp_subscript_name_5);
            if (tmp_right_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_left_name_1);

                exception_lineno = 820;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_1, tmp_right_name_1);
            Py_DECREF(tmp_left_name_1);
            Py_DECREF(tmp_right_name_1);
            if (tmp_assign_source_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 820;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_wname;
                assert(old != NULL);
                var_wname = tmp_assign_source_5;
                Py_DECREF(old);
            }

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_3 = par_self;
        CHECK_OBJECT(var_cname);
        tmp_args_element_name_1 = var_cname;
        CHECK_OBJECT(var_wname);
        tmp_args_element_name_2 = var_wname;
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 822;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
            tmp_assattr_name_1 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_3, const_str_plain_createToplevelWidget, call_args);
        }

        if (tmp_assattr_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_toplevelWidget, tmp_assattr_name_1);
        Py_DECREF(tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT(par_self);
        tmp_source_name_3 = par_self;
        tmp_called_instance_4 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_toplevelWidget);
        if (tmp_called_instance_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 823;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_wname);
        tmp_args_element_name_3 = var_wname;
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 823;
        {
            PyObject *call_args[] = {tmp_args_element_name_3};
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_setObjectName, call_args);
        }

        Py_DECREF(tmp_called_instance_4);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 823;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_source_name_4;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_DEBUG);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 694 ], 27, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 824;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_args_element_name_4 = const_str_digest_a982dd7c9405803357897e1de910033e;
        CHECK_OBJECT(par_self);
        tmp_source_name_4 = par_self;
        tmp_called_instance_6 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_toplevelWidget);
        if (tmp_called_instance_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 825;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 825;
        tmp_called_instance_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, const_str_plain_metaObject);
        Py_DECREF(tmp_called_instance_6);
        if (tmp_called_instance_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 825;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 825;
        tmp_args_element_name_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, const_str_plain_className);
        Py_DECREF(tmp_called_instance_5);
        if (tmp_args_element_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 825;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 824;
        {
            PyObject *call_args[] = {tmp_args_element_name_4, tmp_args_element_name_5};
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_args_element_name_5);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 824;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_5;
        PyObject *tmp_source_name_6;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_source_name_7;
        PyObject *tmp_args_element_name_7;
        CHECK_OBJECT(par_self);
        tmp_source_name_6 = par_self;
        tmp_source_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_wprops);
        if (tmp_source_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 826;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_setProperties);
        Py_DECREF(tmp_source_name_5);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 826;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_7 = par_self;
        tmp_args_element_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_toplevelWidget);
        if (tmp_args_element_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 826;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_7 = par_elem;
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 826;
        {
            PyObject *call_args[] = {tmp_args_element_name_6, tmp_args_element_name_7};
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
        }

        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_6);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 826;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_8;
        PyObject *tmp_source_name_9;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_source_name_10;
        CHECK_OBJECT(par_self);
        tmp_source_name_9 = par_self;
        tmp_source_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_stack);
        if (tmp_source_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 827;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_push);
        Py_DECREF(tmp_source_name_8);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 827;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_10 = par_self;
        tmp_args_element_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_toplevelWidget);
        if (tmp_args_element_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_3);

            exception_lineno = 827;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 827;
        tmp_call_result_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_8);
        Py_DECREF(tmp_called_name_3);
        Py_DECREF(tmp_args_element_name_8);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 827;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_call_result_6;
        PyObject *tmp_args_element_name_9;
        CHECK_OBJECT(par_self);
        tmp_called_instance_7 = par_self;
        CHECK_OBJECT(par_elem);
        tmp_args_element_name_9 = par_elem;
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 828;
        {
            PyObject *call_args[] = {tmp_args_element_name_9};
            tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_traverseWidgetTree, call_args);
        }

        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 828;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_called_instance_8;
        PyObject *tmp_source_name_11;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(par_self);
        tmp_source_name_11 = par_self;
        tmp_called_instance_8 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_stack);
        if (tmp_called_instance_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 829;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 829;
        tmp_call_result_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_8, const_str_plain_popWidget);
        Py_DECREF(tmp_called_instance_8);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 829;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }
    {
        PyObject *tmp_called_instance_9;
        PyObject *tmp_call_result_8;
        CHECK_OBJECT(par_self);
        tmp_called_instance_9 = par_self;
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 830;
        tmp_call_result_8 = CALL_METHOD_NO_ARGS(tmp_called_instance_9, const_str_plain_addActions);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 830;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    {
        PyObject *tmp_called_instance_10;
        PyObject *tmp_call_result_9;
        CHECK_OBJECT(par_self);
        tmp_called_instance_10 = par_self;
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 831;
        tmp_call_result_9 = CALL_METHOD_NO_ARGS(tmp_called_instance_10, const_str_plain_setBuddies);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 831;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_9);
    }
    {
        PyObject *tmp_called_instance_11;
        PyObject *tmp_call_result_10;
        CHECK_OBJECT(par_self);
        tmp_called_instance_11 = par_self;
        frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame.f_lineno = 832;
        tmp_call_result_10 = CALL_METHOD_NO_ARGS(tmp_called_instance_11, const_str_plain_setDelayedProps);
        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 832;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_10);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_12fd9871d96e205cf0be3fcfe53e9a38);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_12fd9871d96e205cf0be3fcfe53e9a38);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_12fd9871d96e205cf0be3fcfe53e9a38, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_12fd9871d96e205cf0be3fcfe53e9a38->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_12fd9871d96e205cf0be3fcfe53e9a38, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_12fd9871d96e205cf0be3fcfe53e9a38,
        type_description_1,
        par_self,
        par_elem,
        var_cname,
        var_wname
    );


    // Release cached frame.
    if (frame_12fd9871d96e205cf0be3fcfe53e9a38 == cache_frame_12fd9871d96e205cf0be3fcfe53e9a38) {
        Py_DECREF(frame_12fd9871d96e205cf0be3fcfe53e9a38);
    }
    cache_frame_12fd9871d96e205cf0be3fcfe53e9a38 = NULL;

    assertFrameObject(frame_12fd9871d96e205cf0be3fcfe53e9a38);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_31_createUserInterface);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_cname);
    Py_DECREF(var_cname);
    var_cname = NULL;

    CHECK_OBJECT((PyObject *)var_wname);
    Py_DECREF(var_wname);
    var_wname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_cname);
    var_cname = NULL;

    Py_XDECREF(var_wname);
    var_wname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_31_createUserInterface);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_32_addActions(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *var_widget = NULL;
    PyObject *var_action_name = NULL;
    PyObject *var_action_obj = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_33cd72d6fccc4cbebda5e8de7a2c6b35;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_33cd72d6fccc4cbebda5e8de7a2c6b35 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_33cd72d6fccc4cbebda5e8de7a2c6b35, codeobj_33cd72d6fccc4cbebda5e8de7a2c6b35, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_33cd72d6fccc4cbebda5e8de7a2c6b35 = cache_frame_33cd72d6fccc4cbebda5e8de7a2c6b35;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_33cd72d6fccc4cbebda5e8de7a2c6b35);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_33cd72d6fccc4cbebda5e8de7a2c6b35) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_iter_arg_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_actions);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 835;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 835;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_2 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooo";
                exception_lineno = 835;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_3 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 835;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooo";
            exception_lineno = 835;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_5 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooo";
            exception_lineno = 835;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL)
            {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration))
                {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooo";
                    exception_lineno = 835;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format(PyExc_ValueError, "too many values to unpack");
#else
            PyErr_Format(PyExc_ValueError, "too many values to unpack (expected 2)");
#endif
            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            type_description_1 = "oooo";
            exception_lineno = 835;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_widget;
            var_widget = tmp_assign_source_6;
            Py_INCREF(var_widget);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_action_name;
            var_action_name = tmp_assign_source_7;
            Py_INCREF(var_action_name);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(var_action_name);
        tmp_compexpr_left_1 = var_action_name;
        tmp_compexpr_right_1 = const_str_plain_separator;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 836;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT(var_widget);
            tmp_called_instance_1 = var_widget;
            frame_33cd72d6fccc4cbebda5e8de7a2c6b35->m_frame.f_lineno = 837;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_addSeparator);
            if (tmp_call_result_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 837;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            Py_DECREF(tmp_call_result_1);
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_called_instance_2;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_DEBUG);

            if (unlikely(tmp_mvar_value_1 == NULL)) {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG);
            }

            if (tmp_mvar_value_1 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 694 ], 27, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 839;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            tmp_args_element_name_1 = const_str_digest_1a65ba3212f08d41c1e778325d5d05ca;
            CHECK_OBJECT(var_action_name);
            tmp_args_element_name_2 = var_action_name;
            CHECK_OBJECT(var_widget);
            tmp_called_instance_2 = var_widget;
            frame_33cd72d6fccc4cbebda5e8de7a2c6b35->m_frame.f_lineno = 839;
            tmp_args_element_name_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_objectName);
            if (tmp_args_element_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 839;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            frame_33cd72d6fccc4cbebda5e8de7a2c6b35->m_frame.f_lineno = 839;
            {
                PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3};
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_1, call_args);
            }

            Py_DECREF(tmp_args_element_name_3);
            if (tmp_call_result_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 839;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            Py_DECREF(tmp_call_result_2);
        }
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_getattr_target_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_getattr_attr_1;
            CHECK_OBJECT(par_self);
            tmp_source_name_2 = par_self;
            tmp_getattr_target_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_toplevelWidget);
            if (tmp_getattr_target_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 840;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT(var_action_name);
            tmp_getattr_attr_1 = var_action_name;
            tmp_assign_source_8 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, NULL);
            Py_DECREF(tmp_getattr_target_1);
            if (tmp_assign_source_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 840;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_action_obj;
                var_action_obj = tmp_assign_source_8;
                Py_XDECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_isinstance_inst_1;
            PyObject *tmp_isinstance_cls_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_mvar_value_2;
            CHECK_OBJECT(var_action_obj);
            tmp_isinstance_inst_1 = var_action_obj;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

            if (unlikely(tmp_mvar_value_2 == NULL)) {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
            }

            if (tmp_mvar_value_2 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 841;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }

            tmp_source_name_3 = tmp_mvar_value_2;
            tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_QMenu);
            if (tmp_isinstance_cls_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 841;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
            Py_DECREF(tmp_isinstance_cls_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 841;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_name_2;
                PyObject *tmp_source_name_4;
                PyObject *tmp_call_result_3;
                PyObject *tmp_args_element_name_4;
                PyObject *tmp_called_instance_3;
                CHECK_OBJECT(var_widget);
                tmp_source_name_4 = var_widget;
                tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_addAction);
                if (tmp_called_name_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 842;
                    type_description_1 = "oooo";
                    goto try_except_handler_2;
                }
                CHECK_OBJECT(var_action_obj);
                tmp_called_instance_3 = var_action_obj;
                frame_33cd72d6fccc4cbebda5e8de7a2c6b35->m_frame.f_lineno = 842;
                tmp_args_element_name_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_menuAction);
                if (tmp_args_element_name_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_2);

                    exception_lineno = 842;
                    type_description_1 = "oooo";
                    goto try_except_handler_2;
                }
                frame_33cd72d6fccc4cbebda5e8de7a2c6b35->m_frame.f_lineno = 842;
                tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_4);
                Py_DECREF(tmp_called_name_2);
                Py_DECREF(tmp_args_element_name_4);
                if (tmp_call_result_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 842;
                    type_description_1 = "oooo";
                    goto try_except_handler_2;
                }
                Py_DECREF(tmp_call_result_3);
            }
            goto branch_end_2;
            branch_no_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_operand_name_1;
                PyObject *tmp_isinstance_inst_2;
                PyObject *tmp_isinstance_cls_2;
                PyObject *tmp_source_name_5;
                PyObject *tmp_mvar_value_3;
                CHECK_OBJECT(var_action_obj);
                tmp_isinstance_inst_2 = var_action_obj;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                if (unlikely(tmp_mvar_value_3 == NULL)) {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                }

                if (tmp_mvar_value_3 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 843;
                    type_description_1 = "oooo";
                    goto try_except_handler_2;
                }

                tmp_source_name_5 = tmp_mvar_value_3;
                tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_QActionGroup);
                if (tmp_isinstance_cls_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 843;
                    type_description_1 = "oooo";
                    goto try_except_handler_2;
                }
                tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
                Py_DECREF(tmp_isinstance_cls_2);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 843;
                    type_description_1 = "oooo";
                    goto try_except_handler_2;
                }
                tmp_operand_name_1 = (tmp_res != 0) ? Py_True : Py_False;
                tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 843;
                    type_description_1 = "oooo";
                    goto try_except_handler_2;
                }
                tmp_condition_result_3 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_3;
                } else {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_called_instance_4;
                    PyObject *tmp_call_result_4;
                    PyObject *tmp_args_element_name_5;
                    CHECK_OBJECT(var_widget);
                    tmp_called_instance_4 = var_widget;
                    CHECK_OBJECT(var_action_obj);
                    tmp_args_element_name_5 = var_action_obj;
                    frame_33cd72d6fccc4cbebda5e8de7a2c6b35->m_frame.f_lineno = 844;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_5};
                        tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_addAction, call_args);
                    }

                    if (tmp_call_result_4 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 844;
                        type_description_1 = "oooo";
                        goto try_except_handler_2;
                    }
                    Py_DECREF(tmp_call_result_4);
                }
                branch_no_3:;
            }
            branch_end_2:;
        }
        branch_end_1:;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 835;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_33cd72d6fccc4cbebda5e8de7a2c6b35);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_33cd72d6fccc4cbebda5e8de7a2c6b35);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_33cd72d6fccc4cbebda5e8de7a2c6b35, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_33cd72d6fccc4cbebda5e8de7a2c6b35->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_33cd72d6fccc4cbebda5e8de7a2c6b35, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_33cd72d6fccc4cbebda5e8de7a2c6b35,
        type_description_1,
        par_self,
        var_widget,
        var_action_name,
        var_action_obj
    );


    // Release cached frame.
    if (frame_33cd72d6fccc4cbebda5e8de7a2c6b35 == cache_frame_33cd72d6fccc4cbebda5e8de7a2c6b35) {
        Py_DECREF(frame_33cd72d6fccc4cbebda5e8de7a2c6b35);
    }
    cache_frame_33cd72d6fccc4cbebda5e8de7a2c6b35 = NULL;

    assertFrameObject(frame_33cd72d6fccc4cbebda5e8de7a2c6b35);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_32_addActions);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_widget);
    var_widget = NULL;

    Py_XDECREF(var_action_name);
    var_action_name = NULL;

    Py_XDECREF(var_action_obj);
    var_action_obj = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_widget);
    var_widget = NULL;

    Py_XDECREF(var_action_name);
    var_action_name = NULL;

    Py_XDECREF(var_action_obj);
    var_action_obj = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_32_addActions);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_33_setDelayedProps(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *var_widget = NULL;
    PyObject *var_layout = NULL;
    PyObject *var_setter = NULL;
    PyObject *var_args = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_3009233ee6a3f860b86f88655dd73c46;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_3009233ee6a3f860b86f88655dd73c46 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_3009233ee6a3f860b86f88655dd73c46, codeobj_3009233ee6a3f860b86f88655dd73c46, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_3009233ee6a3f860b86f88655dd73c46 = cache_frame_3009233ee6a3f860b86f88655dd73c46;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3009233ee6a3f860b86f88655dd73c46);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3009233ee6a3f860b86f88655dd73c46) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_wprops);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 847;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_iter_arg_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_delayed_props);
        Py_DECREF(tmp_source_name_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 847;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 847;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_2 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooo";
                exception_lineno = 847;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_3 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 847;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tmp_unpack_1, 0, 4);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 847;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT(tmp_unpack_2, 1, 4);
        if (tmp_assign_source_5 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 847;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_3, 2, 4);
        if (tmp_assign_source_6 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 847;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_3;
            tmp_tuple_unpack_1__element_3 = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT(tmp_unpack_4, 3, 4);
        if (tmp_assign_source_7 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 847;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_4;
            tmp_tuple_unpack_1__element_4 = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL)
            {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration))
                {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooo";
                    exception_lineno = 847;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format(PyExc_ValueError, "too many values to unpack");
#else
            PyErr_Format(PyExc_ValueError, "too many values to unpack (expected 4)");
#endif
            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            type_description_1 = "ooooo";
            exception_lineno = 847;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;

    Py_XDECREF(tmp_tuple_unpack_1__element_4);
    tmp_tuple_unpack_1__element_4 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_widget;
            var_widget = tmp_assign_source_8;
            Py_INCREF(var_widget);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_layout;
            var_layout = tmp_assign_source_9;
            Py_INCREF(var_layout);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_3);
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_3;
        {
            PyObject *old = var_setter;
            var_setter = tmp_assign_source_10;
            Py_INCREF(var_setter);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_4);
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_4;
        {
            PyObject *old = var_args;
            var_args = tmp_assign_source_11;
            Py_INCREF(var_args);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_4);
    tmp_tuple_unpack_1__element_4 = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_layout);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_layout);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 848;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_12;
            PyObject *tmp_called_instance_1;
            CHECK_OBJECT(var_widget);
            tmp_called_instance_1 = var_widget;
            frame_3009233ee6a3f860b86f88655dd73c46->m_frame.f_lineno = 849;
            tmp_assign_source_12 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_layout);
            if (tmp_assign_source_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 849;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_widget;
                assert(old != NULL);
                var_widget = tmp_assign_source_12;
                Py_DECREF(old);
            }

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        CHECK_OBJECT(var_widget);
        tmp_getattr_target_1 = var_widget;
        CHECK_OBJECT(var_setter);
        tmp_getattr_attr_1 = var_setter;
        tmp_assign_source_13 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, NULL);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 851;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_setter;
            assert(old != NULL);
            var_setter = tmp_assign_source_13;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(var_setter);
        tmp_called_name_1 = var_setter;
        CHECK_OBJECT(var_args);
        tmp_args_element_name_1 = var_args;
        frame_3009233ee6a3f860b86f88655dd73c46->m_frame.f_lineno = 852;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 852;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_1);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 847;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3009233ee6a3f860b86f88655dd73c46);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3009233ee6a3f860b86f88655dd73c46);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3009233ee6a3f860b86f88655dd73c46, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_3009233ee6a3f860b86f88655dd73c46->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3009233ee6a3f860b86f88655dd73c46, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3009233ee6a3f860b86f88655dd73c46,
        type_description_1,
        par_self,
        var_widget,
        var_layout,
        var_setter,
        var_args
    );


    // Release cached frame.
    if (frame_3009233ee6a3f860b86f88655dd73c46 == cache_frame_3009233ee6a3f860b86f88655dd73c46) {
        Py_DECREF(frame_3009233ee6a3f860b86f88655dd73c46);
    }
    cache_frame_3009233ee6a3f860b86f88655dd73c46 = NULL;

    assertFrameObject(frame_3009233ee6a3f860b86f88655dd73c46);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_33_setDelayedProps);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_widget);
    var_widget = NULL;

    Py_XDECREF(var_layout);
    var_layout = NULL;

    Py_XDECREF(var_setter);
    var_setter = NULL;

    Py_XDECREF(var_args);
    var_args = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_widget);
    var_widget = NULL;

    Py_XDECREF(var_layout);
    var_layout = NULL;

    Py_XDECREF(var_setter);
    var_setter = NULL;

    Py_XDECREF(var_args);
    var_args = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_33_setDelayedProps);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_34_setBuddies(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *var_widget = NULL;
    PyObject *var_buddy = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_97f6c3536969ff2249c878e9ce9b4d35;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_97f6c3536969ff2249c878e9ce9b4d35 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_97f6c3536969ff2249c878e9ce9b4d35, codeobj_97f6c3536969ff2249c878e9ce9b4d35, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_97f6c3536969ff2249c878e9ce9b4d35 = cache_frame_97f6c3536969ff2249c878e9ce9b4d35;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_97f6c3536969ff2249c878e9ce9b4d35);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_97f6c3536969ff2249c878e9ce9b4d35) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_wprops);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 855;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_iter_arg_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_buddies);
        Py_DECREF(tmp_source_name_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 855;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 855;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_2 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooo";
                exception_lineno = 855;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_3 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 855;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooo";
            exception_lineno = 855;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_5 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooo";
            exception_lineno = 855;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL)
            {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration))
                {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooo";
                    exception_lineno = 855;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format(PyExc_ValueError, "too many values to unpack");
#else
            PyErr_Format(PyExc_ValueError, "too many values to unpack (expected 2)");
#endif
            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            type_description_1 = "ooo";
            exception_lineno = 855;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_widget;
            var_widget = tmp_assign_source_6;
            Py_INCREF(var_widget);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_buddy;
            var_buddy = tmp_assign_source_7;
            Py_INCREF(var_buddy);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_called_instance_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_DEBUG);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 694 ], 27, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 856;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_args_element_name_1 = const_str_digest_78725272a22480dab3a6e00173902429;
        CHECK_OBJECT(var_buddy);
        tmp_args_element_name_2 = var_buddy;
        CHECK_OBJECT(var_widget);
        tmp_called_instance_1 = var_widget;
        frame_97f6c3536969ff2249c878e9ce9b4d35->m_frame.f_lineno = 856;
        tmp_args_element_name_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_objectName);
        if (tmp_args_element_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 856;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        frame_97f6c3536969ff2249c878e9ce9b4d35->m_frame.f_lineno = 856;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_args_element_name_3);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 856;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_1);
    }
    // Tried code:
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_source_name_4;
        PyObject *tmp_getattr_attr_1;
        CHECK_OBJECT(var_widget);
        tmp_source_name_3 = var_widget;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_setBuddy);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 858;
            type_description_1 = "ooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_4 = par_self;
        tmp_getattr_target_1 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_toplevelWidget);
        if (tmp_getattr_target_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 858;
            type_description_1 = "ooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(var_buddy);
        tmp_getattr_attr_1 = var_buddy;
        tmp_args_element_name_4 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, NULL);
        Py_DECREF(tmp_getattr_target_1);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 858;
            type_description_1 = "ooo";
            goto try_except_handler_5;
        }
        frame_97f6c3536969ff2249c878e9ce9b4d35->m_frame.f_lineno = 858;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_4);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 858;
            type_description_1 = "ooo";
            goto try_except_handler_5;
        }
        Py_DECREF(tmp_call_result_2);
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_type_1);
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_value_1);
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF(exception_preserved_tb_1);

    if (exception_keeper_tb_3 == NULL) {
        exception_keeper_tb_3 = MAKE_TRACEBACK(frame_97f6c3536969ff2249c878e9ce9b4d35, exception_keeper_lineno_3);
    } else if (exception_keeper_lineno_3 != 0) {
        exception_keeper_tb_3 = ADD_TRACEBACK(exception_keeper_tb_3, frame_97f6c3536969ff2249c878e9ce9b4d35, exception_keeper_lineno_3);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3);
    PyException_SetTraceback(exception_keeper_value_3, (PyObject *)exception_keeper_tb_3);
    PUBLISH_EXCEPTION(&exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3);
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_AttributeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 859;
            type_description_1 = "ooo";
            goto try_except_handler_6;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_called_instance_2;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_DEBUG);

            if (unlikely(tmp_mvar_value_2 == NULL)) {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG);
            }

            if (tmp_mvar_value_2 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 694 ], 27, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 860;
                type_description_1 = "ooo";
                goto try_except_handler_6;
            }

            tmp_called_name_3 = tmp_mvar_value_2;
            tmp_args_element_name_5 = const_str_digest_b2826c76a53514b634ff682880f98334;
            CHECK_OBJECT(var_buddy);
            tmp_args_element_name_6 = var_buddy;
            CHECK_OBJECT(var_widget);
            tmp_called_instance_2 = var_widget;
            frame_97f6c3536969ff2249c878e9ce9b4d35->m_frame.f_lineno = 861;
            tmp_args_element_name_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_objectName);
            if (tmp_args_element_name_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 861;
                type_description_1 = "ooo";
                goto try_except_handler_6;
            }
            frame_97f6c3536969ff2249c878e9ce9b4d35->m_frame.f_lineno = 860;
            {
                PyObject *call_args[] = {tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7};
                tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_3, call_args);
            }

            Py_DECREF(tmp_args_element_name_7);
            if (tmp_call_result_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 860;
                type_description_1 = "ooo";
                goto try_except_handler_6;
            }
            Py_DECREF(tmp_call_result_3);
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        if (unlikely(tmp_result == false)) {
            exception_lineno = 857;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_97f6c3536969ff2249c878e9ce9b4d35->m_frame) frame_97f6c3536969ff2249c878e9ce9b4d35->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooo";
        goto try_except_handler_6;
        branch_end_1:;
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_2;
    // End of try:
    try_end_4:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    goto try_end_3;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_34_setBuddies);
    return NULL;
    // End of try:
    try_end_3:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 855;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_97f6c3536969ff2249c878e9ce9b4d35);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_97f6c3536969ff2249c878e9ce9b4d35);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_97f6c3536969ff2249c878e9ce9b4d35, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_97f6c3536969ff2249c878e9ce9b4d35->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_97f6c3536969ff2249c878e9ce9b4d35, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_97f6c3536969ff2249c878e9ce9b4d35,
        type_description_1,
        par_self,
        var_widget,
        var_buddy
    );


    // Release cached frame.
    if (frame_97f6c3536969ff2249c878e9ce9b4d35 == cache_frame_97f6c3536969ff2249c878e9ce9b4d35) {
        Py_DECREF(frame_97f6c3536969ff2249c878e9ce9b4d35);
    }
    cache_frame_97f6c3536969ff2249c878e9ce9b4d35 = NULL;

    assertFrameObject(frame_97f6c3536969ff2249c878e9ce9b4d35);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_34_setBuddies);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_widget);
    var_widget = NULL;

    Py_XDECREF(var_buddy);
    var_buddy = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_widget);
    var_widget = NULL;

    Py_XDECREF(var_buddy);
    var_buddy = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_34_setBuddies);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_35_classname(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_name = NULL;
    struct Nuitka_FrameObject *frame_e0500f79127391fd295472fef1d638f2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_e0500f79127391fd295472fef1d638f2 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_e0500f79127391fd295472fef1d638f2, codeobj_e0500f79127391fd295472fef1d638f2, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_e0500f79127391fd295472fef1d638f2 = cache_frame_e0500f79127391fd295472fef1d638f2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e0500f79127391fd295472fef1d638f2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e0500f79127391fd295472fef1d638f2) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_DEBUG);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 694 ], 27, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 864;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_args_element_name_1 = const_str_digest_ff3c9a6e26ef48a60ac21af2efdc3d8c;
        CHECK_OBJECT(par_elem);
        tmp_source_name_1 = par_elem;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_text);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 864;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_e0500f79127391fd295472fef1d638f2->m_frame.f_lineno = 864;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_args_element_name_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 864;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT(par_elem);
        tmp_source_name_2 = par_elem;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_text);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 865;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_name == NULL);
        var_name = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(var_name);
        tmp_compexpr_left_1 = var_name;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 == tmp_compexpr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = const_str_empty;
            {
                PyObject *old = var_name;
                assert(old != NULL);
                var_name = tmp_assign_source_2;
                Py_INCREF(var_name);
                Py_DECREF(old);
            }

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(var_name);
        tmp_assattr_name_1 = var_name;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_uiname, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 870;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT(var_name);
        tmp_assattr_name_2 = var_name;
        CHECK_OBJECT(par_self);
        tmp_source_name_3 = par_self;
        tmp_assattr_target_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_wprops);
        if (tmp_assattr_target_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 871;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_uiname, tmp_assattr_name_2);
        Py_DECREF(tmp_assattr_target_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 871;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(var_name);
        tmp_args_element_name_3 = var_name;
        frame_e0500f79127391fd295472fef1d638f2->m_frame.f_lineno = 872;
        {
            PyObject *call_args[] = {tmp_args_element_name_3};
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_setContext, call_args);
        }

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 872;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e0500f79127391fd295472fef1d638f2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e0500f79127391fd295472fef1d638f2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e0500f79127391fd295472fef1d638f2, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_e0500f79127391fd295472fef1d638f2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e0500f79127391fd295472fef1d638f2, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e0500f79127391fd295472fef1d638f2,
        type_description_1,
        par_self,
        par_elem,
        var_name
    );


    // Release cached frame.
    if (frame_e0500f79127391fd295472fef1d638f2 == cache_frame_e0500f79127391fd295472fef1d638f2) {
        Py_DECREF(frame_e0500f79127391fd295472fef1d638f2);
    }
    cache_frame_e0500f79127391fd295472fef1d638f2 = NULL;

    assertFrameObject(frame_e0500f79127391fd295472fef1d638f2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_35_classname);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_name);
    Py_DECREF(var_name);
    var_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_name);
    var_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_35_classname);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_37_readDefaults(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    struct Nuitka_FrameObject *frame_fac6ba4dcfcf362b269d656d5c530988;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_fac6ba4dcfcf362b269d656d5c530988 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_fac6ba4dcfcf362b269d656d5c530988, codeobj_fac6ba4dcfcf362b269d656d5c530988, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *));
    frame_fac6ba4dcfcf362b269d656d5c530988 = cache_frame_fac6ba4dcfcf362b269d656d5c530988;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_fac6ba4dcfcf362b269d656d5c530988);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_fac6ba4dcfcf362b269d656d5c530988) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(par_elem);
        tmp_source_name_1 = par_elem;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_attrib);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 882;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_str_plain_margin;
        tmp_int_arg_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_int_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 882;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subvalue_1 = PyNumber_Int(tmp_int_arg_1);
        Py_DECREF(tmp_int_arg_1);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 882;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_defaults);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_1);

            exception_lineno = 882;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = const_str_plain_margin;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 882;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_int_arg_2;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_ass_subscript_2;
        CHECK_OBJECT(par_elem);
        tmp_source_name_3 = par_elem;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_attrib);
        if (tmp_subscribed_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 883;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_str_plain_spacing;
        tmp_int_arg_2 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_2, tmp_subscript_name_2);
        Py_DECREF(tmp_subscribed_name_2);
        if (tmp_int_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 883;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subvalue_2 = PyNumber_Int(tmp_int_arg_2);
        Py_DECREF(tmp_int_arg_2);
        if (tmp_ass_subvalue_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 883;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_4 = par_self;
        tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_defaults);
        if (tmp_ass_subscribed_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_2);

            exception_lineno = 883;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_2 = const_str_plain_spacing;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        Py_DECREF(tmp_ass_subscribed_2);
        Py_DECREF(tmp_ass_subvalue_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 883;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fac6ba4dcfcf362b269d656d5c530988);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fac6ba4dcfcf362b269d656d5c530988);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_fac6ba4dcfcf362b269d656d5c530988, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_fac6ba4dcfcf362b269d656d5c530988->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_fac6ba4dcfcf362b269d656d5c530988, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fac6ba4dcfcf362b269d656d5c530988,
        type_description_1,
        par_self,
        par_elem
    );


    // Release cached frame.
    if (frame_fac6ba4dcfcf362b269d656d5c530988 == cache_frame_fac6ba4dcfcf362b269d656d5c530988) {
        Py_DECREF(frame_fac6ba4dcfcf362b269d656d5c530988);
    }
    cache_frame_fac6ba4dcfcf362b269d656d5c530988 = NULL;

    assertFrameObject(frame_fac6ba4dcfcf362b269d656d5c530988);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_37_readDefaults);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_38_setTaborder(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_lastwidget = NULL;
    PyObject *var_widget_elem = NULL;
    PyObject *var_widget = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_3bdb10fc4d552176f9e1a3f94d9a6a04;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_3bdb10fc4d552176f9e1a3f94d9a6a04 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        assert(var_lastwidget == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_lastwidget = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_3bdb10fc4d552176f9e1a3f94d9a6a04, codeobj_3bdb10fc4d552176f9e1a3f94d9a6a04, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_3bdb10fc4d552176f9e1a3f94d9a6a04 = cache_frame_3bdb10fc4d552176f9e1a3f94d9a6a04;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3bdb10fc4d552176f9e1a3f94d9a6a04);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3bdb10fc4d552176f9e1a3f94d9a6a04) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(par_elem);
        tmp_iter_arg_1 = par_elem;
        tmp_assign_source_2 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_3 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooo";
                exception_lineno = 887;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_4 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_widget_elem;
            var_widget_elem = tmp_assign_source_4;
            Py_INCREF(var_widget_elem);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_getattr_target_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_toplevelWidget);
        if (tmp_getattr_target_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 888;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_widget_elem);
        tmp_source_name_2 = var_widget_elem;
        tmp_getattr_attr_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_text);
        if (tmp_getattr_attr_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_getattr_target_1);

            exception_lineno = 888;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_5 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, NULL);
        Py_DECREF(tmp_getattr_target_1);
        Py_DECREF(tmp_getattr_attr_1);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 888;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_widget;
            var_widget = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(var_lastwidget);
        tmp_compexpr_left_1 = var_lastwidget;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 != tmp_compexpr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            CHECK_OBJECT(par_self);
            tmp_source_name_3 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_toplevelWidget);
            if (tmp_called_instance_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 891;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT(var_lastwidget);
            tmp_args_element_name_1 = var_lastwidget;
            CHECK_OBJECT(var_widget);
            tmp_args_element_name_2 = var_widget;
            frame_3bdb10fc4d552176f9e1a3f94d9a6a04->m_frame.f_lineno = 891;
            {
                PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_1, const_str_plain_setTabOrder, call_args);
            }

            Py_DECREF(tmp_called_instance_1);
            if (tmp_call_result_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 891;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            Py_DECREF(tmp_call_result_1);
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(var_widget);
        tmp_assign_source_6 = var_widget;
        {
            PyObject *old = var_lastwidget;
            assert(old != NULL);
            var_lastwidget = tmp_assign_source_6;
            Py_INCREF(var_lastwidget);
            Py_DECREF(old);
        }

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 887;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3bdb10fc4d552176f9e1a3f94d9a6a04);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3bdb10fc4d552176f9e1a3f94d9a6a04);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3bdb10fc4d552176f9e1a3f94d9a6a04, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_3bdb10fc4d552176f9e1a3f94d9a6a04->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3bdb10fc4d552176f9e1a3f94d9a6a04, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3bdb10fc4d552176f9e1a3f94d9a6a04,
        type_description_1,
        par_self,
        par_elem,
        var_lastwidget,
        var_widget_elem,
        var_widget
    );


    // Release cached frame.
    if (frame_3bdb10fc4d552176f9e1a3f94d9a6a04 == cache_frame_3bdb10fc4d552176f9e1a3f94d9a6a04) {
        Py_DECREF(frame_3bdb10fc4d552176f9e1a3f94d9a6a04);
    }
    cache_frame_3bdb10fc4d552176f9e1a3f94d9a6a04 = NULL;

    assertFrameObject(frame_3bdb10fc4d552176f9e1a3f94d9a6a04);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_38_setTaborder);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_lastwidget);
    Py_DECREF(var_lastwidget);
    var_lastwidget = NULL;

    Py_XDECREF(var_widget_elem);
    var_widget_elem = NULL;

    Py_XDECREF(var_widget);
    var_widget = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_lastwidget);
    var_lastwidget = NULL;

    Py_XDECREF(var_widget_elem);
    var_widget_elem = NULL;

    Py_XDECREF(var_widget);
    var_widget = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_38_setTaborder);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_39_readResources(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_iterator = NULL;
    PyObject *var_include = NULL;
    PyObject *var_loc = NULL;
    PyObject *var_mname = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_df852d9d25c89bf084365e94b882b419;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_df852d9d25c89bf084365e94b882b419 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_df852d9d25c89bf084365e94b882b419, codeobj_df852d9d25c89bf084365e94b882b419, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_df852d9d25c89bf084365e94b882b419 = cache_frame_df852d9d25c89bf084365e94b882b419;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_df852d9d25c89bf084365e94b882b419);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_df852d9d25c89bf084365e94b882b419) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        CHECK_OBJECT(par_elem);
        tmp_getattr_target_1 = par_elem;
        tmp_getattr_attr_1 = const_str_plain_iter;
        tmp_assign_source_1 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, NULL);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 901;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        assert(var_iterator == NULL);
        var_iterator = tmp_assign_source_1;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_type_1);
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_value_1);
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF(exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_df852d9d25c89bf084365e94b882b419, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_df852d9d25c89bf084365e94b882b419, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    PyException_SetTraceback(exception_keeper_value_1, (PyObject *)exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_AttributeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 902;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_getattr_target_2;
            PyObject *tmp_getattr_attr_2;
            CHECK_OBJECT(par_elem);
            tmp_getattr_target_2 = par_elem;
            tmp_getattr_attr_2 = const_str_plain_getiterator;
            tmp_assign_source_2 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, NULL);
            if (tmp_assign_source_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 903;
                type_description_1 = "oooooo";
                goto try_except_handler_3;
            }
            assert(var_iterator == NULL);
            var_iterator = tmp_assign_source_2;
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        if (unlikely(tmp_result == false)) {
            exception_lineno = 900;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_df852d9d25c89bf084365e94b882b419->m_frame) frame_df852d9d25c89bf084365e94b882b419->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooo";
        goto try_except_handler_3;
        branch_end_1:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_39_readResources);
    return NULL;
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_1;
        if (var_iterator == NULL) {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "iterator");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 905;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = var_iterator;
        frame_df852d9d25c89bf084365e94b882b419->m_frame.f_lineno = 905;
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1(tmp_called_name_1, &PyTuple_GET_ITEM(const_tuple_str_plain_include_tuple, 0));

        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 905;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 905;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_4 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooo";
                exception_lineno = 905;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_5 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_include;
            var_include = tmp_assign_source_5;
            Py_INCREF(var_include);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT(var_include);
        tmp_source_name_1 = var_include;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_attrib);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 906;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        frame_df852d9d25c89bf084365e94b882b419->m_frame.f_lineno = 906;
        tmp_assign_source_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_get, &PyTuple_GET_ITEM(const_tuple_str_plain_location_tuple, 0));

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 906;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_loc;
            var_loc = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_loc);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_loc);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 910;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_loc);
        tmp_called_instance_2 = var_loc;
        frame_df852d9d25c89bf084365e94b882b419->m_frame.f_lineno = 910;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_endswith, &PyTuple_GET_ITEM(const_tuple_str_digest_ca913d6a9f68c5308f38cd021160f12c_tuple, 0));

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 910;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 910;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        tmp_and_right_value_1 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_1);
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_source_name_4;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_os);

            if (unlikely(tmp_mvar_value_1 == NULL)) {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
            }

            if (tmp_mvar_value_1 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 2344 ], 24, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 911;
                type_description_1 = "oooooo";
                goto try_except_handler_4;
            }

            tmp_source_name_3 = tmp_mvar_value_1;
            tmp_source_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_path);
            if (tmp_source_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 911;
                type_description_1 = "oooooo";
                goto try_except_handler_4;
            }
            tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_basename);
            Py_DECREF(tmp_source_name_2);
            if (tmp_called_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 911;
                type_description_1 = "oooooo";
                goto try_except_handler_4;
            }
            CHECK_OBJECT(var_loc);
            tmp_subscribed_name_1 = var_loc;
            tmp_subscript_name_1 = const_slice_none_int_neg_4_none;
            tmp_left_name_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
            if (tmp_left_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_2);

                exception_lineno = 911;
                type_description_1 = "oooooo";
                goto try_except_handler_4;
            }
            CHECK_OBJECT(par_self);
            tmp_source_name_4 = par_self;
            tmp_right_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain__resource_suffix);
            if (tmp_right_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_2);
                Py_DECREF(tmp_left_name_1);

                exception_lineno = 911;
                type_description_1 = "oooooo";
                goto try_except_handler_4;
            }
            tmp_args_element_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_1, tmp_right_name_1);
            Py_DECREF(tmp_left_name_1);
            Py_DECREF(tmp_right_name_1);
            if (tmp_args_element_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_2);

                exception_lineno = 911;
                type_description_1 = "oooooo";
                goto try_except_handler_4;
            }
            frame_df852d9d25c89bf084365e94b882b419->m_frame.f_lineno = 911;
            tmp_assign_source_7 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_1);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_1);
            if (tmp_assign_source_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 911;
                type_description_1 = "oooooo";
                goto try_except_handler_4;
            }
            {
                PyObject *old = var_mname;
                var_mname = tmp_assign_source_7;
                Py_XDECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_source_name_5;
            CHECK_OBJECT(var_mname);
            tmp_compexpr_left_2 = var_mname;
            CHECK_OBJECT(par_self);
            tmp_source_name_5 = par_self;
            tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_resources);
            if (tmp_compexpr_right_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 912;
                type_description_1 = "oooooo";
                goto try_except_handler_4;
            }
            tmp_res = PySequence_Contains(tmp_compexpr_right_2, tmp_compexpr_left_2);
            Py_DECREF(tmp_compexpr_right_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 912;
                type_description_1 = "oooooo";
                goto try_except_handler_4;
            }
            tmp_condition_result_3 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                goto branch_yes_3;
            } else {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_called_instance_3;
                PyObject *tmp_source_name_6;
                PyObject *tmp_call_result_2;
                PyObject *tmp_args_element_name_2;
                CHECK_OBJECT(par_self);
                tmp_source_name_6 = par_self;
                tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_resources);
                if (tmp_called_instance_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 913;
                    type_description_1 = "oooooo";
                    goto try_except_handler_4;
                }
                CHECK_OBJECT(var_mname);
                tmp_args_element_name_2 = var_mname;
                frame_df852d9d25c89bf084365e94b882b419->m_frame.f_lineno = 913;
                {
                    PyObject *call_args[] = {tmp_args_element_name_2};
                    tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_append, call_args);
                }

                Py_DECREF(tmp_called_instance_3);
                if (tmp_call_result_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 913;
                    type_description_1 = "oooooo";
                    goto try_except_handler_4;
                }
                Py_DECREF(tmp_call_result_2);
            }
            branch_no_3:;
        }
        branch_no_2:;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 905;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_df852d9d25c89bf084365e94b882b419);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_df852d9d25c89bf084365e94b882b419);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_df852d9d25c89bf084365e94b882b419, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_df852d9d25c89bf084365e94b882b419->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_df852d9d25c89bf084365e94b882b419, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_df852d9d25c89bf084365e94b882b419,
        type_description_1,
        par_self,
        par_elem,
        var_iterator,
        var_include,
        var_loc,
        var_mname
    );


    // Release cached frame.
    if (frame_df852d9d25c89bf084365e94b882b419 == cache_frame_df852d9d25c89bf084365e94b882b419) {
        Py_DECREF(frame_df852d9d25c89bf084365e94b882b419);
    }
    cache_frame_df852d9d25c89bf084365e94b882b419 = NULL;

    assertFrameObject(frame_df852d9d25c89bf084365e94b882b419);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_39_readResources);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_iterator);
    var_iterator = NULL;

    Py_XDECREF(var_include);
    var_include = NULL;

    Py_XDECREF(var_loc);
    var_loc = NULL;

    Py_XDECREF(var_mname);
    var_mname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_iterator);
    var_iterator = NULL;

    Py_XDECREF(var_include);
    var_include = NULL;

    Py_XDECREF(var_loc);
    var_loc = NULL;

    Py_XDECREF(var_mname);
    var_mname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_39_readResources);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_40_createConnections(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1(python_pars[0]);
    PyObject *par_elem = python_pars[1];
    PyObject *var_name2object = NULL;
    PyObject *var_conn = NULL;
    PyObject *var_signal = NULL;
    PyObject *var_signal_name = NULL;
    PyObject *var_signal_args = NULL;
    PyObject *var_sender = NULL;
    PyObject *var_bound_signal = NULL;
    PyObject *var_slot = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_afda8c4f92064c7c5c00f807c770732c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_afda8c4f92064c7c5c00f807c770732c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_40_createConnections$$$function_1_name2object();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_1)->m_closure[0] = par_self;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_1)->m_closure[0]);


        assert(var_name2object == NULL);
        var_name2object = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_afda8c4f92064c7c5c00f807c770732c, codeobj_afda8c4f92064c7c5c00f807c770732c, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_afda8c4f92064c7c5c00f807c770732c = cache_frame_afda8c4f92064c7c5c00f807c770732c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_afda8c4f92064c7c5c00f807c770732c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_afda8c4f92064c7c5c00f807c770732c) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(par_elem);
        tmp_iter_arg_1 = par_elem;
        tmp_assign_source_2 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 922;
            type_description_1 = "cooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_3 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "cooooooooo";
                exception_lineno = 922;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_4 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_conn;
            var_conn = tmp_assign_source_4;
            Py_INCREF(var_conn);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(var_conn);
        tmp_called_instance_1 = var_conn;
        frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 923;
        tmp_assign_source_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_findtext, &PyTuple_GET_ITEM(const_tuple_str_plain_signal_tuple, 0));

        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 923;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_signal;
            var_signal = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_signal);
        tmp_called_instance_2 = var_signal;
        frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 924;
        tmp_iter_arg_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_split, &PyTuple_GET_ITEM(const_tuple_str_chr_40_tuple, 0));

        if (tmp_iter_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 924;
            type_description_1 = "cooooooooo";
            goto try_except_handler_3;
        }
        tmp_assign_source_6 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
        Py_DECREF(tmp_iter_arg_2);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 924;
            type_description_1 = "cooooooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_7 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "cooooooooo";
            exception_lineno = 924;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_8 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "cooooooooo";
            exception_lineno = 924;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_8;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL)
            {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration))
                {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "cooooooooo";
                    exception_lineno = 924;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format(PyExc_ValueError, "too many values to unpack");
#else
            PyErr_Format(PyExc_ValueError, "too many values to unpack (expected 2)");
#endif
            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            type_description_1 = "cooooooooo";
            exception_lineno = 924;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_signal_name;
            var_signal_name = tmp_assign_source_9;
            Py_INCREF(var_signal_name);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_signal_args;
            var_signal_args = tmp_assign_source_10;
            Py_INCREF(var_signal_args);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(var_signal_args);
        tmp_subscribed_name_1 = var_signal_args;
        tmp_subscript_name_1 = const_slice_none_int_neg_1_none;
        tmp_called_instance_3 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 925;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 925;
        tmp_assign_source_11 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_3, const_str_plain_replace, &PyTuple_GET_ITEM(const_tuple_str_space_str_empty_tuple, 0));

        Py_DECREF(tmp_called_instance_3);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 925;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_signal_args;
            assert(old != NULL);
            var_signal_args = tmp_assign_source_11;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_instance_4;
        CHECK_OBJECT(var_name2object);
        tmp_called_name_1 = var_name2object;
        CHECK_OBJECT(var_conn);
        tmp_called_instance_4 = var_conn;
        frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 926;
        tmp_args_element_name_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_findtext, &PyTuple_GET_ITEM(const_tuple_str_plain_sender_tuple, 0));

        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 926;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 926;
        tmp_assign_source_12 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 926;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_sender;
            var_sender = tmp_assign_source_12;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        CHECK_OBJECT(var_sender);
        tmp_getattr_target_1 = var_sender;
        CHECK_OBJECT(var_signal_name);
        tmp_getattr_attr_1 = var_signal_name;
        tmp_assign_source_13 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, NULL);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 927;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_bound_signal;
            var_bound_signal = tmp_assign_source_13;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_name_3;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_called_instance_7;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_source_name_2 = PyCell_GET(par_self);
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_factory);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 929;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_getSlot);
        Py_DECREF(tmp_source_name_1);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 929;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_name2object);
        tmp_called_name_3 = var_name2object;
        CHECK_OBJECT(var_conn);
        tmp_called_instance_5 = var_conn;
        frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 929;
        tmp_args_element_name_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_findtext, &PyTuple_GET_ITEM(const_tuple_str_plain_receiver_tuple, 0));

        if (tmp_args_element_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 929;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 929;
        tmp_args_element_name_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_3);
        Py_DECREF(tmp_args_element_name_3);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 929;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_conn);
        tmp_called_instance_7 = var_conn;
        frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 930;
        tmp_called_instance_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_findtext, &PyTuple_GET_ITEM(const_tuple_str_plain_slot_tuple, 0));

        if (tmp_called_instance_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_2);

            exception_lineno = 930;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 930;
        tmp_subscribed_name_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_split, &PyTuple_GET_ITEM(const_tuple_str_chr_40_tuple, 0));

        Py_DECREF(tmp_called_instance_6);
        if (tmp_subscribed_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_2);

            exception_lineno = 930;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        tmp_subscript_name_2 = const_int_0;
        tmp_args_element_name_4 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, 0);
        Py_DECREF(tmp_subscribed_name_2);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_2);

            exception_lineno = 930;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 929;
        {
            PyObject *call_args[] = {tmp_args_element_name_2, tmp_args_element_name_4};
            tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
        }

        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_2);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 929;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_slot;
            var_slot = tmp_assign_source_14;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(var_signal_args);
        tmp_compexpr_left_1 = var_signal_args;
        tmp_compexpr_right_1 = const_str_empty;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 932;
            type_description_1 = "cooooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_8;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_5;
            CHECK_OBJECT(var_bound_signal);
            tmp_called_instance_8 = var_bound_signal;
            CHECK_OBJECT(var_slot);
            tmp_args_element_name_5 = var_slot;
            frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 933;
            {
                PyObject *call_args[] = {tmp_args_element_name_5};
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_connect, call_args);
            }

            if (tmp_call_result_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 933;
                type_description_1 = "cooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF(tmp_call_result_1);
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_assign_source_15;
            PyObject *tmp_called_instance_9;
            CHECK_OBJECT(var_signal_args);
            tmp_called_instance_9 = var_signal_args;
            frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 935;
            tmp_assign_source_15 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_split, &PyTuple_GET_ITEM(const_tuple_str_chr_44_tuple, 0));

            if (tmp_assign_source_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 935;
                type_description_1 = "cooooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_signal_args;
                assert(old != NULL);
                var_signal_args = tmp_assign_source_15;
                Py_DECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_len_arg_1;
            CHECK_OBJECT(var_signal_args);
            tmp_len_arg_1 = var_signal_args;
            tmp_compexpr_left_2 = BUILTIN_LEN(tmp_len_arg_1);
            if (tmp_compexpr_left_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 937;
                type_description_1 = "cooooooooo";
                goto try_except_handler_2;
            }
            tmp_compexpr_right_2 = const_int_pos_1;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
            Py_DECREF(tmp_compexpr_left_2);
            assert(!(tmp_res == -1));
            tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_instance_10;
                PyObject *tmp_subscribed_name_3;
                PyObject *tmp_subscript_name_3;
                PyObject *tmp_subscribed_name_4;
                PyObject *tmp_subscript_name_4;
                PyObject *tmp_call_result_2;
                PyObject *tmp_args_element_name_6;
                CHECK_OBJECT(var_bound_signal);
                tmp_subscribed_name_3 = var_bound_signal;
                CHECK_OBJECT(var_signal_args);
                tmp_subscribed_name_4 = var_signal_args;
                tmp_subscript_name_4 = const_int_0;
                tmp_subscript_name_3 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_4, tmp_subscript_name_4, 0);
                if (tmp_subscript_name_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 938;
                    type_description_1 = "cooooooooo";
                    goto try_except_handler_2;
                }
                tmp_called_instance_10 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_3, tmp_subscript_name_3);
                Py_DECREF(tmp_subscript_name_3);
                if (tmp_called_instance_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 938;
                    type_description_1 = "cooooooooo";
                    goto try_except_handler_2;
                }
                CHECK_OBJECT(var_slot);
                tmp_args_element_name_6 = var_slot;
                frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 938;
                {
                    PyObject *call_args[] = {tmp_args_element_name_6};
                    tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_10, const_str_plain_connect, call_args);
                }

                Py_DECREF(tmp_called_instance_10);
                if (tmp_call_result_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 938;
                    type_description_1 = "cooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF(tmp_call_result_2);
            }
            goto branch_end_2;
            branch_no_2:;
            {
                PyObject *tmp_called_instance_11;
                PyObject *tmp_subscribed_name_5;
                PyObject *tmp_subscript_name_5;
                PyObject *tmp_tuple_arg_1;
                PyObject *tmp_call_result_3;
                PyObject *tmp_args_element_name_7;
                CHECK_OBJECT(var_bound_signal);
                tmp_subscribed_name_5 = var_bound_signal;
                CHECK_OBJECT(var_signal_args);
                tmp_tuple_arg_1 = var_signal_args;
                tmp_subscript_name_5 = PySequence_Tuple(tmp_tuple_arg_1);
                if (tmp_subscript_name_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 940;
                    type_description_1 = "cooooooooo";
                    goto try_except_handler_2;
                }
                tmp_called_instance_11 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_5, tmp_subscript_name_5);
                Py_DECREF(tmp_subscript_name_5);
                if (tmp_called_instance_11 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 940;
                    type_description_1 = "cooooooooo";
                    goto try_except_handler_2;
                }
                CHECK_OBJECT(var_slot);
                tmp_args_element_name_7 = var_slot;
                frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 940;
                {
                    PyObject *call_args[] = {tmp_args_element_name_7};
                    tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_11, const_str_plain_connect, call_args);
                }

                Py_DECREF(tmp_called_instance_11);
                if (tmp_call_result_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 940;
                    type_description_1 = "cooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF(tmp_call_result_3);
            }
            branch_end_2:;
        }
        branch_end_1:;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 922;
        type_description_1 = "cooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_source_name_5;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtCore);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtCore);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 1468 ], 28, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 942;
            type_description_1 = "cooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_1;
        tmp_source_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_QMetaObject);
        if (tmp_source_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 942;
            type_description_1 = "cooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_connectSlotsByName);
        Py_DECREF(tmp_source_name_3);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 942;
            type_description_1 = "cooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_source_name_5 = PyCell_GET(par_self);
        tmp_args_element_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_toplevelWidget);
        if (tmp_args_element_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 942;
            type_description_1 = "cooooooooo";
            goto frame_exception_exit_1;
        }
        frame_afda8c4f92064c7c5c00f807c770732c->m_frame.f_lineno = 942;
        tmp_call_result_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_4, tmp_args_element_name_8);
        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_args_element_name_8);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 942;
            type_description_1 = "cooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_afda8c4f92064c7c5c00f807c770732c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_afda8c4f92064c7c5c00f807c770732c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_afda8c4f92064c7c5c00f807c770732c, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_afda8c4f92064c7c5c00f807c770732c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_afda8c4f92064c7c5c00f807c770732c, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_afda8c4f92064c7c5c00f807c770732c,
        type_description_1,
        par_self,
        par_elem,
        var_name2object,
        var_conn,
        var_signal,
        var_signal_name,
        var_signal_args,
        var_sender,
        var_bound_signal,
        var_slot
    );


    // Release cached frame.
    if (frame_afda8c4f92064c7c5c00f807c770732c == cache_frame_afda8c4f92064c7c5c00f807c770732c) {
        Py_DECREF(frame_afda8c4f92064c7c5c00f807c770732c);
    }
    cache_frame_afda8c4f92064c7c5c00f807c770732c = NULL;

    assertFrameObject(frame_afda8c4f92064c7c5c00f807c770732c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_40_createConnections);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_name2object);
    Py_DECREF(var_name2object);
    var_name2object = NULL;

    Py_XDECREF(var_conn);
    var_conn = NULL;

    Py_XDECREF(var_signal);
    var_signal = NULL;

    Py_XDECREF(var_signal_name);
    var_signal_name = NULL;

    Py_XDECREF(var_signal_args);
    var_signal_args = NULL;

    Py_XDECREF(var_sender);
    var_sender = NULL;

    Py_XDECREF(var_bound_signal);
    var_bound_signal = NULL;

    Py_XDECREF(var_slot);
    var_slot = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT((PyObject *)var_name2object);
    Py_DECREF(var_name2object);
    var_name2object = NULL;

    Py_XDECREF(var_conn);
    var_conn = NULL;

    Py_XDECREF(var_signal);
    var_signal = NULL;

    Py_XDECREF(var_signal_name);
    var_signal_name = NULL;

    Py_XDECREF(var_signal_args);
    var_signal_args = NULL;

    Py_XDECREF(var_sender);
    var_sender = NULL;

    Py_XDECREF(var_bound_signal);
    var_bound_signal = NULL;

    Py_XDECREF(var_slot);
    var_slot = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_40_createConnections);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_40_createConnections$$$function_1_name2object(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_obj = python_pars[0];
    struct Nuitka_FrameObject *frame_be9d4fa84374457005c62785746c4339;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_be9d4fa84374457005c62785746c4339 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_be9d4fa84374457005c62785746c4339, codeobj_be9d4fa84374457005c62785746c4339, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *));
    frame_be9d4fa84374457005c62785746c4339 = cache_frame_be9d4fa84374457005c62785746c4339;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_be9d4fa84374457005c62785746c4339);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_be9d4fa84374457005c62785746c4339) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT(par_obj);
        tmp_compexpr_left_1 = par_obj;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 917;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = PyCell_GET(self->m_closure[0]);
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_uiname);
        if (tmp_compexpr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 917;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 917;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_source_name_2;
            if (PyCell_GET(self->m_closure[0]) == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 918;
                type_description_1 = "oc";
                goto frame_exception_exit_1;
            }

            tmp_source_name_2 = PyCell_GET(self->m_closure[0]);
            tmp_return_value = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_toplevelWidget);
            if (tmp_return_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 918;
                type_description_1 = "oc";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_getattr_target_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_getattr_attr_1;
            if (PyCell_GET(self->m_closure[0]) == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 920;
                type_description_1 = "oc";
                goto frame_exception_exit_1;
            }

            tmp_source_name_3 = PyCell_GET(self->m_closure[0]);
            tmp_getattr_target_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_toplevelWidget);
            if (tmp_getattr_target_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 920;
                type_description_1 = "oc";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_obj);
            tmp_getattr_attr_1 = par_obj;
            tmp_return_value = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, NULL);
            Py_DECREF(tmp_getattr_target_1);
            if (tmp_return_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 920;
                type_description_1 = "oc";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_be9d4fa84374457005c62785746c4339);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_be9d4fa84374457005c62785746c4339);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_be9d4fa84374457005c62785746c4339);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_be9d4fa84374457005c62785746c4339, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_be9d4fa84374457005c62785746c4339->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_be9d4fa84374457005c62785746c4339, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_be9d4fa84374457005c62785746c4339,
        type_description_1,
        par_obj,
        self->m_closure[0]
    );


    // Release cached frame.
    if (frame_be9d4fa84374457005c62785746c4339 == cache_frame_be9d4fa84374457005c62785746c4339) {
        Py_DECREF(frame_be9d4fa84374457005c62785746c4339);
    }
    cache_frame_be9d4fa84374457005c62785746c4339 = NULL;

    assertFrameObject(frame_be9d4fa84374457005c62785746c4339);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_40_createConnections$$$function_1_name2object);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_obj);
    Py_DECREF(par_obj);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_obj);
    Py_DECREF(par_obj);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_41_customWidgets(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_header2module = NULL;
    PyObject *var_custom_widget = NULL;
    PyObject *var_classname = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_41_customWidgets$$$function_1_header2module();



        assert(var_header2module == NULL);
        var_header2module = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd, codeobj_9aa09f7f0c2ce4dd0a5cae2af6c849cd, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd = cache_frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(par_elem);
        tmp_iter_arg_1 = par_elem;
        tmp_assign_source_2 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 968;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_3 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooo";
                exception_lineno = 968;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_4 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_custom_widget;
            var_custom_widget = tmp_assign_source_4;
            Py_INCREF(var_custom_widget);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(var_custom_widget);
        tmp_called_instance_1 = var_custom_widget;
        frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd->m_frame.f_lineno = 969;
        tmp_assign_source_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_findtext, &PyTuple_GET_ITEM(const_tuple_str_plain_class_tuple, 0));

        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 969;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_classname;
            var_classname = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_called_instance_3;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_factory);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 970;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_addCustomWidget);
        Py_DECREF(tmp_source_name_1);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 970;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_classname);
        tmp_args_element_name_1 = var_classname;
        CHECK_OBJECT(var_custom_widget);
        tmp_called_instance_2 = var_custom_widget;
        frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd->m_frame.f_lineno = 971;
        tmp_or_left_value_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_findtext, &PyTuple_GET_ITEM(const_tuple_str_plain_extends_tuple, 0));

        if (tmp_or_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 971;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 971;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        tmp_or_right_value_1 = const_str_plain_QWidget;
        Py_INCREF(tmp_or_right_value_1);
        tmp_args_element_name_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_args_element_name_2 = tmp_or_left_value_1;
        or_end_1:;
        CHECK_OBJECT(var_header2module);
        tmp_called_name_2 = var_header2module;
        CHECK_OBJECT(var_custom_widget);
        tmp_called_instance_3 = var_custom_widget;
        frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd->m_frame.f_lineno = 972;
        tmp_args_element_name_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_findtext, &PyTuple_GET_ITEM(const_tuple_str_plain_header_tuple, 0));

        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_2);

            exception_lineno = 972;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd->m_frame.f_lineno = 972;
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_4);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_args_element_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_2);

            exception_lineno = 972;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd->m_frame.f_lineno = 970;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_2);
        Py_DECREF(tmp_args_element_name_3);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 970;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_1);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 968;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd,
        type_description_1,
        par_self,
        par_elem,
        var_header2module,
        var_custom_widget,
        var_classname
    );


    // Release cached frame.
    if (frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd == cache_frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd) {
        Py_DECREF(frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd);
    }
    cache_frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd = NULL;

    assertFrameObject(frame_9aa09f7f0c2ce4dd0a5cae2af6c849cd);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_41_customWidgets);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_header2module);
    Py_DECREF(var_header2module);
    var_header2module = NULL;

    Py_XDECREF(var_custom_widget);
    var_custom_widget = NULL;

    Py_XDECREF(var_classname);
    var_classname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT((PyObject *)var_header2module);
    Py_DECREF(var_header2module);
    var_header2module = NULL;

    Py_XDECREF(var_custom_widget);
    var_custom_widget = NULL;

    Py_XDECREF(var_classname);
    var_classname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_41_customWidgets);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_41_customWidgets$$$function_1_header2module(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_header = python_pars[0];
    PyObject *var_mpath = NULL;
    PyObject *var_part = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_411ff0cc561a8e75a724f98227ff28de;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_411ff0cc561a8e75a724f98227ff28de = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_411ff0cc561a8e75a724f98227ff28de, codeobj_411ff0cc561a8e75a724f98227ff28de, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_411ff0cc561a8e75a724f98227ff28de = cache_frame_411ff0cc561a8e75a724f98227ff28de;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_411ff0cc561a8e75a724f98227ff28de);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_411ff0cc561a8e75a724f98227ff28de) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_header);
        tmp_called_instance_1 = par_header;
        frame_411ff0cc561a8e75a724f98227ff28de->m_frame.f_lineno = 952;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_endswith, &PyTuple_GET_ITEM(const_tuple_str_digest_304f3b222ad519647bcf566a6896f005_tuple, 0));

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 952;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 952;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT(par_header);
            tmp_subscribed_name_1 = par_header;
            tmp_subscript_name_1 = const_slice_none_int_neg_2_none;
            tmp_assign_source_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
            if (tmp_assign_source_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 953;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_header;
                assert(old != NULL);
                par_header = tmp_assign_source_1;
                Py_DECREF(old);
            }

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = PyList_New(0);
        assert(var_mpath == NULL);
        var_mpath = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(par_header);
        tmp_called_instance_2 = par_header;
        frame_411ff0cc561a8e75a724f98227ff28de->m_frame.f_lineno = 956;
        tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_split, &PyTuple_GET_ITEM(const_tuple_str_chr_47_tuple, 0));

        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 956;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 956;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_4 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooo";
                exception_lineno = 956;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_5 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_part;
            var_part = tmp_assign_source_5;
            Py_INCREF(var_part);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(var_part);
        tmp_compexpr_left_1 = var_part;
        tmp_compexpr_right_1 = const_tuple_str_empty_str_dot_tuple;
        tmp_res = PySequence_Contains(tmp_compexpr_right_1, tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 959;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT(var_part);
            tmp_compexpr_left_2 = var_part;
            tmp_compexpr_right_2 = const_str_digest_7b79a8950d64155a442741f6cc8c809b;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 960;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                goto branch_yes_3;
            } else {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_make_exception_arg_1;
                tmp_make_exception_arg_1 = const_str_digest_338b00a8bfb328deb8eeff6c34f47234;
                frame_411ff0cc561a8e75a724f98227ff28de->m_frame.f_lineno = 962;
                tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_SyntaxError, tmp_make_exception_arg_1);
                assert(!(tmp_raise_type_1 == NULL));
                exception_type = tmp_raise_type_1;
                exception_lineno = 962;
                RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            branch_no_3:;
        }
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_1;
            CHECK_OBJECT(var_mpath);
            tmp_called_instance_3 = var_mpath;
            CHECK_OBJECT(var_part);
            tmp_args_element_name_1 = var_part;
            frame_411ff0cc561a8e75a724f98227ff28de->m_frame.f_lineno = 964;
            {
                PyObject *call_args[] = {tmp_args_element_name_1};
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_append, call_args);
            }

            if (tmp_call_result_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 964;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            Py_DECREF(tmp_call_result_2);
        }
        branch_no_2:;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 956;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_args_element_name_2;
        tmp_called_instance_4 = const_str_dot;
        CHECK_OBJECT(var_mpath);
        tmp_args_element_name_2 = var_mpath;
        frame_411ff0cc561a8e75a724f98227ff28de->m_frame.f_lineno = 966;
        {
            PyObject *call_args[] = {tmp_args_element_name_2};
            tmp_return_value = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_join, call_args);
        }

        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 966;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_411ff0cc561a8e75a724f98227ff28de);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_411ff0cc561a8e75a724f98227ff28de);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_411ff0cc561a8e75a724f98227ff28de);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_411ff0cc561a8e75a724f98227ff28de, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_411ff0cc561a8e75a724f98227ff28de->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_411ff0cc561a8e75a724f98227ff28de, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_411ff0cc561a8e75a724f98227ff28de,
        type_description_1,
        par_header,
        var_mpath,
        var_part
    );


    // Release cached frame.
    if (frame_411ff0cc561a8e75a724f98227ff28de == cache_frame_411ff0cc561a8e75a724f98227ff28de) {
        Py_DECREF(frame_411ff0cc561a8e75a724f98227ff28de);
    }
    cache_frame_411ff0cc561a8e75a724f98227ff28de = NULL;

    assertFrameObject(frame_411ff0cc561a8e75a724f98227ff28de);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_41_customWidgets$$$function_1_header2module);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)par_header);
    Py_DECREF(par_header);
    par_header = NULL;

    CHECK_OBJECT((PyObject *)var_mpath);
    Py_DECREF(var_mpath);
    var_mpath = NULL;

    Py_XDECREF(var_part);
    var_part = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_header);
    par_header = NULL;

    Py_XDECREF(var_mpath);
    var_mpath = NULL;

    Py_XDECREF(var_part);
    var_part = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_41_customWidgets$$$function_1_header2module);
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_42_createToplevelWidget(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_classname = python_pars[1];
    PyObject *par_widgetname = python_pars[2];
    struct Nuitka_FrameObject *frame_b7d4bb23b51d5fadacf2122065c59fd7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b7d4bb23b51d5fadacf2122065c59fd7 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_b7d4bb23b51d5fadacf2122065c59fd7, codeobj_b7d4bb23b51d5fadacf2122065c59fd7, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_b7d4bb23b51d5fadacf2122065c59fd7 = cache_frame_b7d4bb23b51d5fadacf2122065c59fd7;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b7d4bb23b51d5fadacf2122065c59fd7);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b7d4bb23b51d5fadacf2122065c59fd7) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_NotImplementedError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 975;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b7d4bb23b51d5fadacf2122065c59fd7);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b7d4bb23b51d5fadacf2122065c59fd7);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b7d4bb23b51d5fadacf2122065c59fd7, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_b7d4bb23b51d5fadacf2122065c59fd7->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b7d4bb23b51d5fadacf2122065c59fd7, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b7d4bb23b51d5fadacf2122065c59fd7,
        type_description_1,
        par_self,
        par_classname,
        par_widgetname
    );


    // Release cached frame.
    if (frame_b7d4bb23b51d5fadacf2122065c59fd7 == cache_frame_b7d4bb23b51d5fadacf2122065c59fd7) {
        Py_DECREF(frame_b7d4bb23b51d5fadacf2122065c59fd7);
    }
    cache_frame_b7d4bb23b51d5fadacf2122065c59fd7 = NULL;

    assertFrameObject(frame_b7d4bb23b51d5fadacf2122065c59fd7);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_42_createToplevelWidget);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_classname);
    Py_DECREF(par_classname);
    CHECK_OBJECT(par_widgetname);
    Py_DECREF(par_widgetname);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

}


static PyObject *impl_PyQt5$uic$uiparser$$$function_43_buttonGroups(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_button_group = NULL;
    PyObject *var_bg_name = NULL;
    PyObject *var_bg = NULL;
    PyObject *var_prop = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_fa09b1e02f70623fe6b82b24ac819360;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_fa09b1e02f70623fe6b82b24ac819360 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_fa09b1e02f70623fe6b82b24ac819360, codeobj_fa09b1e02f70623fe6b82b24ac819360, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_fa09b1e02f70623fe6b82b24ac819360 = cache_frame_fa09b1e02f70623fe6b82b24ac819360;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_fa09b1e02f70623fe6b82b24ac819360);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_fa09b1e02f70623fe6b82b24ac819360) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(par_elem);
        tmp_iter_arg_1 = par_elem;
        tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 978;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_2 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooo";
                exception_lineno = 978;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_button_group;
            var_button_group = tmp_assign_source_3;
            Py_INCREF(var_button_group);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT(var_button_group);
        tmp_source_name_1 = var_button_group;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_tag);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 979;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_compexpr_right_1 = const_str_plain_buttongroup;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 979;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT(var_button_group);
            tmp_source_name_2 = var_button_group;
            tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_attrib);
            if (tmp_subscribed_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 980;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            tmp_subscript_name_1 = const_str_plain_name;
            tmp_assign_source_4 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
            Py_DECREF(tmp_subscribed_name_1);
            if (tmp_assign_source_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 980;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_bg_name;
                var_bg_name = tmp_assign_source_4;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_ButtonGroup);

            if (unlikely(tmp_mvar_value_1 == NULL)) {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_ButtonGroup);
            }

            if (tmp_mvar_value_1 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3425 ], 33, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 981;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            frame_fa09b1e02f70623fe6b82b24ac819360->m_frame.f_lineno = 981;
            tmp_assign_source_5 = CALL_FUNCTION_NO_ARGS(tmp_called_name_1);
            if (tmp_assign_source_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 981;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_bg;
                var_bg = tmp_assign_source_5;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_ass_subscript_1;
            CHECK_OBJECT(var_bg);
            tmp_ass_subvalue_1 = var_bg;
            CHECK_OBJECT(par_self);
            tmp_source_name_3 = par_self;
            tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_button_groups);
            if (tmp_ass_subscribed_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 982;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT(var_bg_name);
            tmp_ass_subscript_1 = var_bg_name;
            tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
            Py_DECREF(tmp_ass_subscribed_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 982;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
        }
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            CHECK_OBJECT(par_self);
            tmp_called_instance_1 = par_self;
            CHECK_OBJECT(var_button_group);
            tmp_args_element_name_1 = var_button_group;
            tmp_args_element_name_2 = const_str_plain_exclusive;
            frame_fa09b1e02f70623fe6b82b24ac819360->m_frame.f_lineno = 984;
            {
                PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
                tmp_assign_source_6 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_1, const_str_plain_getProperty, call_args);
            }

            if (tmp_assign_source_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 984;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_prop;
                var_prop = tmp_assign_source_6;
                Py_XDECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT(var_prop);
            tmp_compexpr_left_2 = var_prop;
            tmp_compexpr_right_2 = Py_None;
            tmp_condition_result_2 = (tmp_compexpr_left_2 != tmp_compexpr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                PyObject *tmp_called_instance_2;
                CHECK_OBJECT(var_prop);
                tmp_called_instance_2 = var_prop;
                frame_fa09b1e02f70623fe6b82b24ac819360->m_frame.f_lineno = 986;
                tmp_compexpr_left_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_findtext, &PyTuple_GET_ITEM(const_tuple_str_plain_bool_tuple, 0));

                if (tmp_compexpr_left_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 986;
                    type_description_1 = "oooooo";
                    goto try_except_handler_2;
                }
                tmp_compexpr_right_3 = const_str_plain_false;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
                Py_DECREF(tmp_compexpr_left_3);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 986;
                    type_description_1 = "oooooo";
                    goto try_except_handler_2;
                }
                tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_3;
                } else {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_assattr_name_1;
                    PyObject *tmp_assattr_target_1;
                    tmp_assattr_name_1 = Py_False;
                    CHECK_OBJECT(var_bg);
                    tmp_assattr_target_1 = var_bg;
                    tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_exclusive, tmp_assattr_name_1);
                    if (tmp_result == false) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 987;
                        type_description_1 = "oooooo";
                        goto try_except_handler_2;
                    }
                }
                branch_no_3:;
            }
            branch_no_2:;
        }
        branch_no_1:;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 978;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fa09b1e02f70623fe6b82b24ac819360);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fa09b1e02f70623fe6b82b24ac819360);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_fa09b1e02f70623fe6b82b24ac819360, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_fa09b1e02f70623fe6b82b24ac819360->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_fa09b1e02f70623fe6b82b24ac819360, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fa09b1e02f70623fe6b82b24ac819360,
        type_description_1,
        par_self,
        par_elem,
        var_button_group,
        var_bg_name,
        var_bg,
        var_prop
    );


    // Release cached frame.
    if (frame_fa09b1e02f70623fe6b82b24ac819360 == cache_frame_fa09b1e02f70623fe6b82b24ac819360) {
        Py_DECREF(frame_fa09b1e02f70623fe6b82b24ac819360);
    }
    cache_frame_fa09b1e02f70623fe6b82b24ac819360 = NULL;

    assertFrameObject(frame_fa09b1e02f70623fe6b82b24ac819360);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_43_buttonGroups);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_button_group);
    var_button_group = NULL;

    Py_XDECREF(var_bg_name);
    var_bg_name = NULL;

    Py_XDECREF(var_bg);
    var_bg = NULL;

    Py_XDECREF(var_prop);
    var_prop = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_button_group);
    var_button_group = NULL;

    Py_XDECREF(var_bg_name);
    var_bg_name = NULL;

    Py_XDECREF(var_bg);
    var_bg = NULL;

    Py_XDECREF(var_prop);
    var_prop = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_43_buttonGroups);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_45_parse(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_filename = python_pars[1];
    PyObject *par_resource_suffix = python_pars[2];
    PyObject *var_base_dir = NULL;
    PyObject *var_branchHandlers = NULL;
    PyObject *var_document = NULL;
    PyObject *var_root = NULL;
    PyObject *var_version = NULL;
    PyObject *var_tagname = NULL;
    PyObject *var_actor = NULL;
    PyObject *var_elem = NULL;
    PyObject *var_w = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_2cda43e24accafc1f48c20cd1a643fed;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_2cda43e24accafc1f48c20cd1a643fed = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_2cda43e24accafc1f48c20cd1a643fed, codeobj_2cda43e24accafc1f48c20cd1a643fed, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_2cda43e24accafc1f48c20cd1a643fed = cache_frame_2cda43e24accafc1f48c20cd1a643fed;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2cda43e24accafc1f48c20cd1a643fed);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2cda43e24accafc1f48c20cd1a643fed) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT(par_filename);
        tmp_source_name_1 = par_filename;
        tmp_attribute_name_1 = const_str_plain_read;
        tmp_res = BUILTIN_HASATTR_BOOL(tmp_source_name_1, tmp_attribute_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 995;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            tmp_assign_source_1 = const_str_empty;
            assert(var_base_dir == NULL);
            Py_INCREF(tmp_assign_source_1);
            var_base_dir = tmp_assign_source_1;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_unicode_arg_1;
            CHECK_OBJECT(par_filename);
            tmp_unicode_arg_1 = par_filename;
            tmp_assign_source_2 = PyObject_Unicode(tmp_unicode_arg_1);
            if (tmp_assign_source_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 999;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_filename;
                assert(old != NULL);
                par_filename = tmp_assign_source_2;
                Py_DECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_os);

            if (unlikely(tmp_mvar_value_1 == NULL)) {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
            }

            if (tmp_mvar_value_1 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 2344 ], 24, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1000;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_2 = tmp_mvar_value_1;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_path);
            if (tmp_called_instance_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1000;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_filename);
            tmp_args_element_name_1 = par_filename;
            frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1000;
            {
                PyObject *call_args[] = {tmp_args_element_name_1};
                tmp_assign_source_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_dirname, call_args);
            }

            Py_DECREF(tmp_called_instance_1);
            if (tmp_assign_source_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1000;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_base_dir == NULL);
            var_base_dir = tmp_assign_source_3;
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_3 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_wprops);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1002;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_base_dir);
        tmp_args_element_name_2 = var_base_dir;
        frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1002;
        {
            PyObject *call_args[] = {tmp_args_element_name_2};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_set_base_dir, call_args);
        }

        Py_DECREF(tmp_called_instance_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1002;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_resource_suffix);
        tmp_assattr_name_1 = par_resource_suffix;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain__resource_suffix, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1004;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_source_name_6;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_source_name_7;
        PyObject *tmp_tuple_element_6;
        PyObject *tmp_source_name_8;
        PyObject *tmp_tuple_element_7;
        PyObject *tmp_source_name_9;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_source_name_10;
        PyObject *tmp_tuple_element_9;
        PyObject *tmp_source_name_11;
        tmp_tuple_element_2 = const_str_plain_layoutdefault;
        tmp_tuple_element_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_2);
        PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(par_self);
        tmp_source_name_4 = par_self;
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_readDefaults);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tuple_element_1);

            exception_lineno = 1010;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_tuple_element_1, 1, tmp_tuple_element_2);
        tmp_assign_source_4 = PyTuple_New(8);
        PyTuple_SET_ITEM(tmp_assign_source_4, 0, tmp_tuple_element_1);
        tmp_tuple_element_3 = const_str_plain_class;
        tmp_tuple_element_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_3);
        PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_3);
        CHECK_OBJECT(par_self);
        tmp_source_name_5 = par_self;
        tmp_tuple_element_3 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_classname);
        if (tmp_tuple_element_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_4);
            Py_DECREF(tmp_tuple_element_1);

            exception_lineno = 1011;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_tuple_element_1, 1, tmp_tuple_element_3);
        PyTuple_SET_ITEM(tmp_assign_source_4, 1, tmp_tuple_element_1);
        tmp_tuple_element_4 = const_str_plain_buttongroups;
        tmp_tuple_element_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_4);
        PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_4);
        CHECK_OBJECT(par_self);
        tmp_source_name_6 = par_self;
        tmp_tuple_element_4 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_buttonGroups);
        if (tmp_tuple_element_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_4);
            Py_DECREF(tmp_tuple_element_1);

            exception_lineno = 1012;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_tuple_element_1, 1, tmp_tuple_element_4);
        PyTuple_SET_ITEM(tmp_assign_source_4, 2, tmp_tuple_element_1);
        tmp_tuple_element_5 = const_str_plain_customwidgets;
        tmp_tuple_element_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_5);
        PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_5);
        CHECK_OBJECT(par_self);
        tmp_source_name_7 = par_self;
        tmp_tuple_element_5 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_customWidgets);
        if (tmp_tuple_element_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_4);
            Py_DECREF(tmp_tuple_element_1);

            exception_lineno = 1013;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_tuple_element_1, 1, tmp_tuple_element_5);
        PyTuple_SET_ITEM(tmp_assign_source_4, 3, tmp_tuple_element_1);
        tmp_tuple_element_6 = const_str_plain_widget;
        tmp_tuple_element_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_6);
        PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_6);
        CHECK_OBJECT(par_self);
        tmp_source_name_8 = par_self;
        tmp_tuple_element_6 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_createUserInterface);
        if (tmp_tuple_element_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_4);
            Py_DECREF(tmp_tuple_element_1);

            exception_lineno = 1014;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_tuple_element_1, 1, tmp_tuple_element_6);
        PyTuple_SET_ITEM(tmp_assign_source_4, 4, tmp_tuple_element_1);
        tmp_tuple_element_7 = const_str_plain_connections;
        tmp_tuple_element_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_7);
        PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_7);
        CHECK_OBJECT(par_self);
        tmp_source_name_9 = par_self;
        tmp_tuple_element_7 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_createConnections);
        if (tmp_tuple_element_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_4);
            Py_DECREF(tmp_tuple_element_1);

            exception_lineno = 1015;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_tuple_element_1, 1, tmp_tuple_element_7);
        PyTuple_SET_ITEM(tmp_assign_source_4, 5, tmp_tuple_element_1);
        tmp_tuple_element_8 = const_str_plain_tabstops;
        tmp_tuple_element_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_8);
        PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_8);
        CHECK_OBJECT(par_self);
        tmp_source_name_10 = par_self;
        tmp_tuple_element_8 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_setTaborder);
        if (tmp_tuple_element_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_4);
            Py_DECREF(tmp_tuple_element_1);

            exception_lineno = 1016;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_tuple_element_1, 1, tmp_tuple_element_8);
        PyTuple_SET_ITEM(tmp_assign_source_4, 6, tmp_tuple_element_1);
        tmp_tuple_element_9 = const_str_plain_resources;
        tmp_tuple_element_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_9);
        PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_9);
        CHECK_OBJECT(par_self);
        tmp_source_name_11 = par_self;
        tmp_tuple_element_9 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_readResources);
        if (tmp_tuple_element_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_4);
            Py_DECREF(tmp_tuple_element_1);

            exception_lineno = 1017;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_tuple_element_1, 1, tmp_tuple_element_9);
        PyTuple_SET_ITEM(tmp_assign_source_4, 7, tmp_tuple_element_1);
        assert(var_branchHandlers == NULL);
        var_branchHandlers = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_parse);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_parse);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 3528 ], 27, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1020;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_2;
        CHECK_OBJECT(par_filename);
        tmp_args_element_name_3 = par_filename;
        frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1020;
        tmp_assign_source_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_3);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1020;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_document == NULL);
        var_document = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_instance_3;
        CHECK_OBJECT(var_document);
        tmp_called_instance_3 = var_document;
        frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1021;
        tmp_assign_source_6 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_getroot);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1021;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_root == NULL);
        var_root = tmp_assign_source_6;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_12;
        CHECK_OBJECT(var_root);
        tmp_source_name_12 = var_root;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_tag);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1023;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_plain_ui;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1023;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_14766822bea9857bbe07483cf8fafd80;
            frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1024;
            tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_SyntaxError, tmp_make_exception_arg_1);
            assert(!(tmp_raise_type_1 == NULL));
            exception_type = tmp_raise_type_1;
            exception_lineno = 1024;
            RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_source_name_13;
        CHECK_OBJECT(var_root);
        tmp_source_name_13 = var_root;
        tmp_called_instance_4 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_attrib);
        if (tmp_called_instance_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1026;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1026;
        tmp_assign_source_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_get, &PyTuple_GET_ITEM(const_tuple_str_plain_version_tuple, 0));

        Py_DECREF(tmp_called_instance_4);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1026;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_version == NULL);
        var_version = tmp_assign_source_7;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT(var_version);
        tmp_compexpr_left_2 = var_version;
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_3 = (tmp_compexpr_left_2 == tmp_compexpr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_raise_type_2;
            PyObject *tmp_make_exception_arg_2;
            tmp_make_exception_arg_2 = const_str_digest_c48babcf9874284b2ebed30b54116256;
            frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1028;
            tmp_raise_type_2 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_SyntaxError, tmp_make_exception_arg_2);
            assert(!(tmp_raise_type_2 == NULL));
            exception_type = tmp_raise_type_2;
            exception_lineno = 1028;
            RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_3:;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT(var_version);
        tmp_compexpr_left_3 = var_version;
        tmp_compexpr_right_3 = const_str_digest_ec008b11def3fee25602c86081895340;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1031;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_raise_type_3;
            PyObject *tmp_make_exception_arg_3;
            tmp_make_exception_arg_3 = const_str_digest_5370431bbaf6c67536847cbb4bcef764;
            frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1032;
            tmp_raise_type_3 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_SyntaxError, tmp_make_exception_arg_3);
            assert(!(tmp_raise_type_3 == NULL));
            exception_type = tmp_raise_type_3;
            exception_lineno = 1032;
            RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_4:;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(var_branchHandlers);
        tmp_iter_arg_1 = var_branchHandlers;
        tmp_assign_source_8 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_8;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_9 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_9 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooo";
                exception_lineno = 1034;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_9;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_10 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_10;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_11 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_11 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooo";
            exception_lineno = 1034;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_11;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_12 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_12 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooo";
            exception_lineno = 1034;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_12;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL)
            {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration))
                {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooo";
                    exception_lineno = 1034;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format(PyExc_ValueError, "too many values to unpack");
#else
            PyErr_Format(PyExc_ValueError, "too many values to unpack (expected 2)");
#endif
            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            type_description_1 = "oooooooooooo";
            exception_lineno = 1034;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT((PyObject *)tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_13 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_tagname;
            var_tagname = tmp_assign_source_13;
            Py_INCREF(var_tagname);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_14 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_actor;
            var_actor = tmp_assign_source_14;
            Py_INCREF(var_actor);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT(var_document);
        tmp_called_instance_5 = var_document;
        CHECK_OBJECT(var_tagname);
        tmp_args_element_name_4 = var_tagname;
        frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1035;
        {
            PyObject *call_args[] = {tmp_args_element_name_4};
            tmp_assign_source_15 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_find, call_args);
        }

        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1035;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_elem;
            var_elem = tmp_assign_source_15;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        CHECK_OBJECT(var_elem);
        tmp_compexpr_left_4 = var_elem;
        tmp_compexpr_right_4 = Py_None;
        tmp_condition_result_5 = (tmp_compexpr_left_4 != tmp_compexpr_right_4) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_5;
            CHECK_OBJECT(var_actor);
            tmp_called_name_2 = var_actor;
            CHECK_OBJECT(var_elem);
            tmp_args_element_name_5 = var_elem;
            frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1037;
            tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_5);
            if (tmp_call_result_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1037;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF(tmp_call_result_2);
        }
        branch_no_5:;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1034;
        type_description_1 = "oooooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_called_instance_6;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(par_self);
        tmp_called_instance_6 = par_self;
        frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1038;
        tmp_call_result_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, const_str_plain_finalize);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1038;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_source_name_14;
        CHECK_OBJECT(par_self);
        tmp_source_name_14 = par_self;
        tmp_assign_source_16 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_toplevelWidget);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1039;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_w == NULL);
        var_w = tmp_assign_source_16;
    }
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT(par_self);
        tmp_called_instance_7 = par_self;
        frame_2cda43e24accafc1f48c20cd1a643fed->m_frame.f_lineno = 1040;
        tmp_call_result_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_7, const_str_plain_reset);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1040;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2cda43e24accafc1f48c20cd1a643fed);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2cda43e24accafc1f48c20cd1a643fed);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2cda43e24accafc1f48c20cd1a643fed, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_2cda43e24accafc1f48c20cd1a643fed->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2cda43e24accafc1f48c20cd1a643fed, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2cda43e24accafc1f48c20cd1a643fed,
        type_description_1,
        par_self,
        par_filename,
        par_resource_suffix,
        var_base_dir,
        var_branchHandlers,
        var_document,
        var_root,
        var_version,
        var_tagname,
        var_actor,
        var_elem,
        var_w
    );


    // Release cached frame.
    if (frame_2cda43e24accafc1f48c20cd1a643fed == cache_frame_2cda43e24accafc1f48c20cd1a643fed) {
        Py_DECREF(frame_2cda43e24accafc1f48c20cd1a643fed);
    }
    cache_frame_2cda43e24accafc1f48c20cd1a643fed = NULL;

    assertFrameObject(frame_2cda43e24accafc1f48c20cd1a643fed);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_w);
    tmp_return_value = var_w;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_45_parse);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)par_filename);
    Py_DECREF(par_filename);
    par_filename = NULL;

    CHECK_OBJECT((PyObject *)var_base_dir);
    Py_DECREF(var_base_dir);
    var_base_dir = NULL;

    CHECK_OBJECT((PyObject *)var_branchHandlers);
    Py_DECREF(var_branchHandlers);
    var_branchHandlers = NULL;

    CHECK_OBJECT((PyObject *)var_document);
    Py_DECREF(var_document);
    var_document = NULL;

    CHECK_OBJECT((PyObject *)var_root);
    Py_DECREF(var_root);
    var_root = NULL;

    CHECK_OBJECT((PyObject *)var_version);
    Py_DECREF(var_version);
    var_version = NULL;

    Py_XDECREF(var_tagname);
    var_tagname = NULL;

    Py_XDECREF(var_actor);
    var_actor = NULL;

    Py_XDECREF(var_elem);
    var_elem = NULL;

    CHECK_OBJECT((PyObject *)var_w);
    Py_DECREF(var_w);
    var_w = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_filename);
    par_filename = NULL;

    Py_XDECREF(var_base_dir);
    var_base_dir = NULL;

    Py_XDECREF(var_branchHandlers);
    var_branchHandlers = NULL;

    Py_XDECREF(var_document);
    var_document = NULL;

    Py_XDECREF(var_root);
    var_root = NULL;

    Py_XDECREF(var_version);
    var_version = NULL;

    Py_XDECREF(var_tagname);
    var_tagname = NULL;

    Py_XDECREF(var_actor);
    var_actor = NULL;

    Py_XDECREF(var_elem);
    var_elem = NULL;

    Py_XDECREF(var_w);
    var_w = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_45_parse);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_resource_suffix);
    Py_DECREF(par_resource_suffix);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_resource_suffix);
    Py_DECREF(par_resource_suffix);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_PyQt5$uic$uiparser$$$function_46__form_layout_role(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_layout_position = python_pars[0];
    PyObject *var_role = NULL;
    struct Nuitka_FrameObject *frame_9e016243ac192c514357e3a8d512cc38;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_9e016243ac192c514357e3a8d512cc38 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_9e016243ac192c514357e3a8d512cc38, codeobj_9e016243ac192c514357e3a8d512cc38, module_PyQt5$uic$uiparser, sizeof(void *)+sizeof(void *));
    frame_9e016243ac192c514357e3a8d512cc38 = cache_frame_9e016243ac192c514357e3a8d512cc38;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9e016243ac192c514357e3a8d512cc38);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9e016243ac192c514357e3a8d512cc38) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_layout_position);
        tmp_subscribed_name_1 = par_layout_position;
        tmp_subscript_name_1 = const_int_pos_3;
        tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, 3);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1045;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1045;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

            if (unlikely(tmp_mvar_value_1 == NULL)) {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
            }

            if (tmp_mvar_value_1 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1046;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_2 = tmp_mvar_value_1;
            tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_QFormLayout);
            if (tmp_source_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1046;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_SpanningRole);
            Py_DECREF(tmp_source_name_1);
            if (tmp_assign_source_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1046;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            assert(var_role == NULL);
            var_role = tmp_assign_source_1;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT(par_layout_position);
            tmp_subscribed_name_2 = par_layout_position;
            tmp_subscript_name_2 = const_int_pos_1;
            tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, 1);
            if (tmp_compexpr_left_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1047;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_2 = const_int_pos_1;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
            Py_DECREF(tmp_compexpr_left_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1047;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_2;
                PyObject *tmp_source_name_3;
                PyObject *tmp_source_name_4;
                PyObject *tmp_mvar_value_2;
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                if (unlikely(tmp_mvar_value_2 == NULL)) {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                }

                if (tmp_mvar_value_2 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 1048;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_4 = tmp_mvar_value_2;
                tmp_source_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_QFormLayout);
                if (tmp_source_name_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1048;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_FieldRole);
                Py_DECREF(tmp_source_name_3);
                if (tmp_assign_source_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1048;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                assert(var_role == NULL);
                var_role = tmp_assign_source_2;
            }
            goto branch_end_2;
            branch_no_2:;
            {
                PyObject *tmp_assign_source_3;
                PyObject *tmp_source_name_5;
                PyObject *tmp_source_name_6;
                PyObject *tmp_mvar_value_3;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets);

                if (unlikely(tmp_mvar_value_3 == NULL)) {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QtWidgets);
                }

                if (tmp_mvar_value_3 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 663 ], 31, 0);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 1050;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_6 = tmp_mvar_value_3;
                tmp_source_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_QFormLayout);
                if (tmp_source_name_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1050;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_LabelRole);
                Py_DECREF(tmp_source_name_5);
                if (tmp_assign_source_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1050;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                assert(var_role == NULL);
                var_role = tmp_assign_source_3;
            }
            branch_end_2:;
        }
        branch_end_1:;
    }
    if (var_role == NULL) {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF(exception_type);
        exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "role");
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 1052;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_role;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9e016243ac192c514357e3a8d512cc38);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_9e016243ac192c514357e3a8d512cc38);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9e016243ac192c514357e3a8d512cc38);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9e016243ac192c514357e3a8d512cc38, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_9e016243ac192c514357e3a8d512cc38->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9e016243ac192c514357e3a8d512cc38, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9e016243ac192c514357e3a8d512cc38,
        type_description_1,
        par_layout_position,
        var_role
    );


    // Release cached frame.
    if (frame_9e016243ac192c514357e3a8d512cc38 == cache_frame_9e016243ac192c514357e3a8d512cc38) {
        Py_DECREF(frame_9e016243ac192c514357e3a8d512cc38);
    }
    cache_frame_9e016243ac192c514357e3a8d512cc38 = NULL;

    assertFrameObject(frame_9e016243ac192c514357e3a8d512cc38);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_46__form_layout_role);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_role);
    var_role = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_role);
    var_role = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser$$$function_46__form_layout_role);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_layout_position);
    Py_DECREF(par_layout_position);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_layout_position);
    Py_DECREF(par_layout_position);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_10___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_10___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_fd85e1e33893df4fefabac55226f6627,
#endif
        codeobj_a5d6da18d4fc5a14ca108bf54b48231e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_11_uniqueName() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_11_uniqueName,
        const_str_plain_uniqueName,
#if PYTHON_VERSION >= 300
        const_str_digest_3cdde86d7672d3e5eccfb1a4e9488768,
#endif
        codeobj_5ea471e84fc54c527294bdca9d0d752a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        const_str_digest_5480cd9990f0e99fdeb8be21e41fe513,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_12_reset() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_12_reset,
        const_str_plain_reset,
#if PYTHON_VERSION >= 300
        const_str_digest_6d71cbfde3f26c93c13431a89e9c5250,
#endif
        codeobj_67278f08fcfa8f9c8fa60b897cd17658,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_13_setupObject(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_13_setupObject,
        const_str_plain_setupObject,
#if PYTHON_VERSION >= 300
        const_str_digest_9270090f135b77d267e2b4cc9ded6732,
#endif
        codeobj_9c090c292524cf6edb0bcbeab7a68c03,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_14_getProperty() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_14_getProperty,
        const_str_plain_getProperty,
#if PYTHON_VERSION >= 300
        const_str_digest_9ef75a40156841d8c7e26edd14ca72ae,
#endif
        codeobj_d5e8b84fe6eaf081c076b23dd780c667,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_15_createWidget() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_15_createWidget,
        const_str_plain_createWidget,
#if PYTHON_VERSION >= 300
        const_str_digest_262a47eb39a0fa2d22b104b5c2c3b066,
#endif
        codeobj_2debc51c32a41ce980416edeb6da9de2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_16_handleHeaderView() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_16_handleHeaderView,
        const_str_plain_handleHeaderView,
#if PYTHON_VERSION >= 300
        const_str_digest_f22bebc168b7d8ed6b55ed0d053513e0,
#endif
        codeobj_6a46948e6053641a0ea133769c1802ce,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_17_createSpacer() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_17_createSpacer,
        const_str_plain_createSpacer,
#if PYTHON_VERSION >= 300
        const_str_digest_d2fbcd2f684bdeb7c036ce7f430e21b6,
#endif
        codeobj_50cfdedaac028bc492c5aef6d5586946,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_18_createLayout() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_18_createLayout,
        const_str_plain_createLayout,
#if PYTHON_VERSION >= 300
        const_str_digest_b912f583a917a493abbf8d46781f9053,
#endif
        codeobj_8734e569a964cb39939666b17f34aad7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_19_configureLayout() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_19_configureLayout,
        const_str_plain_configureLayout,
#if PYTHON_VERSION >= 300
        const_str_digest_b793113dcb397eec5a91e1173742188e,
#endif
        codeobj_9f61805490c624f2b75db56aa25711bf,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_1__parse_alignment() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_1__parse_alignment,
        const_str_plain__parse_alignment,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_20451d88b4de7c0213215426dbdbbda3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        const_str_digest_865923a05ccab2c4f6b7a197cb0dddb6,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_20_setArray() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_20_setArray,
        const_str_plain_setArray,
#if PYTHON_VERSION >= 300
        const_str_digest_d535eaef61094327aa1026ba7b302dc3,
#endif
        codeobj_0aeb379c67eb5b0575ee08b11d674192,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_21_disableSorting() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_21_disableSorting,
        const_str_plain_disableSorting,
#if PYTHON_VERSION >= 300
        const_str_digest_9217665ed117cafee377d2e94bb84921,
#endif
        codeobj_3602899ccc84138b8c0fa9694bc7a3c7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_22_handleItem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_22_handleItem,
        const_str_plain_handleItem,
#if PYTHON_VERSION >= 300
        const_str_digest_4c143f3e7c99b8cfb3d059979f943c26,
#endif
        codeobj_f58e1cffaceb1c421c5a7093c7559ff1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_23_addAction() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_23_addAction,
        const_str_plain_addAction,
#if PYTHON_VERSION >= 300
        const_str_digest_45b12fe1ec97ee0dba8b2e57e629b25d,
#endif
        codeobj_20f113b58c5f20530054cc284c15f53d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_24_any_i18n() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_24_any_i18n,
        const_str_plain_any_i18n,
#if PYTHON_VERSION >= 300
        const_str_digest_716fa675c51a4763e154b34613be1a48,
#endif
        codeobj_fceaa942bd64bf26eecf6afefe924fec,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        const_str_digest_a8a6bd741afb87886de41d69dd3c4f2d,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_25_createWidgetItem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_25_createWidgetItem,
        const_str_plain_createWidgetItem,
#if PYTHON_VERSION >= 300
        const_str_digest_08f4331807e37aaa29acae8ee7261be4,
#endif
        codeobj_ecc96e93ac4bafafc8f5e92ac6000e4b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        const_str_digest_572e435e50adc23dbb2f3687384284ab,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_26_addHeader() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_26_addHeader,
        const_str_plain_addHeader,
#if PYTHON_VERSION >= 300
        const_str_digest_d35bd4063b7190ff1a4439d1e8f23b29,
#endif
        codeobj_caf3f416bf939473dd3b64825dfb8d47,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_27_setZOrder() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_27_setZOrder,
        const_str_plain_setZOrder,
#if PYTHON_VERSION >= 300
        const_str_digest_f61bca08bfc72a176162ab1bf09cdb19,
#endif
        codeobj_f2a21b93ded1596f71bc4c83a78b7250,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_28_createAction() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_28_createAction,
        const_str_plain_createAction,
#if PYTHON_VERSION >= 300
        const_str_digest_0744c8b0e87f37fc06b224185eda60ef,
#endif
        codeobj_d97a9867ff3a899ff35cb618f6f1a94f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_29_createActionGroup() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_29_createActionGroup,
        const_str_plain_createActionGroup,
#if PYTHON_VERSION >= 300
        const_str_digest_8453bcf550b723650709ee663bd6e4d6,
#endif
        codeobj_454093e34e4bdd10dcf528eaba6cb663,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_2__layout_position() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_2__layout_position,
        const_str_plain__layout_position,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_0ee7bcc3b8ebd22fea9e29d15ece9ab4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        const_str_digest_460add3f2fc1bfb3ad294aea7c05117c,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_30_traverseWidgetTree() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_30_traverseWidgetTree,
        const_str_plain_traverseWidgetTree,
#if PYTHON_VERSION >= 300
        const_str_digest_6249efb741b0fb6b9be6449647a36de6,
#endif
        codeobj_05e316213848ea1025a618735175d0b2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_31_createUserInterface() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_31_createUserInterface,
        const_str_plain_createUserInterface,
#if PYTHON_VERSION >= 300
        const_str_digest_5acaa0e70bf910a8d08fcfccccadaa8c,
#endif
        codeobj_12fd9871d96e205cf0be3fcfe53e9a38,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_32_addActions() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_32_addActions,
        const_str_plain_addActions,
#if PYTHON_VERSION >= 300
        const_str_digest_9a41cae06c3fe424bbe50b44c89cd454,
#endif
        codeobj_33cd72d6fccc4cbebda5e8de7a2c6b35,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_33_setDelayedProps() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_33_setDelayedProps,
        const_str_plain_setDelayedProps,
#if PYTHON_VERSION >= 300
        const_str_digest_923ef44bf80f96193615a804a6a69929,
#endif
        codeobj_3009233ee6a3f860b86f88655dd73c46,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_34_setBuddies() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_34_setBuddies,
        const_str_plain_setBuddies,
#if PYTHON_VERSION >= 300
        const_str_digest_cb6fa27e118f1c8e5a09ad2d9734c341,
#endif
        codeobj_97f6c3536969ff2249c878e9ce9b4d35,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_35_classname() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_35_classname,
        const_str_plain_classname,
#if PYTHON_VERSION >= 300
        const_str_digest_030fb6874dacc73e7238010567f6f810,
#endif
        codeobj_e0500f79127391fd295472fef1d638f2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_36_setContext() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        const_str_plain_setContext,
#if PYTHON_VERSION >= 300
        const_str_digest_748f503b941eaf25a96f0608b1afa652,
#endif
        codeobj_e4d16b247c01057a64ef9e6006e36b12,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        const_str_digest_6d62fde1c7144eb954a22e7133e63741,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_37_readDefaults() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_37_readDefaults,
        const_str_plain_readDefaults,
#if PYTHON_VERSION >= 300
        const_str_digest_8d04cde8e249f5ecc6a6436471207d1f,
#endif
        codeobj_fac6ba4dcfcf362b269d656d5c530988,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_38_setTaborder() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_38_setTaborder,
        const_str_plain_setTaborder,
#if PYTHON_VERSION >= 300
        const_str_digest_a9757f1823576260a744f1c5953e3c4d,
#endif
        codeobj_3bdb10fc4d552176f9e1a3f94d9a6a04,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_39_readResources() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_39_readResources,
        const_str_plain_readResources,
#if PYTHON_VERSION >= 300
        const_str_digest_7e7a747a621069ae73d59f0e9254b5db,
#endif
        codeobj_df852d9d25c89bf084365e94b882b419,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        const_str_digest_bfceee1376ebbffaee68ba1980d9c486,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_3_push() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_3_push,
        const_str_plain_push,
#if PYTHON_VERSION >= 300
        const_str_digest_9ec655c186ef3cb2461e08a7bff9a8dc,
#endif
        codeobj_d730a7937bd8605d124cc743ef46d547,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_40_createConnections() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_40_createConnections,
        const_str_plain_createConnections,
#if PYTHON_VERSION >= 300
        const_str_digest_ca295fcc08de80c67d850ba455907a8b,
#endif
        codeobj_afda8c4f92064c7c5c00f807c770732c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_40_createConnections$$$function_1_name2object() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_40_createConnections$$$function_1_name2object,
        const_str_plain_name2object,
#if PYTHON_VERSION >= 300
        const_str_digest_bc1f6041ef8bbbd1432e73c0d64228be,
#endif
        codeobj_be9d4fa84374457005c62785746c4339,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_41_customWidgets() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_41_customWidgets,
        const_str_plain_customWidgets,
#if PYTHON_VERSION >= 300
        const_str_digest_9ed5685f4fa965cd3b72c775342f502e,
#endif
        codeobj_9aa09f7f0c2ce4dd0a5cae2af6c849cd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_41_customWidgets$$$function_1_header2module() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_41_customWidgets$$$function_1_header2module,
        const_str_plain_header2module,
#if PYTHON_VERSION >= 300
        const_str_digest_bba21dfbbd60e63084b6d163cd34049c,
#endif
        codeobj_411ff0cc561a8e75a724f98227ff28de,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        const_str_digest_136d91415b51aaa5e5a8cc9dd6e8f212,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_42_createToplevelWidget() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_42_createToplevelWidget,
        const_str_plain_createToplevelWidget,
#if PYTHON_VERSION >= 300
        const_str_digest_bd21ceaf4d3eed5d1250b347c8589985,
#endif
        codeobj_b7d4bb23b51d5fadacf2122065c59fd7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_43_buttonGroups() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_43_buttonGroups,
        const_str_plain_buttonGroups,
#if PYTHON_VERSION >= 300
        const_str_digest_a237f7620def8531919f60154ef3b11a,
#endif
        codeobj_fa09b1e02f70623fe6b82b24ac819360,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_44_finalize() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        const_str_plain_finalize,
#if PYTHON_VERSION >= 300
        const_str_digest_bd4c096f6d6d24996c987abf0fcff08e,
#endif
        codeobj_7194c67e68af34f0817fcb089369a02f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_45_parse() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_45_parse,
        const_str_plain_parse,
#if PYTHON_VERSION >= 300
        const_str_digest_a9160ed77ff1cfbfc34edf97a5d225d2,
#endif
        codeobj_2cda43e24accafc1f48c20cd1a643fed,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_46__form_layout_role() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_46__form_layout_role,
        const_str_plain__form_layout_role,
#if PYTHON_VERSION >= 300
        const_str_digest_6520b8ef2454df66a7574994488b7177,
#endif
        codeobj_9e016243ac192c514357e3a8d512cc38,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_4_popLayout() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_4_popLayout,
        const_str_plain_popLayout,
#if PYTHON_VERSION >= 300
        const_str_digest_5f33924e786752a1b16f3fa0623d9ebe,
#endif
        codeobj_8385c5f69a9dad01aa54859cedd24496,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_5_popWidget() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_5_popWidget,
        const_str_plain_popWidget,
#if PYTHON_VERSION >= 300
        const_str_digest_388c13b496d9f0d445c57c79d06ec868,
#endif
        codeobj_5f05f090ce8fb98e4df349a17da4f433,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_6_peek() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_6_peek,
        const_str_plain_peek,
#if PYTHON_VERSION >= 300
        const_str_digest_9eb71d06406e6df9ce9a7d61186f5141,
#endif
        codeobj_2d74b7e1e2dfa606ea26dcf6e820cec3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_7_topIsLayout() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_7_topIsLayout,
        const_str_plain_topIsLayout,
#if PYTHON_VERSION >= 300
        const_str_digest_49057ba07775359ea68b084a8a6d4cb3,
#endif
        codeobj_dedda129c398d61b49fc9f812c597527,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_8_topIsLayoutWidget() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_8_topIsLayoutWidget,
        const_str_plain_topIsLayoutWidget,
#if PYTHON_VERSION >= 300
        const_str_digest_4464fc3d3e5c3d0815748277863f12d2,
#endif
        codeobj_f5e7d4f2fe69bf69eec68dbd469a1407,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_9___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PyQt5$uic$uiparser$$$function_9___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_8e75a3f9bd8e7aa4de8c51b615c6cc63,
#endif
        codeobj_8a20804ebe99308633c3bf13541596ad,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PyQt5$uic$uiparser,
        const_str_digest_fcf3816197585187164b4224546fc9de,
        0
    );

    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_PyQt5$uic$uiparser =
{
    PyModuleDef_HEAD_INIT,
    NULL,                /* m_name, filled later */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

extern PyObject *const_str_plain___compiled__;

extern PyObject *const_str_plain___package__;
extern PyObject *const_str_empty;

#if PYTHON_VERSION >= 300
extern PyObject *const_str_dot;
extern PyObject *const_str_plain___loader__;
#endif

#if PYTHON_VERSION >= 340
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain__initializing;
extern PyObject *const_str_plain_submodule_search_locations;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill

function_impl_code functable_PyQt5$uic$uiparser[] = {
    impl_PyQt5$uic$uiparser$$$function_40_createConnections$$$function_1_name2object,
    impl_PyQt5$uic$uiparser$$$function_41_customWidgets$$$function_1_header2module,
    impl_PyQt5$uic$uiparser$$$function_1__parse_alignment,
    impl_PyQt5$uic$uiparser$$$function_2__layout_position,
    impl_PyQt5$uic$uiparser$$$function_3_push,
    impl_PyQt5$uic$uiparser$$$function_4_popLayout,
    impl_PyQt5$uic$uiparser$$$function_5_popWidget,
    impl_PyQt5$uic$uiparser$$$function_6_peek,
    impl_PyQt5$uic$uiparser$$$function_7_topIsLayout,
    impl_PyQt5$uic$uiparser$$$function_8_topIsLayoutWidget,
    impl_PyQt5$uic$uiparser$$$function_9___init__,
    impl_PyQt5$uic$uiparser$$$function_10___init__,
    impl_PyQt5$uic$uiparser$$$function_11_uniqueName,
    impl_PyQt5$uic$uiparser$$$function_12_reset,
    impl_PyQt5$uic$uiparser$$$function_13_setupObject,
    impl_PyQt5$uic$uiparser$$$function_14_getProperty,
    impl_PyQt5$uic$uiparser$$$function_15_createWidget,
    impl_PyQt5$uic$uiparser$$$function_16_handleHeaderView,
    impl_PyQt5$uic$uiparser$$$function_17_createSpacer,
    impl_PyQt5$uic$uiparser$$$function_18_createLayout,
    impl_PyQt5$uic$uiparser$$$function_19_configureLayout,
    impl_PyQt5$uic$uiparser$$$function_20_setArray,
    impl_PyQt5$uic$uiparser$$$function_21_disableSorting,
    impl_PyQt5$uic$uiparser$$$function_22_handleItem,
    impl_PyQt5$uic$uiparser$$$function_23_addAction,
    impl_PyQt5$uic$uiparser$$$function_24_any_i18n,
    impl_PyQt5$uic$uiparser$$$function_25_createWidgetItem,
    impl_PyQt5$uic$uiparser$$$function_26_addHeader,
    impl_PyQt5$uic$uiparser$$$function_27_setZOrder,
    impl_PyQt5$uic$uiparser$$$function_28_createAction,
    impl_PyQt5$uic$uiparser$$$function_29_createActionGroup,
    impl_PyQt5$uic$uiparser$$$function_30_traverseWidgetTree,
    impl_PyQt5$uic$uiparser$$$function_31_createUserInterface,
    impl_PyQt5$uic$uiparser$$$function_32_addActions,
    impl_PyQt5$uic$uiparser$$$function_33_setDelayedProps,
    impl_PyQt5$uic$uiparser$$$function_34_setBuddies,
    impl_PyQt5$uic$uiparser$$$function_35_classname,
    NULL,
    impl_PyQt5$uic$uiparser$$$function_37_readDefaults,
    impl_PyQt5$uic$uiparser$$$function_38_setTaborder,
    impl_PyQt5$uic$uiparser$$$function_39_readResources,
    impl_PyQt5$uic$uiparser$$$function_40_createConnections,
    impl_PyQt5$uic$uiparser$$$function_41_customWidgets,
    impl_PyQt5$uic$uiparser$$$function_42_createToplevelWidget,
    impl_PyQt5$uic$uiparser$$$function_43_buttonGroups,
    NULL,
    impl_PyQt5$uic$uiparser$$$function_45_parse,
    impl_PyQt5$uic$uiparser$$$function_46__form_layout_role,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        PyErr_Format(PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_PyQt5$uic$uiparser;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        PyErr_Format(PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = PyTuple_New(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = PyTuple_New(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && ERROR_OCCURRED()) {
        return NULL;
    }

    if (offset > sizeof(functable_PyQt5$uic$uiparser) || offset < 0) {
        PyErr_Format(PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!ERROR_OCCURRED());

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!ERROR_OCCURRED());
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!ERROR_OCCURRED());

    PyCodeObject *code_object = MAKE_CODEOBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        argnames,
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    // TODO: More stuff needed for Python3, best to re-order arguments of MAKE_CODEOBJECT.
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_PyQt5$uic$uiparser[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_PyQt5$uic$uiparser,
        doc,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_PyQt5$uic$uiparser(char const *module_full_name) {
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if (_init_done) {
        return module_PyQt5$uic$uiparser;
    } else {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // May have to activate constants blob.
#if defined(_NUITKA_CONSTANTS_FROM_RESOURCE)
    loadConstantsResource();
#endif

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
    PRINT_STRING("PyQt5.uic.uiparser: Calling setupMetaPathBasedLoader().\n");
#endif
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    PRINT_STRING("PyQt5.uic.uiparser: Calling createModuleConstants().\n");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    PRINT_STRING("PyQt5.uic.uiparser: Calling createModuleCodeObjects().\n");
#endif
    createModuleCodeObjects();

    // PRINT_STRING("in initPyQt5$uic$uiparser\n");

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_PyQt5$uic$uiparser = Py_InitModule4(
        module_full_name,        // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No "__doc__" is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    mdef_PyQt5$uic$uiparser.m_name = module_full_name;
    module_PyQt5$uic$uiparser = PyModule_Create(&mdef_PyQt5$uic$uiparser);
#endif

    moduledict_PyQt5$uic$uiparser = MODULE_DICT(module_PyQt5$uic$uiparser);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    {
        PyObject *function_tables = PyObject_GetAttrString((PyObject *)builtin_module, "compiled_function_tables");
        if (function_tables == NULL)
        {
            DROP_ERROR_OCCURRED();
            function_tables = PyDict_New();
        }
        PyObject_SetAttrString((PyObject *)builtin_module, "compiled_function_tables", function_tables);
        PyObject *funcs = PyTuple_New(2);
        PyTuple_SetItem(funcs, 0, PyCFunction_New(&_method_def_reduce_compiled_function, NULL));
        PyTuple_SetItem(funcs, 1, PyCFunction_New(&_method_def_create_compiled_function, NULL));
        PyDict_SetItemString(function_tables, module_full_name, funcs);
    }
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_PyQt5$uic$uiparser,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_PyQt5$uic$uiparser,
            (Nuitka_StringObject *)const_str_plain___package__,
            const_str_empty
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_PyQt5$uic$uiparser,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL)
        {
            UPDATE_STRING_DICT1(
                moduledict_PyQt5$uic$uiparser,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1)
        {
            UPDATE_STRING_DICT1(
                moduledict_PyQt5$uic$uiparser,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_PyQt5$uic$uiparser);

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyDict_SetItemString(PyImport_GetModuleDict(), module_full_name, module_PyQt5$uic$uiparser);
        assert(r != -1);
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL)
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

#if PYTHON_VERSION >= 300
    UPDATE_STRING_DICT0(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);
#endif

#if PYTHON_VERSION >= 340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = PyImport_ImportModule("importlib._bootstrap");
        CHECK_OBJECT(bootstrap_module);
        PyObject *module_spec_class = PyObject_GetAttrString(bootstrap_module, "ModuleSpec");
        Py_DECREF(bootstrap_module);

        PyObject *args[] = {
            GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___name__),
            (PyObject *)&Nuitka_Loader_Type
        };

        PyObject *spec_value = CALL_FUNCTION_WITH_ARGS2(
            module_spec_class,
            args
        );
        Py_DECREF(module_spec_class);

        // We can assume this to never fail, or else we are in trouble anyway.
        CHECK_OBJECT(spec_value);

// For packages set the submodule search locations as well, even if to empty
// list, so investigating code will consider it a package.
#if 0
        SET_ATTRIBUTE(spec_value, const_str_plain_submodule_search_locations, PyList_New(0));
#endif

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    struct Nuitka_FrameObject *frame_79cb6a44225af627fb79455c2811402d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_PyQt5$uic$uiparser_105 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_cd0098c5d3c660c3b00878103fcb2052_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_cd0098c5d3c660c3b00878103fcb2052_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *locals_PyQt5$uic$uiparser_164 = NULL;
    struct Nuitka_FrameObject *frame_7814d7f36e0a436b0414dc6ac25cb1ef_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_7814d7f36e0a436b0414dc6ac25cb1ef_3 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *locals_PyQt5$uic$uiparser_175 = NULL;
    struct Nuitka_FrameObject *frame_568bd259457e2cbaeb46d9eb691f9da4_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_568bd259457e2cbaeb46d9eb691f9da4_4 = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2);
    }
    // Frame without reuse.
    frame_79cb6a44225af627fb79455c2811402d = MAKE_MODULE_FRAME(codeobj_79cb6a44225af627fb79455c2811402d, module_PyQt5$uic$uiparser);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack(frame_79cb6a44225af627fb79455c2811402d);
    assert(Py_REFCNT(frame_79cb6a44225af627fb79455c2811402d) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        PyObject *tmp_mvar_value_1;
        tmp_assattr_name_1 = module_filename_obj;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___spec__);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__);
        }

        CHECK_OBJECT(tmp_mvar_value_1);
        tmp_assattr_target_1 = tmp_mvar_value_1;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_origin, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        PyObject *tmp_mvar_value_2;
        tmp_assattr_name_2 = Py_True;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___spec__);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__);
        }

        CHECK_OBJECT(tmp_mvar_value_2);
        tmp_assattr_target_2 = tmp_mvar_value_2;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_has_location, tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_sys;
        tmp_globals_name_1 = (PyObject *)moduledict_PyQt5$uic$uiparser;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 41;
        tmp_assign_source_4 = IMPORT_MODULE5(tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1);
        assert(!(tmp_assign_source_4 == NULL));
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_name_2;
        PyObject *tmp_locals_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = const_str_plain_logging;
        tmp_globals_name_2 = (PyObject *)moduledict_PyQt5$uic$uiparser;
        tmp_locals_name_2 = Py_None;
        tmp_fromlist_name_2 = Py_None;
        tmp_level_name_2 = const_int_0;
        frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 42;
        tmp_assign_source_5 = IMPORT_MODULE5(tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_logging, tmp_assign_source_5);
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_name_3;
        PyObject *tmp_globals_name_3;
        PyObject *tmp_locals_name_3;
        PyObject *tmp_fromlist_name_3;
        PyObject *tmp_level_name_3;
        tmp_name_name_3 = const_str_plain_os;
        tmp_globals_name_3 = (PyObject *)moduledict_PyQt5$uic$uiparser;
        tmp_locals_name_3 = Py_None;
        tmp_fromlist_name_3 = Py_None;
        tmp_level_name_3 = const_int_0;
        frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 43;
        tmp_assign_source_6 = IMPORT_MODULE5(tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 43;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_name_name_4;
        PyObject *tmp_globals_name_4;
        PyObject *tmp_locals_name_4;
        PyObject *tmp_fromlist_name_4;
        PyObject *tmp_level_name_4;
        tmp_name_name_4 = const_str_plain_re;
        tmp_globals_name_4 = (PyObject *)moduledict_PyQt5$uic$uiparser;
        tmp_locals_name_4 = Py_None;
        tmp_fromlist_name_4 = Py_None;
        tmp_level_name_4 = const_int_0;
        frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 44;
        tmp_assign_source_7 = IMPORT_MODULE5(tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_re, tmp_assign_source_7);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_name_name_5;
        PyObject *tmp_globals_name_5;
        PyObject *tmp_locals_name_5;
        PyObject *tmp_fromlist_name_5;
        PyObject *tmp_level_name_5;
        tmp_name_name_5 = const_str_digest_04d67503345d6d64752f0c9fc2a764c3;
        tmp_globals_name_5 = (PyObject *)moduledict_PyQt5$uic$uiparser;
        tmp_locals_name_5 = Py_None;
        tmp_fromlist_name_5 = const_tuple_str_plain_parse_str_plain_SubElement_tuple;
        tmp_level_name_5 = const_int_0;
        frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 45;
        tmp_assign_source_8 = IMPORT_MODULE5(tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_1__module == NULL);
        tmp_import_from_1__module = tmp_assign_source_8;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_import_name_from_1;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_1 = tmp_import_from_1__module;
        tmp_assign_source_9 = IMPORT_NAME(tmp_import_name_from_1, const_str_plain_parse);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_parse, tmp_assign_source_9);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_2;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_2 = tmp_import_from_1__module;
        tmp_assign_source_10 = IMPORT_NAME(tmp_import_name_from_2, const_str_plain_SubElement);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_SubElement, tmp_assign_source_10);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT((PyObject *)tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT((PyObject *)tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;

    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_3;
        PyObject *tmp_name_name_6;
        PyObject *tmp_globals_name_6;
        PyObject *tmp_locals_name_6;
        PyObject *tmp_fromlist_name_6;
        PyObject *tmp_level_name_6;
        tmp_name_name_6 = const_str_plain_objcreator;
        tmp_globals_name_6 = (PyObject *)moduledict_PyQt5$uic$uiparser;
        tmp_locals_name_6 = Py_None;
        tmp_fromlist_name_6 = const_tuple_str_plain_QObjectCreator_tuple;
        tmp_level_name_6 = const_int_pos_1;
        frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 47;
        tmp_import_name_from_3 = IMPORT_MODULE5(tmp_name_name_6, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6, tmp_level_name_6);
        if (tmp_import_name_from_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_3)) {
           tmp_assign_source_11 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_3,
                (PyObject *)moduledict_PyQt5$uic$uiparser,
                const_str_plain_QObjectCreator,
                const_int_pos_1
            );
        } else {
           tmp_assign_source_11 = IMPORT_NAME(tmp_import_name_from_3, const_str_plain_QObjectCreator);
        }

        Py_DECREF(tmp_import_name_from_3);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QObjectCreator, tmp_assign_source_11);
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_import_name_from_4;
        PyObject *tmp_name_name_7;
        PyObject *tmp_globals_name_7;
        PyObject *tmp_locals_name_7;
        PyObject *tmp_fromlist_name_7;
        PyObject *tmp_level_name_7;
        tmp_name_name_7 = const_str_plain_properties;
        tmp_globals_name_7 = (PyObject *)moduledict_PyQt5$uic$uiparser;
        tmp_locals_name_7 = Py_None;
        tmp_fromlist_name_7 = const_tuple_str_plain_Properties_tuple;
        tmp_level_name_7 = const_int_pos_1;
        frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 48;
        tmp_import_name_from_4 = IMPORT_MODULE5(tmp_name_name_7, tmp_globals_name_7, tmp_locals_name_7, tmp_fromlist_name_7, tmp_level_name_7);
        if (tmp_import_name_from_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_4)) {
           tmp_assign_source_12 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_4,
                (PyObject *)moduledict_PyQt5$uic$uiparser,
                const_str_plain_Properties,
                const_int_pos_1
            );
        } else {
           tmp_assign_source_12 = IMPORT_NAME(tmp_import_name_from_4, const_str_plain_Properties);
        }

        Py_DECREF(tmp_import_name_from_4);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_Properties, tmp_assign_source_12);
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_logging);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_logging);
        }

        if (tmp_mvar_value_3 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 928 ], 29, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 51;

            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_3;
        frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 51;
        tmp_assign_source_13 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_getLogger, &PyTuple_GET_ITEM(const_tuple_str_digest_2598b7d5190e4e17266e5229aa9e007c_tuple, 0));

        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_logger, tmp_assign_source_13);
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_4;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_logger);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_logger);
        }

        CHECK_OBJECT(tmp_mvar_value_4);
        tmp_source_name_1 = tmp_mvar_value_4;
        tmp_assign_source_14 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_debug);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 52;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_DEBUG, tmp_assign_source_14);
    }
    {
        PyObject *tmp_assign_source_15;
        tmp_assign_source_15 = Py_None;
        UPDATE_STRING_DICT0(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtCore, tmp_assign_source_15);
    }
    {
        PyObject *tmp_assign_source_16;
        tmp_assign_source_16 = Py_None;
        UPDATE_STRING_DICT0(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_QtWidgets, tmp_assign_source_16);
    }
    {
        PyObject *tmp_assign_source_17;
        tmp_assign_source_17 = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_1__parse_alignment();



        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain__parse_alignment, tmp_assign_source_17);
    }
    {
        PyObject *tmp_assign_source_18;
        tmp_assign_source_18 = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_2__layout_position();



        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain__layout_position, tmp_assign_source_18);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_dircall_arg1_1;
        tmp_dircall_arg1_1 = const_tuple_type_list_tuple;
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_19 = impl___internal__$$$function_1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;

            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_19;
    }
    {
        PyObject *tmp_assign_source_20;
        tmp_assign_source_20 = PyDict_New();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_20;
    }
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_metaclass_name_1;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_name_1;
        PyObject *tmp_dict_name_2;
        PyObject *tmp_key_name_2;
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_bases_name_1;
        tmp_key_name_1 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_name_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_1, tmp_key_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;

            goto try_except_handler_2;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_name_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_name_2 = const_str_plain_metaclass;
        tmp_metaclass_name_1 = DICT_GET_ITEM(tmp_dict_name_2, tmp_key_name_2);
        if (tmp_metaclass_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;

            goto try_except_handler_2;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_class_creation_1__bases);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;

            goto try_except_handler_2;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_2;
        } else {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_subscribed_name_1 = tmp_class_creation_1__bases;
        tmp_subscript_name_1 = const_int_0;
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, 0);
        if (tmp_type_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;

            goto try_except_handler_2;
        }
        tmp_metaclass_name_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_metaclass_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;

            goto try_except_handler_2;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_name_1);
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_bases_name_1 = tmp_class_creation_1__bases;
        tmp_assign_source_21 = SELECT_METACLASS(tmp_metaclass_name_1, tmp_bases_name_1);
        Py_DECREF(tmp_metaclass_name_1);
        if (tmp_assign_source_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;

            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_21;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_key_name_3;
        PyObject *tmp_dict_name_3;
        tmp_key_name_3 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_name_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_3, tmp_key_name_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;

            goto try_except_handler_2;
        }
        tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;

            goto try_except_handler_2;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_source_name_2 = tmp_class_creation_1__metaclass;
        tmp_res = PyObject_HasAttr(tmp_source_name_2, const_str_plain___prepare__);
        tmp_condition_result_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_22;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_kw_name_1;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_source_name_3 = tmp_class_creation_1__metaclass;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain___prepare__);
            if (tmp_called_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 105;

                goto try_except_handler_2;
            }
            tmp_tuple_element_1 = const_str_plain_WidgetStack;
            tmp_args_name_1 = PyTuple_New(2);
            Py_INCREF(tmp_tuple_element_1);
            PyTuple_SET_ITEM(tmp_args_name_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_1 = tmp_class_creation_1__bases;
            Py_INCREF(tmp_tuple_element_1);
            PyTuple_SET_ITEM(tmp_args_name_1, 1, tmp_tuple_element_1);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kw_name_1 = tmp_class_creation_1__class_decl_dict;
            frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 105;
            tmp_assign_source_22 = CALL_FUNCTION(tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_name_1);
            if (tmp_assign_source_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 105;

                goto try_except_handler_2;
            }
            assert(tmp_class_creation_1__prepared == NULL);
            tmp_class_creation_1__prepared = tmp_assign_source_22;
        }
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_source_name_4;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_source_name_4 = tmp_class_creation_1__prepared;
            tmp_res = PyObject_HasAttr(tmp_source_name_4, const_str_plain___getitem__);
            tmp_operand_name_1 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 105;

                goto try_except_handler_2;
            }
            tmp_condition_result_5 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
                goto branch_yes_3;
            } else {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_raise_value_1;
                PyObject *tmp_left_name_1;
                PyObject *tmp_right_name_1;
                PyObject *tmp_tuple_element_2;
                PyObject *tmp_getattr_target_1;
                PyObject *tmp_getattr_attr_1;
                PyObject *tmp_getattr_default_1;
                PyObject *tmp_source_name_5;
                PyObject *tmp_type_arg_2;
                tmp_raise_type_1 = PyExc_TypeError;
                tmp_left_name_1 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT(tmp_class_creation_1__metaclass);
                tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
                tmp_getattr_attr_1 = const_str_plain___name__;
                tmp_getattr_default_1 = const_str_angle_metaclass;
                tmp_tuple_element_2 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
                if (tmp_tuple_element_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 105;

                    goto try_except_handler_2;
                }
                tmp_right_name_1 = PyTuple_New(2);
                PyTuple_SET_ITEM(tmp_right_name_1, 0, tmp_tuple_element_2);
                CHECK_OBJECT(tmp_class_creation_1__prepared);
                tmp_type_arg_2 = tmp_class_creation_1__prepared;
                tmp_source_name_5 = BUILTIN_TYPE1(tmp_type_arg_2);
                assert(!(tmp_source_name_5 == NULL));
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain___name__);
                Py_DECREF(tmp_source_name_5);
                if (tmp_tuple_element_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_right_name_1);

                    exception_lineno = 105;

                    goto try_except_handler_2;
                }
                PyTuple_SET_ITEM(tmp_right_name_1, 1, tmp_tuple_element_2);
                tmp_raise_value_1 = BINARY_OPERATION_MOD_UNICODE_TUPLE(tmp_left_name_1, tmp_right_name_1);
                Py_DECREF(tmp_right_name_1);
                if (tmp_raise_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 105;

                    goto try_except_handler_2;
                }
                exception_type = tmp_raise_type_1;
                Py_INCREF(tmp_raise_type_1);
                exception_value = tmp_raise_value_1;
                exception_lineno = 105;
                RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

                goto try_except_handler_2;
            }
            branch_no_3:;
        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_23;
            tmp_assign_source_23 = PyDict_New();
            assert(tmp_class_creation_1__prepared == NULL);
            tmp_class_creation_1__prepared = tmp_assign_source_23;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_assign_source_24;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_PyQt5$uic$uiparser_105 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_2598b7d5190e4e17266e5229aa9e007c;
        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_105, const_str_plain___module__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;

            goto try_except_handler_4;
        }
        tmp_dictset_value = const_str_plain_WidgetStack;
        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_105, const_str_plain___qualname__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;

            goto try_except_handler_4;
        }
        MAKE_OR_REUSE_FRAME(cache_frame_cd0098c5d3c660c3b00878103fcb2052_2, codeobj_cd0098c5d3c660c3b00878103fcb2052, module_PyQt5$uic$uiparser, sizeof(void *));
        frame_cd0098c5d3c660c3b00878103fcb2052_2 = cache_frame_cd0098c5d3c660c3b00878103fcb2052_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_cd0098c5d3c660c3b00878103fcb2052_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_cd0098c5d3c660c3b00878103fcb2052_2) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_105, const_str_plain_topwidget, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 106;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_3_push();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_105, const_str_plain_push, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_4_popLayout();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_105, const_str_plain_popLayout, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_5_popWidget();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_105, const_str_plain_popWidget, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_6_peek();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_105, const_str_plain_peek, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_7_topIsLayout();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_105, const_str_plain_topIsLayout, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_8_topIsLayoutWidget();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_105, const_str_plain_topIsLayoutWidget, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_cd0098c5d3c660c3b00878103fcb2052_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_cd0098c5d3c660c3b00878103fcb2052_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_cd0098c5d3c660c3b00878103fcb2052_2, exception_lineno);
        }
        else if (exception_tb->tb_frame != &frame_cd0098c5d3c660c3b00878103fcb2052_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_cd0098c5d3c660c3b00878103fcb2052_2, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_cd0098c5d3c660c3b00878103fcb2052_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame.
        if (frame_cd0098c5d3c660c3b00878103fcb2052_2 == cache_frame_cd0098c5d3c660c3b00878103fcb2052_2) {
            Py_DECREF(frame_cd0098c5d3c660c3b00878103fcb2052_2);
        }
        cache_frame_cd0098c5d3c660c3b00878103fcb2052_2 = NULL;

        assertFrameObject(frame_cd0098c5d3c660c3b00878103fcb2052_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_4;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_compexpr_left_1 = tmp_class_creation_1__bases;
            tmp_compexpr_right_1 = const_tuple_type_list_tuple;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 105;

                goto try_except_handler_4;
            }
            tmp_condition_result_6 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            branch_yes_4:;
            tmp_dictset_value = const_tuple_type_list_tuple;
            tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_105, const_str_plain___orig_bases__, tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 105;

                goto try_except_handler_4;
            }
            branch_no_4:;
        }
        {
            PyObject *tmp_assign_source_25;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_name_2;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_kw_name_2;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_name_2 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_3 = const_str_plain_WidgetStack;
            tmp_args_name_2 = PyTuple_New(3);
            Py_INCREF(tmp_tuple_element_3);
            PyTuple_SET_ITEM(tmp_args_name_2, 0, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_3 = tmp_class_creation_1__bases;
            Py_INCREF(tmp_tuple_element_3);
            PyTuple_SET_ITEM(tmp_args_name_2, 1, tmp_tuple_element_3);
            tmp_tuple_element_3 = locals_PyQt5$uic$uiparser_105;
            Py_INCREF(tmp_tuple_element_3);
            PyTuple_SET_ITEM(tmp_args_name_2, 2, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kw_name_2 = tmp_class_creation_1__class_decl_dict;
            frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 105;
            tmp_assign_source_25 = CALL_FUNCTION(tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2);
            Py_DECREF(tmp_args_name_2);
            if (tmp_assign_source_25 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 105;

                goto try_except_handler_4;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_25;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_24 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_24);
        goto try_return_handler_4;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser);
        return NULL;
        // Return handler code:
        try_return_handler_4:;
        Py_DECREF(locals_PyQt5$uic$uiparser_105);
        locals_PyQt5$uic$uiparser_105 = NULL;
        goto try_return_handler_3;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_PyQt5$uic$uiparser_105);
        locals_PyQt5$uic$uiparser_105 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_3;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser);
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT((PyObject *)outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser);
        return NULL;
        outline_exception_1:;
        exception_lineno = 105;
        goto try_except_handler_2;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_WidgetStack, tmp_assign_source_24);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT((PyObject *)tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_1__class_decl_dict);
    Py_DECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_dircall_arg1_2;
        tmp_dircall_arg1_2 = const_tuple_type_object_tuple;
        Py_INCREF(tmp_dircall_arg1_2);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_26 = impl___internal__$$$function_1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_26;
    }
    {
        PyObject *tmp_assign_source_27;
        tmp_assign_source_27 = PyDict_New();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_27;
    }
    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_metaclass_name_2;
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_key_name_4;
        PyObject *tmp_dict_name_4;
        PyObject *tmp_dict_name_5;
        PyObject *tmp_key_name_5;
        nuitka_bool tmp_condition_result_8;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_bases_name_2;
        tmp_key_name_4 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_name_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_4, tmp_key_name_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_5;
        }
        tmp_condition_result_7 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_3;
        } else {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_name_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_name_5 = const_str_plain_metaclass;
        tmp_metaclass_name_2 = DICT_GET_ITEM(tmp_dict_name_5, tmp_key_name_5);
        if (tmp_metaclass_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_5;
        }
        goto condexpr_end_3;
        condexpr_false_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_class_creation_2__bases);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_5;
        }
        tmp_condition_result_8 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_4;
        } else {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_subscribed_name_2 = tmp_class_creation_2__bases;
        tmp_subscript_name_2 = const_int_0;
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, 0);
        if (tmp_type_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_5;
        }
        tmp_metaclass_name_2 = BUILTIN_TYPE1(tmp_type_arg_3);
        Py_DECREF(tmp_type_arg_3);
        if (tmp_metaclass_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_5;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_name_2 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_name_2);
        condexpr_end_4:;
        condexpr_end_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_name_2 = tmp_class_creation_2__bases;
        tmp_assign_source_28 = SELECT_METACLASS(tmp_metaclass_name_2, tmp_bases_name_2);
        Py_DECREF(tmp_metaclass_name_2);
        if (tmp_assign_source_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_28;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_key_name_6;
        PyObject *tmp_dict_name_6;
        tmp_key_name_6 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_name_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_6, tmp_key_name_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_5;
        }
        tmp_condition_result_9 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
        branch_yes_5:;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_5;
        }
        branch_no_5:;
    }
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_source_name_6;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_source_name_6 = tmp_class_creation_2__metaclass;
        tmp_res = PyObject_HasAttr(tmp_source_name_6, const_str_plain___prepare__);
        tmp_condition_result_10 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_assign_source_29;
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_7;
            PyObject *tmp_args_name_3;
            PyObject *tmp_tuple_element_4;
            PyObject *tmp_kw_name_3;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_source_name_7 = tmp_class_creation_2__metaclass;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain___prepare__);
            if (tmp_called_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;

                goto try_except_handler_5;
            }
            tmp_tuple_element_4 = const_str_plain_ButtonGroup;
            tmp_args_name_3 = PyTuple_New(2);
            Py_INCREF(tmp_tuple_element_4);
            PyTuple_SET_ITEM(tmp_args_name_3, 0, tmp_tuple_element_4);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_4 = tmp_class_creation_2__bases;
            Py_INCREF(tmp_tuple_element_4);
            PyTuple_SET_ITEM(tmp_args_name_3, 1, tmp_tuple_element_4);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kw_name_3 = tmp_class_creation_2__class_decl_dict;
            frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 164;
            tmp_assign_source_29 = CALL_FUNCTION(tmp_called_name_3, tmp_args_name_3, tmp_kw_name_3);
            Py_DECREF(tmp_called_name_3);
            Py_DECREF(tmp_args_name_3);
            if (tmp_assign_source_29 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;

                goto try_except_handler_5;
            }
            assert(tmp_class_creation_2__prepared == NULL);
            tmp_class_creation_2__prepared = tmp_assign_source_29;
        }
        {
            nuitka_bool tmp_condition_result_11;
            PyObject *tmp_operand_name_2;
            PyObject *tmp_source_name_8;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_source_name_8 = tmp_class_creation_2__prepared;
            tmp_res = PyObject_HasAttr(tmp_source_name_8, const_str_plain___getitem__);
            tmp_operand_name_2 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;

                goto try_except_handler_5;
            }
            tmp_condition_result_11 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
                goto branch_yes_7;
            } else {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_raise_value_2;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_2;
                PyObject *tmp_tuple_element_5;
                PyObject *tmp_getattr_target_2;
                PyObject *tmp_getattr_attr_2;
                PyObject *tmp_getattr_default_2;
                PyObject *tmp_source_name_9;
                PyObject *tmp_type_arg_4;
                tmp_raise_type_2 = PyExc_TypeError;
                tmp_left_name_2 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT(tmp_class_creation_2__metaclass);
                tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
                tmp_getattr_attr_2 = const_str_plain___name__;
                tmp_getattr_default_2 = const_str_angle_metaclass;
                tmp_tuple_element_5 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2);
                if (tmp_tuple_element_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 164;

                    goto try_except_handler_5;
                }
                tmp_right_name_2 = PyTuple_New(2);
                PyTuple_SET_ITEM(tmp_right_name_2, 0, tmp_tuple_element_5);
                CHECK_OBJECT(tmp_class_creation_2__prepared);
                tmp_type_arg_4 = tmp_class_creation_2__prepared;
                tmp_source_name_9 = BUILTIN_TYPE1(tmp_type_arg_4);
                assert(!(tmp_source_name_9 == NULL));
                tmp_tuple_element_5 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain___name__);
                Py_DECREF(tmp_source_name_9);
                if (tmp_tuple_element_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_right_name_2);

                    exception_lineno = 164;

                    goto try_except_handler_5;
                }
                PyTuple_SET_ITEM(tmp_right_name_2, 1, tmp_tuple_element_5);
                tmp_raise_value_2 = BINARY_OPERATION_MOD_UNICODE_TUPLE(tmp_left_name_2, tmp_right_name_2);
                Py_DECREF(tmp_right_name_2);
                if (tmp_raise_value_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 164;

                    goto try_except_handler_5;
                }
                exception_type = tmp_raise_type_2;
                Py_INCREF(tmp_raise_type_2);
                exception_value = tmp_raise_value_2;
                exception_lineno = 164;
                RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

                goto try_except_handler_5;
            }
            branch_no_7:;
        }
        goto branch_end_6;
        branch_no_6:;
        {
            PyObject *tmp_assign_source_30;
            tmp_assign_source_30 = PyDict_New();
            assert(tmp_class_creation_2__prepared == NULL);
            tmp_class_creation_2__prepared = tmp_assign_source_30;
        }
        branch_end_6:;
    }
    {
        PyObject *tmp_assign_source_31;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_PyQt5$uic$uiparser_164 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_2598b7d5190e4e17266e5229aa9e007c;
        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_164, const_str_plain___module__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_7;
        }
        tmp_dictset_value = const_str_digest_4bfe12afbfc91eb5d662408182ab89f0;
        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_164, const_str_plain___doc__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_7;
        }
        tmp_dictset_value = const_str_plain_ButtonGroup;
        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_164, const_str_plain___qualname__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_7;
        }
        MAKE_OR_REUSE_FRAME(cache_frame_7814d7f36e0a436b0414dc6ac25cb1ef_3, codeobj_7814d7f36e0a436b0414dc6ac25cb1ef, module_PyQt5$uic$uiparser, sizeof(void *));
        frame_7814d7f36e0a436b0414dc6ac25cb1ef_3 = cache_frame_7814d7f36e0a436b0414dc6ac25cb1ef_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_7814d7f36e0a436b0414dc6ac25cb1ef_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_7814d7f36e0a436b0414dc6ac25cb1ef_3) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_9___init__();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_164, const_str_plain___init__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7814d7f36e0a436b0414dc6ac25cb1ef_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7814d7f36e0a436b0414dc6ac25cb1ef_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7814d7f36e0a436b0414dc6ac25cb1ef_3, exception_lineno);
        }
        else if (exception_tb->tb_frame != &frame_7814d7f36e0a436b0414dc6ac25cb1ef_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7814d7f36e0a436b0414dc6ac25cb1ef_3, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_7814d7f36e0a436b0414dc6ac25cb1ef_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame.
        if (frame_7814d7f36e0a436b0414dc6ac25cb1ef_3 == cache_frame_7814d7f36e0a436b0414dc6ac25cb1ef_3) {
            Py_DECREF(frame_7814d7f36e0a436b0414dc6ac25cb1ef_3);
        }
        cache_frame_7814d7f36e0a436b0414dc6ac25cb1ef_3 = NULL;

        assertFrameObject(frame_7814d7f36e0a436b0414dc6ac25cb1ef_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_7;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_compexpr_left_2 = tmp_class_creation_2__bases;
            tmp_compexpr_right_2 = const_tuple_type_object_tuple;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;

                goto try_except_handler_7;
            }
            tmp_condition_result_12 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                goto branch_yes_8;
            } else {
                goto branch_no_8;
            }
            branch_yes_8:;
            tmp_dictset_value = const_tuple_type_object_tuple;
            tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_164, const_str_plain___orig_bases__, tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;

                goto try_except_handler_7;
            }
            branch_no_8:;
        }
        {
            PyObject *tmp_assign_source_32;
            PyObject *tmp_called_name_4;
            PyObject *tmp_args_name_4;
            PyObject *tmp_tuple_element_6;
            PyObject *tmp_kw_name_4;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_name_4 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_6 = const_str_plain_ButtonGroup;
            tmp_args_name_4 = PyTuple_New(3);
            Py_INCREF(tmp_tuple_element_6);
            PyTuple_SET_ITEM(tmp_args_name_4, 0, tmp_tuple_element_6);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_6 = tmp_class_creation_2__bases;
            Py_INCREF(tmp_tuple_element_6);
            PyTuple_SET_ITEM(tmp_args_name_4, 1, tmp_tuple_element_6);
            tmp_tuple_element_6 = locals_PyQt5$uic$uiparser_164;
            Py_INCREF(tmp_tuple_element_6);
            PyTuple_SET_ITEM(tmp_args_name_4, 2, tmp_tuple_element_6);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kw_name_4 = tmp_class_creation_2__class_decl_dict;
            frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 164;
            tmp_assign_source_32 = CALL_FUNCTION(tmp_called_name_4, tmp_args_name_4, tmp_kw_name_4);
            Py_DECREF(tmp_args_name_4);
            if (tmp_assign_source_32 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;

                goto try_except_handler_7;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_32;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_assign_source_31 = outline_1_var___class__;
        Py_INCREF(tmp_assign_source_31);
        goto try_return_handler_7;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser);
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        Py_DECREF(locals_PyQt5$uic$uiparser_164);
        locals_PyQt5$uic$uiparser_164 = NULL;
        goto try_return_handler_6;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_PyQt5$uic$uiparser_164);
        locals_PyQt5$uic$uiparser_164 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_6;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser);
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT((PyObject *)outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto outline_exception_2;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser);
        return NULL;
        outline_exception_2:;
        exception_lineno = 164;
        goto try_except_handler_5;
        outline_result_2:;
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_ButtonGroup, tmp_assign_source_31);
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;

    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT((PyObject *)tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_2__class_decl_dict);
    Py_DECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_dircall_arg1_3;
        tmp_dircall_arg1_3 = const_tuple_type_object_tuple;
        Py_INCREF(tmp_dircall_arg1_3);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_33 = impl___internal__$$$function_1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_3__bases == NULL);
        tmp_class_creation_3__bases = tmp_assign_source_33;
    }
    {
        PyObject *tmp_assign_source_34;
        tmp_assign_source_34 = PyDict_New();
        assert(tmp_class_creation_3__class_decl_dict == NULL);
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_34;
    }
    {
        PyObject *tmp_assign_source_35;
        PyObject *tmp_metaclass_name_3;
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_key_name_7;
        PyObject *tmp_dict_name_7;
        PyObject *tmp_dict_name_8;
        PyObject *tmp_key_name_8;
        nuitka_bool tmp_condition_result_14;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_bases_name_3;
        tmp_key_name_7 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_name_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_7, tmp_key_name_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto try_except_handler_8;
        }
        tmp_condition_result_13 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_5;
        } else {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_name_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_name_8 = const_str_plain_metaclass;
        tmp_metaclass_name_3 = DICT_GET_ITEM(tmp_dict_name_8, tmp_key_name_8);
        if (tmp_metaclass_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto try_except_handler_8;
        }
        goto condexpr_end_5;
        condexpr_false_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_class_creation_3__bases);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto try_except_handler_8;
        }
        tmp_condition_result_14 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_6;
        } else {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_subscribed_name_3 = tmp_class_creation_3__bases;
        tmp_subscript_name_3 = const_int_0;
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_3, tmp_subscript_name_3, 0);
        if (tmp_type_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto try_except_handler_8;
        }
        tmp_metaclass_name_3 = BUILTIN_TYPE1(tmp_type_arg_5);
        Py_DECREF(tmp_type_arg_5);
        if (tmp_metaclass_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto try_except_handler_8;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_metaclass_name_3 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_name_3);
        condexpr_end_6:;
        condexpr_end_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_bases_name_3 = tmp_class_creation_3__bases;
        tmp_assign_source_35 = SELECT_METACLASS(tmp_metaclass_name_3, tmp_bases_name_3);
        Py_DECREF(tmp_metaclass_name_3);
        if (tmp_assign_source_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_3__metaclass == NULL);
        tmp_class_creation_3__metaclass = tmp_assign_source_35;
    }
    {
        nuitka_bool tmp_condition_result_15;
        PyObject *tmp_key_name_9;
        PyObject *tmp_dict_name_9;
        tmp_key_name_9 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_name_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_9, tmp_key_name_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto try_except_handler_8;
        }
        tmp_condition_result_15 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_15 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
        branch_yes_9:;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto try_except_handler_8;
        }
        branch_no_9:;
    }
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_source_name_10;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_source_name_10 = tmp_class_creation_3__metaclass;
        tmp_res = PyObject_HasAttr(tmp_source_name_10, const_str_plain___prepare__);
        tmp_condition_result_16 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_assign_source_36;
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_11;
            PyObject *tmp_args_name_5;
            PyObject *tmp_tuple_element_7;
            PyObject *tmp_kw_name_5;
            CHECK_OBJECT(tmp_class_creation_3__metaclass);
            tmp_source_name_11 = tmp_class_creation_3__metaclass;
            tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain___prepare__);
            if (tmp_called_name_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 175;

                goto try_except_handler_8;
            }
            tmp_tuple_element_7 = const_str_plain_UIParser;
            tmp_args_name_5 = PyTuple_New(2);
            Py_INCREF(tmp_tuple_element_7);
            PyTuple_SET_ITEM(tmp_args_name_5, 0, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_tuple_element_7 = tmp_class_creation_3__bases;
            Py_INCREF(tmp_tuple_element_7);
            PyTuple_SET_ITEM(tmp_args_name_5, 1, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
            tmp_kw_name_5 = tmp_class_creation_3__class_decl_dict;
            frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 175;
            tmp_assign_source_36 = CALL_FUNCTION(tmp_called_name_5, tmp_args_name_5, tmp_kw_name_5);
            Py_DECREF(tmp_called_name_5);
            Py_DECREF(tmp_args_name_5);
            if (tmp_assign_source_36 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 175;

                goto try_except_handler_8;
            }
            assert(tmp_class_creation_3__prepared == NULL);
            tmp_class_creation_3__prepared = tmp_assign_source_36;
        }
        {
            nuitka_bool tmp_condition_result_17;
            PyObject *tmp_operand_name_3;
            PyObject *tmp_source_name_12;
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_source_name_12 = tmp_class_creation_3__prepared;
            tmp_res = PyObject_HasAttr(tmp_source_name_12, const_str_plain___getitem__);
            tmp_operand_name_3 = (tmp_res != 0) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_name_3);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 175;

                goto try_except_handler_8;
            }
            tmp_condition_result_17 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_17 == NUITKA_BOOL_TRUE) {
                goto branch_yes_11;
            } else {
                goto branch_no_11;
            }
            branch_yes_11:;
            {
                PyObject *tmp_raise_type_3;
                PyObject *tmp_raise_value_3;
                PyObject *tmp_left_name_3;
                PyObject *tmp_right_name_3;
                PyObject *tmp_tuple_element_8;
                PyObject *tmp_getattr_target_3;
                PyObject *tmp_getattr_attr_3;
                PyObject *tmp_getattr_default_3;
                PyObject *tmp_source_name_13;
                PyObject *tmp_type_arg_6;
                tmp_raise_type_3 = PyExc_TypeError;
                tmp_left_name_3 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT(tmp_class_creation_3__metaclass);
                tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
                tmp_getattr_attr_3 = const_str_plain___name__;
                tmp_getattr_default_3 = const_str_angle_metaclass;
                tmp_tuple_element_8 = BUILTIN_GETATTR(tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3);
                if (tmp_tuple_element_8 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 175;

                    goto try_except_handler_8;
                }
                tmp_right_name_3 = PyTuple_New(2);
                PyTuple_SET_ITEM(tmp_right_name_3, 0, tmp_tuple_element_8);
                CHECK_OBJECT(tmp_class_creation_3__prepared);
                tmp_type_arg_6 = tmp_class_creation_3__prepared;
                tmp_source_name_13 = BUILTIN_TYPE1(tmp_type_arg_6);
                assert(!(tmp_source_name_13 == NULL));
                tmp_tuple_element_8 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain___name__);
                Py_DECREF(tmp_source_name_13);
                if (tmp_tuple_element_8 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_right_name_3);

                    exception_lineno = 175;

                    goto try_except_handler_8;
                }
                PyTuple_SET_ITEM(tmp_right_name_3, 1, tmp_tuple_element_8);
                tmp_raise_value_3 = BINARY_OPERATION_MOD_UNICODE_TUPLE(tmp_left_name_3, tmp_right_name_3);
                Py_DECREF(tmp_right_name_3);
                if (tmp_raise_value_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 175;

                    goto try_except_handler_8;
                }
                exception_type = tmp_raise_type_3;
                Py_INCREF(tmp_raise_type_3);
                exception_value = tmp_raise_value_3;
                exception_lineno = 175;
                RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

                goto try_except_handler_8;
            }
            branch_no_11:;
        }
        goto branch_end_10;
        branch_no_10:;
        {
            PyObject *tmp_assign_source_37;
            tmp_assign_source_37 = PyDict_New();
            assert(tmp_class_creation_3__prepared == NULL);
            tmp_class_creation_3__prepared = tmp_assign_source_37;
        }
        branch_end_10:;
    }
    {
        PyObject *tmp_assign_source_38;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals_PyQt5$uic$uiparser_175 = tmp_set_locals_3;
            Py_INCREF(tmp_set_locals_3);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_2598b7d5190e4e17266e5229aa9e007c;
        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain___module__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto try_except_handler_10;
        }
        tmp_dictset_value = const_str_plain_UIParser;
        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain___qualname__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto try_except_handler_10;
        }
        MAKE_OR_REUSE_FRAME(cache_frame_568bd259457e2cbaeb46d9eb691f9da4_4, codeobj_568bd259457e2cbaeb46d9eb691f9da4, module_PyQt5$uic$uiparser, sizeof(void *));
        frame_568bd259457e2cbaeb46d9eb691f9da4_4 = cache_frame_568bd259457e2cbaeb46d9eb691f9da4_4;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_568bd259457e2cbaeb46d9eb691f9da4_4);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_568bd259457e2cbaeb46d9eb691f9da4_4) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_10___init__();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain___init__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_11_uniqueName();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_uniqueName, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_12_reset();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_reset, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 208;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            PyObject *tmp_defaults_1;
            tmp_defaults_1 = const_tuple_true_tuple;
            Py_INCREF(tmp_defaults_1);
            tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_13_setupObject(tmp_defaults_1);



            tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_setupObject, tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 220;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_14_getProperty();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_getProperty, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 238;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_15_createWidget();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createWidget, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_16_handleHeaderView();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_handleHeaderView, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 392;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_17_createSpacer();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createSpacer, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 421;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_18_createLayout();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createLayout, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 451;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_19_configureLayout();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_configureLayout, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_20_setArray();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_setArray, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 529;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_21_disableSorting();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_disableSorting, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 537;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_22_handleItem();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_handleItem, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 543;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_23_addAction();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_addAction, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_called_name_6;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_staticmethod_arg_1;
            tmp_res = MAPPING_HAS_ITEM(locals_PyQt5$uic$uiparser_175, const_str_plain_staticmethod);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 636;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_condition_result_18 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_7;
            } else {
                goto condexpr_false_7;
            }
            condexpr_true_7:;
            tmp_called_name_6 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_staticmethod);

            if (tmp_called_name_6 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 1496 ], 34, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 636;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_called_name_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 636;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_args_element_name_1 = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_24_any_i18n();



            frame_568bd259457e2cbaeb46d9eb691f9da4_4->m_frame.f_lineno = 636;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_6, tmp_args_element_name_1);
            Py_DECREF(tmp_called_name_6);
            Py_DECREF(tmp_args_element_name_1);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 636;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            goto condexpr_end_7;
            condexpr_false_7:;
            tmp_staticmethod_arg_1 = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_24_any_i18n();



            tmp_dictset_value = BUILTIN_STATICMETHOD(tmp_staticmethod_arg_1);
            Py_DECREF(tmp_staticmethod_arg_1);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 636;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            condexpr_end_7:;
            tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_any_i18n, tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 637;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_25_createWidgetItem();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createWidgetItem, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 646;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_26_addHeader();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_addHeader, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 705;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_27_setZOrder();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_setZOrder, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 763;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_28_createAction();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createAction, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 776;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_29_createActionGroup();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createActionGroup, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 780;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_dict_key_5;
            PyObject *tmp_dict_value_5;
            PyObject *tmp_dict_key_6;
            PyObject *tmp_dict_value_6;
            PyObject *tmp_dict_key_7;
            PyObject *tmp_dict_value_7;
            PyObject *tmp_dict_key_8;
            PyObject *tmp_dict_value_8;
            PyObject *tmp_dict_key_9;
            PyObject *tmp_dict_value_9;
            PyObject *tmp_dict_key_10;
            PyObject *tmp_dict_value_10;
            tmp_dict_key_1 = const_str_plain_widget;
            tmp_dict_value_1 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createWidget);

            if (tmp_dict_value_1 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3555 ], 34, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 787;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 787;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_dictset_value = _PyDict_NewPresized( 10 );
            tmp_res = PyDict_SetItem(tmp_dictset_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_2 = const_str_plain_addaction;
            tmp_dict_value_2 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_addAction);

            if (tmp_dict_value_2 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                Py_DECREF(tmp_dictset_value);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3589 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 788;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_dict_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dictset_value);

                exception_lineno = 788;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyDict_SetItem(tmp_dictset_value, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            assert(!(tmp_res != 0));
            tmp_dict_key_3 = const_str_plain_layout;
            tmp_dict_value_3 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createLayout);

            if (tmp_dict_value_3 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                Py_DECREF(tmp_dictset_value);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3620 ], 34, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 789;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dictset_value);

                exception_lineno = 789;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyDict_SetItem(tmp_dictset_value, tmp_dict_key_3, tmp_dict_value_3);
            Py_DECREF(tmp_dict_value_3);
            assert(!(tmp_res != 0));
            tmp_dict_key_4 = const_str_plain_spacer;
            tmp_dict_value_4 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createSpacer);

            if (tmp_dict_value_4 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                Py_DECREF(tmp_dictset_value);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3654 ], 34, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 790;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_dict_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dictset_value);

                exception_lineno = 790;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyDict_SetItem(tmp_dictset_value, tmp_dict_key_4, tmp_dict_value_4);
            Py_DECREF(tmp_dict_value_4);
            assert(!(tmp_res != 0));
            tmp_dict_key_5 = const_str_plain_item;
            tmp_dict_value_5 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_handleItem);

            if (tmp_dict_value_5 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                Py_DECREF(tmp_dictset_value);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3688 ], 32, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 791;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_dict_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dictset_value);

                exception_lineno = 791;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyDict_SetItem(tmp_dictset_value, tmp_dict_key_5, tmp_dict_value_5);
            Py_DECREF(tmp_dict_value_5);
            assert(!(tmp_res != 0));
            tmp_dict_key_6 = const_str_plain_action;
            tmp_dict_value_6 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createAction);

            if (tmp_dict_value_6 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                Py_DECREF(tmp_dictset_value);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3720 ], 34, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 792;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_dict_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dictset_value);

                exception_lineno = 792;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyDict_SetItem(tmp_dictset_value, tmp_dict_key_6, tmp_dict_value_6);
            Py_DECREF(tmp_dict_value_6);
            assert(!(tmp_res != 0));
            tmp_dict_key_7 = const_str_plain_actiongroup;
            tmp_dict_value_7 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createActionGroup);

            if (tmp_dict_value_7 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                Py_DECREF(tmp_dictset_value);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3754 ], 39, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 793;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_dict_value_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dictset_value);

                exception_lineno = 793;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyDict_SetItem(tmp_dictset_value, tmp_dict_key_7, tmp_dict_value_7);
            Py_DECREF(tmp_dict_value_7);
            assert(!(tmp_res != 0));
            tmp_dict_key_8 = const_str_plain_column;
            tmp_dict_value_8 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_addHeader);

            if (tmp_dict_value_8 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                Py_DECREF(tmp_dictset_value);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3793 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 794;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_dict_value_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dictset_value);

                exception_lineno = 794;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyDict_SetItem(tmp_dictset_value, tmp_dict_key_8, tmp_dict_value_8);
            Py_DECREF(tmp_dict_value_8);
            assert(!(tmp_res != 0));
            tmp_dict_key_9 = const_str_plain_row;
            tmp_dict_value_9 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_addHeader);

            if (tmp_dict_value_9 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                Py_DECREF(tmp_dictset_value);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3793 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 795;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_dict_value_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dictset_value);

                exception_lineno = 795;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyDict_SetItem(tmp_dictset_value, tmp_dict_key_9, tmp_dict_value_9);
            Py_DECREF(tmp_dict_value_9);
            assert(!(tmp_res != 0));
            tmp_dict_key_10 = const_str_plain_zorder;
            tmp_dict_value_10 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_setZOrder);

            if (tmp_dict_value_10 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                Py_DECREF(tmp_dictset_value);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 3824 ], 31, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 796;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_dict_value_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dictset_value);

                exception_lineno = 796;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyDict_SetItem(tmp_dictset_value, tmp_dict_key_10, tmp_dict_value_10);
            Py_DECREF(tmp_dict_value_10);
            assert(!(tmp_res != 0));
            tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_widgetTreeItemHandlers, tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 786;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_30_traverseWidgetTree();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_traverseWidgetTree, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 799;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_31_createUserInterface();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createUserInterface, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 808;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_32_addActions();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_addActions, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 834;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_33_setDelayedProps();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_setDelayedProps, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 846;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_34_setBuddies();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_setBuddies, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 854;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_35_classname();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_classname, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 863;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_36_setContext();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_setContext, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_37_readDefaults();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_readDefaults, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 881;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_38_setTaborder();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_setTaborder, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 885;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_39_readResources();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_readResources, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 895;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_40_createConnections();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createConnections, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 915;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_41_customWidgets();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_customWidgets, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 944;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_42_createToplevelWidget();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_createToplevelWidget, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 974;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_43_buttonGroups();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_buttonGroups, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 977;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_44_finalize();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_finalize, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 991;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_45_parse();



        tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_parse, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 994;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            nuitka_bool tmp_condition_result_19;
            PyObject *tmp_called_name_7;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_staticmethod_arg_2;
            tmp_res = MAPPING_HAS_ITEM(locals_PyQt5$uic$uiparser_175, const_str_plain_staticmethod);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1043;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_condition_result_19 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_19 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_8;
            } else {
                goto condexpr_false_8;
            }
            condexpr_true_8:;
            tmp_called_name_7 = PyObject_GetItem(locals_PyQt5$uic$uiparser_175, const_str_plain_staticmethod);

            if (tmp_called_name_7 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 1496 ], 34, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1043;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if (tmp_called_name_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1043;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_args_element_name_2 = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_46__form_layout_role();



            frame_568bd259457e2cbaeb46d9eb691f9da4_4->m_frame.f_lineno = 1043;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_7, tmp_args_element_name_2);
            Py_DECREF(tmp_called_name_7);
            Py_DECREF(tmp_args_element_name_2);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1043;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            goto condexpr_end_8;
            condexpr_false_8:;
            tmp_staticmethod_arg_2 = MAKE_FUNCTION_PyQt5$uic$uiparser$$$function_46__form_layout_role();



            tmp_dictset_value = BUILTIN_STATICMETHOD(tmp_staticmethod_arg_2);
            Py_DECREF(tmp_staticmethod_arg_2);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1043;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            condexpr_end_8:;
            tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain__form_layout_role, tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1044;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_568bd259457e2cbaeb46d9eb691f9da4_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_568bd259457e2cbaeb46d9eb691f9da4_4);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_568bd259457e2cbaeb46d9eb691f9da4_4, exception_lineno);
        }
        else if (exception_tb->tb_frame != &frame_568bd259457e2cbaeb46d9eb691f9da4_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_568bd259457e2cbaeb46d9eb691f9da4_4, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_568bd259457e2cbaeb46d9eb691f9da4_4,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame.
        if (frame_568bd259457e2cbaeb46d9eb691f9da4_4 == cache_frame_568bd259457e2cbaeb46d9eb691f9da4_4) {
            Py_DECREF(frame_568bd259457e2cbaeb46d9eb691f9da4_4);
        }
        cache_frame_568bd259457e2cbaeb46d9eb691f9da4_4 = NULL;

        assertFrameObject(frame_568bd259457e2cbaeb46d9eb691f9da4_4);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_10;
        skip_nested_handling_3:;
        {
            nuitka_bool tmp_condition_result_20;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_compexpr_left_3 = tmp_class_creation_3__bases;
            tmp_compexpr_right_3 = const_tuple_type_object_tuple;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 175;

                goto try_except_handler_10;
            }
            tmp_condition_result_20 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_20 == NUITKA_BOOL_TRUE) {
                goto branch_yes_12;
            } else {
                goto branch_no_12;
            }
            branch_yes_12:;
            tmp_dictset_value = const_tuple_type_object_tuple;
            tmp_res = PyObject_SetItem(locals_PyQt5$uic$uiparser_175, const_str_plain___orig_bases__, tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 175;

                goto try_except_handler_10;
            }
            branch_no_12:;
        }
        {
            PyObject *tmp_assign_source_39;
            PyObject *tmp_called_name_8;
            PyObject *tmp_args_name_6;
            PyObject *tmp_tuple_element_9;
            PyObject *tmp_kw_name_6;
            CHECK_OBJECT(tmp_class_creation_3__metaclass);
            tmp_called_name_8 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_9 = const_str_plain_UIParser;
            tmp_args_name_6 = PyTuple_New(3);
            Py_INCREF(tmp_tuple_element_9);
            PyTuple_SET_ITEM(tmp_args_name_6, 0, tmp_tuple_element_9);
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_tuple_element_9 = tmp_class_creation_3__bases;
            Py_INCREF(tmp_tuple_element_9);
            PyTuple_SET_ITEM(tmp_args_name_6, 1, tmp_tuple_element_9);
            tmp_tuple_element_9 = locals_PyQt5$uic$uiparser_175;
            Py_INCREF(tmp_tuple_element_9);
            PyTuple_SET_ITEM(tmp_args_name_6, 2, tmp_tuple_element_9);
            CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
            tmp_kw_name_6 = tmp_class_creation_3__class_decl_dict;
            frame_79cb6a44225af627fb79455c2811402d->m_frame.f_lineno = 175;
            tmp_assign_source_39 = CALL_FUNCTION(tmp_called_name_8, tmp_args_name_6, tmp_kw_name_6);
            Py_DECREF(tmp_args_name_6);
            if (tmp_assign_source_39 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 175;

                goto try_except_handler_10;
            }
            assert(outline_2_var___class__ == NULL);
            outline_2_var___class__ = tmp_assign_source_39;
        }
        CHECK_OBJECT(outline_2_var___class__);
        tmp_assign_source_38 = outline_2_var___class__;
        Py_INCREF(tmp_assign_source_38);
        goto try_return_handler_10;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser);
        return NULL;
        // Return handler code:
        try_return_handler_10:;
        Py_DECREF(locals_PyQt5$uic$uiparser_175);
        locals_PyQt5$uic$uiparser_175 = NULL;
        goto try_return_handler_9;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_PyQt5$uic$uiparser_175);
        locals_PyQt5$uic$uiparser_175 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_9;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser);
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        CHECK_OBJECT((PyObject *)outline_2_var___class__);
        Py_DECREF(outline_2_var___class__);
        outline_2_var___class__ = NULL;

        goto outline_result_3;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto outline_exception_3;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(PyQt5$uic$uiparser);
        return NULL;
        outline_exception_3:;
        exception_lineno = 175;
        goto try_except_handler_8;
        outline_result_3:;
        UPDATE_STRING_DICT1(moduledict_PyQt5$uic$uiparser, (Nuitka_StringObject *)const_str_plain_UIParser, tmp_assign_source_38);
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;

    Py_XDECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;

    Py_XDECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION(frame_79cb6a44225af627fb79455c2811402d);
#endif
    popFrameStack();

    assertFrameObject(frame_79cb6a44225af627fb79455c2811402d);

    goto frame_no_exception_4;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_79cb6a44225af627fb79455c2811402d);
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK(frame_79cb6a44225af627fb79455c2811402d, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_79cb6a44225af627fb79455c2811402d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_79cb6a44225af627fb79455c2811402d, exception_lineno);
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_4:;
    CHECK_OBJECT((PyObject *)tmp_class_creation_3__bases);
    Py_DECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_3__class_decl_dict);
    Py_DECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_3__metaclass);
    Py_DECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_3__prepared);
    Py_DECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;


    return module_PyQt5$uic$uiparser;
    module_exception_exit:
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);
    return NULL;
}
